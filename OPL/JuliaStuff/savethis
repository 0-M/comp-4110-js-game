	.file	"test.f90"
 # GNU Fortran2008 (GCC) version 5.3.0 (mingw32)
 #	compiled by GNU C version 5.3.0, GMP version 6.1.0, MPFR version 3.1.3, MPC version 1.0.2
 # warning: GMP header version 6.1.0 differs from library version 5.1.2.
 # warning: MPFR header version 3.1.3 differs from library version 3.1.2.
 # GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
 # options passed:  test.f90 -mtune=generic -march=i586 -auxbase-strip test
 # -Ofast -fverbose-asm
 # -fintrinsic-modules-path c:/mingw/bin/../lib/gcc/mingw32/5.3.0/finclude
 # options enabled:  -faggressive-loop-optimizations -falign-labels
 # -fassociative-math -fasynchronous-unwind-tables -fauto-inc-dec
 # -fbranch-count-reg -fcaller-saves -fchkp-check-incomplete-type
 # -fchkp-check-read -fchkp-check-write -fchkp-instrument-calls
 # -fchkp-narrow-bounds -fchkp-optimize -fchkp-store-bounds
 # -fchkp-use-static-bounds -fchkp-use-static-const-bounds
 # -fchkp-use-wrappers -fcombine-stack-adjustments -fcommon -fcompare-elim
 # -fcprop-registers -fcrossjumping -fcse-follow-jumps -fcx-limited-range
 # -fdefer-pop -fdelete-null-pointer-checks -fdevirtualize
 # -fdevirtualize-speculatively -fdwarf2-cfi-asm -fearly-inlining
 # -feliminate-unused-debug-types -fexpensive-optimizations
 # -ffinite-math-only -fforward-propagate -ffunction-cse -fgcse
 # -fgcse-after-reload -fgcse-lm -fgnu-runtime -fgnu-unique
 # -fguess-branch-probability -fhoist-adjacent-loads -fident
 # -fif-conversion -fif-conversion2 -findirect-inlining -finline
 # -finline-atomics -finline-functions -finline-functions-called-once
 # -finline-small-functions -fipa-cp -fipa-cp-alignment -fipa-cp-clone
 # -fipa-icf -fipa-icf-functions -fipa-icf-variables -fipa-profile
 # -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra -fira-hoist-pressure
 # -fira-share-save-slots -fira-share-spill-slots
 # -fisolate-erroneous-paths-dereference -fivopts -fkeep-inline-dllexport
 # -fkeep-static-consts -fleading-underscore -flifetime-dse -flra-remat
 # -flto-odr-type-merging -fmerge-constants -fmerge-debug-strings
 # -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
 # -foptimize-strlen -fpartial-inlining -fpeephole -fpeephole2
 # -fpredictive-commoning -fprefetch-loop-arrays -freciprocal-math -free
 # -freg-struct-return -freorder-blocks -freorder-blocks-and-partition
 # -freorder-functions -frerun-cse-after-loop
 # -fsched-critical-path-heuristic -fsched-dep-count-heuristic
 # -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
 # -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
 # -fsched-stalled-insns-dep -fschedule-fusion -fschedule-insns2
 # -fsemantic-interposition -fset-stack-executable -fshow-column
 # -fshrink-wrap -fsplit-ivs-in-unroller -fsplit-wide-types -fssa-phiopt
 # -fstdarg-opt -fstrict-aliasing -fstrict-overflow
 # -fstrict-volatile-bitfields -fsync-libcalls -fthread-jumps
 # -ftoplevel-reorder -ftree-bit-ccp -ftree-builtin-call-dce -ftree-ccp
 # -ftree-ch -ftree-coalesce-vars -ftree-copy-prop -ftree-copyrename
 # -ftree-cselim -ftree-dce -ftree-dominator-opts -ftree-dse
 # -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
 # -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
 # -ftree-loop-optimize -ftree-loop-vectorize -ftree-parallelize-loops=
 # -ftree-partial-pre -ftree-phiprop -ftree-pre -ftree-pta -ftree-reassoc
 # -ftree-scev-cprop -ftree-sink -ftree-slp-vectorize -ftree-slsr
 # -ftree-sra -ftree-switch-conversion -ftree-tail-merge -ftree-ter
 # -ftree-vrp -funit-at-a-time -funsafe-math-optimizations -funswitch-loops
 # -funwind-tables -fverbose-asm -fzero-initialized-in-bss -m32 -m80387
 # -m96bit-long-double -maccumulate-outgoing-args -malign-double
 # -malign-stringops -mavx256-split-unaligned-load
 # -mavx256-split-unaligned-store -mfancy-math-387 -mfp-ret-in-387
 # -mlong-double-80 -mms-bitfields -mno-red-zone -mno-sse4 -mpush-args
 # -msahf -mstack-arg-probe -mvzeroupper

	.section	.text.unlikely,"x"
LCOLDB2:
	.text
LHOTB2:
	.p2align 4,,15
	.globl	___utils_MOD_sysclock2ms
	.def	___utils_MOD_sysclock2ms;	.scl	2;	.type	32;	.endef
___utils_MOD_sysclock2ms:
LFB0:
	.cfi_startproc
	subl	$44, %esp	 #,
	.cfi_def_cfa_offset 48
	leal	24(%esp), %eax	 #, tmp95
	movl	$0, 8(%esp)	 #,
	movl	$0, (%esp)	 #,
	movl	%eax, 4(%esp)	 # tmp95,
	call	__gfortran_system_clock_8	 #
	fildq	24(%esp)	 # count_rate.0
	movl	48(%esp), %eax	 # t, t
	fdivrs	LC0	 #
	fildq	(%eax)	 # *t_6(D)
	addl	$44, %esp	 #,
	.cfi_def_cfa_offset 4
	fmulp	%st, %st(1)	 #,
	ret
	.cfi_endproc
LFE0:
	.section	.text.unlikely,"x"
LCOLDE2:
	.text
LHOTE2:
	.section	.text.unlikely,"x"
LCOLDB7:
	.text
LHOTB7:
	.p2align 4,,15
	.globl	___utils_MOD_randn
	.def	___utils_MOD_randn;	.scl	2;	.type	32;	.endef
___utils_MOD_randn:
LFB1:
	.cfi_startproc
	pushl	%ebp	 #
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	pushl	%edi	 #
	.cfi_def_cfa_offset 12
	.cfi_offset 7, -12
	pushl	%esi	 #
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pushl	%ebx	 #
	.cfi_def_cfa_offset 20
	.cfi_offset 3, -20
	subl	$92, %esp	 #,
	.cfi_def_cfa_offset 112
	movl	112(%esp), %eax	 # a, a
	movl	12(%eax), %ecx	 # *a_9(D).dim[0].stride, D.6364
	testl	%ecx, %ecx	 # D.6364
	je	L14	 #,
	movl	%ecx, %ebx	 # D.6364, D.6364
	negl	%ebx	 # D.6364
L4:
	movl	32(%eax), %edi	 # *a_9(D).dim[1].ubound, *a_9(D).dim[1].ubound
	subl	28(%eax), %edi	 # *a_9(D).dim[1].lbound, D.6364
	movl	20(%eax), %edx	 # *a_9(D).dim[0].ubound, *a_9(D).dim[0].ubound
	subl	16(%eax), %edx	 # *a_9(D).dim[0].lbound, D.6364
	movl	24(%eax), %esi	 # *a_9(D).dim[1].stride, D.6364
	addl	$1, %edi	 #, D.6364
	movl	%edi, %ebp	 # D.6364, D.6364
	sarl	$31, %edi	 #, tmp141
	addl	$1, %edx	 #, ubound.1
	notl	%edi	 # tmp141
	andl	%edi, %ebp	 # tmp141, D.6364
	movl	%ebp, 56(%esp)	 # D.6364, %sfp
	je	L3	 #,
	fildl	LC6	 #
	movl	(%eax), %eax	 # *a_9(D).data, *a_9(D).data
	movl	%edx, %ebp	 # ubound.1, tmp142
	addl	%ecx, %ebx	 # D.6364, D.6365
	sarl	$31, %ebp	 #, tmp142
	movl	$0, 48(%esp)	 #, %sfp
	notl	%ebp	 # tmp142
	leal	(%eax,%ebx,8), %eax	 #, ivtmp.329
	andl	%edx, %ebp	 # ubound.1, D.6364
	leal	0(,%esi,8), %edx	 #, D.6365
	movl	%eax, 52(%esp)	 # ivtmp.329, %sfp
	leal	0(,%ecx,8), %eax	 #, D.6365
	movl	%edx, 60(%esp)	 # D.6365, %sfp
	movl	%eax, 44(%esp)	 # D.6365, %sfp
	fstpt	16(%esp)	 # %sfp
	.p2align 4,,10
L8:
	xorl	%esi, %esi	 # ivtmp.320
	testl	%ebp, %ebp	 # D.6364
	movl	52(%esp), %edi	 # %sfp, ivtmp.323
	je	L13	 #,
	.p2align 4,,10
L17:
	movl	_second.3393, %eax	 # second,
	testl	%eax, %eax	 #
	jne	L21	 #,
	leal	72(%esp), %ebx	 #, tmp184
	movl	$1, _second.3393	 #, second
	jmp	L11	 #
	.p2align 4,,10
L22:
	fstp	%st(0)	 #
	fstp	%st(0)	 #
L11:
	movl	%ebx, (%esp)	 # tmp184,
	call	__gfortran_random_r8	 #
	movl	$_v.3397, (%esp)	 #,
	call	__gfortran_random_r8	 #
	fldl	72(%esp)	 # u
	fldt	16(%esp)	 # %sfp
	fxch	%st(1)	 #
	fscale
	fstp	%st(1)	 #
	fld1
	fsubr	%st, %st(1)	 #,
	fxch	%st(1)	 #
	fstl	72(%esp)	 # u
	fldl	_v.3397	 # v
	fldt	16(%esp)	 # %sfp
	fxch	%st(1)	 #
	fscale
	fstp	%st(1)	 #
	fsub	%st(2), %st	 #,
	fstl	_v.3397	 # v
	fld	%st(1)	 #
	fmul	%st(2), %st	 #,
	fxch	%st(1)	 #
	fmul	%st(0), %st	 #,
	faddp	%st, %st(1)	 #,
	faddl	LC4	 #
	fxch	%st(2)	 #
	fcomp	%st(2)	 #
	fnstsw	%ax	 # tmp170
	sahf
	jbe	L22	 #,
	fldln2
	fld	%st(2)	 #
	fyl2x
	fldt	16(%esp)	 # %sfp
	fxch	%st(1)	 #
	fscale
	fstp	%st(1)	 #
	fdivp	%st, %st(2)	 #,
	fxch	%st(1)	 #
	fchs
	fsqrt
	fstl	_sln.3394	 # sln
	fmulp	%st, %st(1)	 #,
L10:
	addl	$1, %esi	 #, ivtmp.320
	fstpl	(%edi)	 # MEM[base: _28, offset: 0B]
	addl	44(%esp), %edi	 # %sfp, ivtmp.323
	cmpl	%ebp, %esi	 # D.6364, ivtmp.320
	jne	L17	 #,
L13:
	addl	$1, 48(%esp)	 #, %sfp
	movl	60(%esp), %edx	 # %sfp, D.6365
	movl	48(%esp), %eax	 # %sfp, ivtmp.326
	addl	%edx, 52(%esp)	 # D.6365, %sfp
	cmpl	%eax, 56(%esp)	 # ivtmp.326, %sfp
	jne	L8	 #,
L3:
	addl	$92, %esp	 #,
	.cfi_remember_state
	.cfi_def_cfa_offset 20
	popl	%ebx	 #
	.cfi_restore 3
	.cfi_def_cfa_offset 16
	popl	%esi	 #
	.cfi_restore 6
	.cfi_def_cfa_offset 12
	popl	%edi	 #
	.cfi_restore 7
	.cfi_def_cfa_offset 8
	popl	%ebp	 #
	.cfi_restore 5
	.cfi_def_cfa_offset 4
	ret
	.p2align 4,,10
L21:
	.cfi_restore_state
	fldl	_v.3397	 # v
	movl	$0, _second.3393	 #, second
	fmull	_sln.3394	 # sln
	jmp	L10	 #
L14:
	movl	$-1, %ebx	 #, D.6364
	movl	$1, %ecx	 #, D.6364
	jmp	L4	 #
	.cfi_endproc
LFE1:
	.section	.text.unlikely,"x"
LCOLDE7:
	.text
LHOTE7:
	.section .rdata,"dr"
	.align 4
LC8:
	.ascii "Integer overflow when calculating the amount of memory to allocate\0"
LC9:
	.ascii "seed\0"
	.align 4
LC10:
	.ascii "Attempting to allocate already allocated variable '%s'\0"
LC11:
	.ascii "At line 76 of file test.f90\0"
	.align 4
LC12:
	.ascii "Allocation would exceed memory limit\0"
	.section	.text.unlikely,"x"
LCOLDB13:
	.text
LHOTB13:
	.p2align 4,,15
	.globl	___utils_MOD_init_random_seed
	.def	___utils_MOD_init_random_seed;	.scl	2;	.type	32;	.endef
___utils_MOD_init_random_seed:
LFB3:
	.cfi_startproc
	pushl	%ebp	 #
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp	 #,
	.cfi_def_cfa_register 5
	pushl	%edi	 #
	pushl	%esi	 #
	pushl	%ebx	 #
	leal	-56(%ebp), %eax	 #, tmp143
	subl	$108, %esp	 #,
	.cfi_offset 7, -12
	.cfi_offset 6, -16
	.cfi_offset 3, -20
	movl	$0, -48(%ebp)	 #, seed.data
	movl	%eax, (%esp)	 # tmp143,
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	call	__gfortran_random_seed_i4	 #
	movl	-56(%ebp), %ebx	 # n, D.6394
	movl	%ebx, %eax	 # D.6394, tmp144
	sarl	$31, %eax	 #, tmp144
	notl	%eax	 # tmp144
	andl	%ebx, %eax	 # D.6394, D.6394
	je	L46	 #,
	movl	%eax, %edx	 # D.6394, D.6394
	leal	0(,%eax,4), %ecx	 #, tmp193
	xorl	%eax, %eax	 # tmp194
	testl	%ebx, %ebx	 # D.6394
	setle	%al	 #, tmp194
	subl	$1, %eax	 #, tmp194
	andl	%ecx, %eax	 # tmp193, D.6392
	cmpl	$1073741823, %edx	 #, D.6394
	jg	L61	 #,
L24:
	movl	-48(%ebp), %edx	 # seed.data,
	testl	%edx, %edx	 #
	jne	L62	 #,
	testl	%eax, %eax	 # D.6392
	jne	L27	 #,
	movl	$1, %eax	 #, D.6392
L27:
	movl	%eax, (%esp)	 # D.6392,
	call	_malloc	 #
	testl	%eax, %eax	 # tmp146
	movl	%eax, -48(%ebp)	 # tmp146, seed.data
	je	L29	 #,
	leal	-52(%ebp), %eax	 #, tmp147
	movl	%ebx, -28(%ebp)	 # D.6394, seed.dim[0].ubound
	movl	$265, -40(%ebp)	 #, seed.dtype
	movl	$1, -32(%ebp)	 #, seed.dim[0].lbound
	movl	$1, -36(%ebp)	 #, seed.dim[0].stride
	movl	$-1, -44(%ebp)	 #, seed.offset
	movl	%eax, (%esp)	 # tmp147,
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	call	__gfortran_system_clock_4	 #
	movl	-48(%ebp), %eax	 # seed.data, D.6393
	movl	-52(%ebp), %esi	 # count.11, clock
	movl	%esp, -96(%ebp)	 #, %sfp
	movl	%eax, -84(%ebp)	 # D.6393, %sfp
	movl	-44(%ebp), %eax	 # seed.offset, D.6394
	movl	%eax, -88(%ebp)	 # D.6394, %sfp
	movl	-32(%ebp), %eax	 # seed.dim[0].lbound, D.6394
	movl	%eax, -92(%ebp)	 # D.6394, %sfp
	movl	-56(%ebp), %eax	 # n, D.6394
	movl	%eax, %edi	 # D.6394, tmp150
	movl	%eax, -80(%ebp)	 # D.6394, %sfp
	movl	$0, (%esp)	 #,
	sarl	$31, %edi	 #, tmp150
	notl	%edi	 # tmp150
	andl	%eax, %edi	 # D.6394, D.6394
	sall	$2, %edi	 #, D.6392
	movl	%edi, 4(%esp)	 # D.6392,
	call	_realloc	 #
	testl	%eax, %eax	 # D.6399
	movl	%eax, %ebx	 #, D.6399
	jne	L50	 #,
	testl	%edi, %edi	 # D.6392
	jne	L29	 #,
L50:
	movl	-80(%ebp), %edi	 # %sfp, D.6394
	testl	%edi, %edi	 # D.6394
	jle	L48	 #,
	leal	(%edi,%edi,8), %eax	 #, tmp157
	movl	%ebx, %edx	 # D.6399, ivtmp.342
	leal	(%edi,%eax,4), %ecx	 #, tmp159
	xorl	%eax, %eax	 # ivtmp.341
	.p2align 4,,10
L32:
	movl	%eax, (%edx)	 # ivtmp.341, MEM[base: _115, offset: 0B]
	addl	$37, %eax	 #, ivtmp.341
	addl	$4, %edx	 #, ivtmp.342
	cmpl	%ecx, %eax	 # tmp159, ivtmp.341
	jne	L32	 #,
	movl	-80(%ebp), %eax	 # %sfp, D.6394
	leal	0(,%eax,4), %ecx	 #, D.6397
	leal	-1(%eax), %edi	 #, D.3438
	leal	18(%ecx), %eax	 #, tmp162
	movl	%edi, -76(%ebp)	 # D.3438, %sfp
	shrl	$4, %eax	 #, tmp164
	sall	$4, %eax	 #, tmp166
	call	___chkstk_ms
	subl	%eax, %esp	 # tmp168,
	xorl	%eax, %eax	 # ivtmp.336
	leal	12(%esp), %edi	 #, tmp171
	movl	%edi, -100(%ebp)	 # tmp171, %sfp
	.p2align 4,,10
L33:
	movl	(%ebx,%eax), %edx	 # MEM[base: _73, index: ivtmp.336_106, offset: 0B], D.6394
	addl	%esi, %edx	 # clock, D.6394
	movl	%edx, (%edi,%eax)	 # D.6394, MEM[base: A.151_87, index: ivtmp.336_106, offset: 0B]
	addl	$4, %eax	 #, ivtmp.336
	cmpl	%eax, %ecx	 # ivtmp.336, D.6397
	jne	L33	 #,
L31:
	movl	-48(%ebp), %edx	 # seed.data, D.6398
	testl	%edx, %edx	 # D.6398
	je	L34	 #,
	movl	-32(%ebp), %ecx	 # seed.dim[0].lbound, D.6394
	movl	-76(%ebp), %edi	 # %sfp, D.3438
	movl	-28(%ebp), %eax	 # seed.dim[0].ubound, D.6394
	leal	(%edi,%ecx), %esi	 #, D.6394
	cmpl	%eax, %esi	 # D.6394, D.6394
	je	L35	 #,
	subl	%ecx, %eax	 # D.6394, D.6394
	movl	-80(%ebp), %esi	 # %sfp, D.6394
	movl	$1, -32(%ebp)	 #, seed.dim[0].lbound
	leal	1(%eax), %ecx	 #, tmp196
	sarl	$31, %eax	 #, tmp197
	movl	$1, -36(%ebp)	 #, seed.dim[0].stride
	notl	%eax	 # tmp197
	movl	$-1, -44(%ebp)	 #, seed.offset
	andl	%ecx, %eax	 # tmp196, D.6394
	movl	%esi, -28(%ebp)	 # D.6394, seed.dim[0].ubound
	cmpl	%eax, %esi	 # D.6394, D.6394
	je	L44	 #,
	movl	%esi, %eax	 # D.6394, D.6394
	sall	$2, %eax	 #, D.6394
	testl	%eax, %eax	 # D.6394
	je	L63	 #,
L37:
	movl	%edx, (%esp)	 # D.6398,
	movl	%eax, 4(%esp)	 # D.6394,
	call	_realloc	 #
	movl	%eax, -48(%ebp)	 # D.6398, seed.data
	movl	%eax, %edx	 # D.6398, D.6395
L44:
	movl	%edx, -84(%ebp)	 # D.6395, %sfp
	movl	$1, -92(%ebp)	 #, %sfp
	movl	$-1, -88(%ebp)	 #, %sfp
L35:
	cmpl	$-1, -76(%ebp)	 #, %sfp
	je	L41	 #,
	movl	-88(%ebp), %eax	 # %sfp, D.6394
	addl	-92(%ebp), %eax	 # %sfp, D.6394
	movl	-84(%ebp), %esi	 # %sfp, D.6393
	leal	(%esi,%eax,4), %eax	 #, D.6396
	movl	-76(%ebp), %esi	 # %sfp, D.3438
	leal	4(,%esi,4), %edx	 #, D.6397
	movl	%edx, 8(%esp)	 # D.6397,
	movl	-100(%ebp), %esi	 # %sfp, A.151
	movl	%eax, (%esp)	 # D.6396,
	movl	%esi, 4(%esp)	 # A.151,
	call	_memcpy	 #
L41:
	testl	%ebx, %ebx	 # D.6399
	je	L40	 #,
	movl	%ebx, (%esp)	 # D.6399,
	call	_free	 #
L40:
	movl	-96(%ebp), %esp	 # %sfp,
	leal	-48(%ebp), %eax	 #, tmp188
	movl	$0, 8(%esp)	 #,
	movl	%eax, 4(%esp)	 # tmp188,
	movl	$0, (%esp)	 #,
	call	__gfortran_random_seed_i4	 #
	movl	-48(%ebp), %eax	 # seed.data, D.6398
	testl	%eax, %eax	 # D.6398
	je	L23	 #,
	movl	%eax, (%esp)	 # D.6398,
	call	_free	 #
L23:
	leal	-12(%ebp), %esp	 #,
	popl	%ebx	 #
	.cfi_remember_state
	.cfi_restore 3
	popl	%esi	 #
	.cfi_restore 6
	popl	%edi	 #
	.cfi_restore 7
	popl	%ebp	 #
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
L63:
	.cfi_restore_state
	movl	$1, %eax	 #, D.6394
	jmp	L37	 #
L34:
	movl	-80(%ebp), %eax	 # %sfp, D.6394
	movl	$1, -32(%ebp)	 #, seed.dim[0].lbound
	movl	$1, -36(%ebp)	 #, seed.dim[0].stride
	movl	$-1, -44(%ebp)	 #, seed.offset
	movl	%eax, -28(%ebp)	 # D.6394, seed.dim[0].ubound
	sall	$2, %eax	 #, D.6394
	testl	%eax, %eax	 # D.6394
	jne	L43	 #,
	movl	$1, %eax	 #, D.6394
L43:
	movl	%eax, (%esp)	 # D.6394,
	call	_malloc	 #
	movl	$265, -40(%ebp)	 #, seed.dtype
	movl	%eax, -48(%ebp)	 # tmp190, seed.data
	movl	%eax, %edx	 # tmp190, D.6395
	jmp	L44	 #
L48:
	leal	-60(%ebp), %eax	 #, A.151
	movl	$-1, -76(%ebp)	 #, %sfp
	movl	$0, -80(%ebp)	 #, %sfp
	movl	%eax, -100(%ebp)	 # A.151, %sfp
	jmp	L31	 #
L29:
	movl	$LC12, (%esp)	 #,
	call	__gfortran_os_error	 #
L62:
	movl	$LC9, 8(%esp)	 #,
	movl	$LC10, 4(%esp)	 #,
	movl	$LC11, (%esp)	 #,
	call	__gfortran_runtime_error_at	 #
L61:
	movl	$LC8, (%esp)	 #,
	call	__gfortran_runtime_error	 #
L46:
	xorl	%eax, %eax	 # D.6392
	jmp	L24	 #
	.cfi_endproc
LFE3:
	.section	.text.unlikely,"x"
LCOLDE13:
	.text
LHOTE13:
	.section	.text.unlikely,"x"
LCOLDB15:
	.text
LHOTB15:
	.p2align 4,,15
	.globl	___utils_MOD_std
	.def	___utils_MOD_std;	.scl	2;	.type	32;	.endef
___utils_MOD_std:
LFB4:
	.cfi_startproc
	pushl	%ebp	 #
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp	 #,
	.cfi_def_cfa_register 5
	pushl	%edi	 #
	pushl	%esi	 #
	pushl	%ebx	 #
	subl	$44, %esp	 #,
	.cfi_offset 7, -12
	.cfi_offset 6, -16
	.cfi_offset 3, -20
	movl	8(%ebp), %eax	 # x, x
	movl	12(%eax), %ebx	 # *x_6(D).dim[0].stride, D.6438
	testl	%ebx, %ebx	 # D.6438
	jne	L65	 #,
	movl	$1, %ebx	 #, D.6438
L65:
	movl	20(%eax), %edi	 # *x_6(D).dim[0].ubound, *x_6(D).dim[0].ubound
	subl	16(%eax), %edi	 # *x_6(D).dim[0].lbound, D.3468
	movl	(%eax), %esi	 # *x_6(D).data, x.0
	leal	1(%edi), %edx	 #, D.6442
	movl	%esi, %ecx	 # x.0, x.0
	movl	%esi, -44(%ebp)	 # x.0, %sfp
	testl	%edx, %edx	 # D.6442
	jle	L66	 #,
	leal	0(,%ebx,8), %esi	 #, D.6441
	fldz
	xorl	%eax, %eax	 # ivtmp.357
	.p2align 4,,10
L67:
	addl	$1, %eax	 #, ivtmp.357
	faddl	(%ecx)	 # MEM[base: _78, offset: 0B]
	addl	%esi, %ecx	 # D.6441, ivtmp.360
	cmpl	%edx, %eax	 # D.6442, ivtmp.357
	jne	L67	 #,
	movl	%edx, %eax	 # D.6442, tmp135
	sarl	$31, %eax	 #, tmp135
	notl	%eax	 # tmp135
	andl	%edx, %eax	 # D.6442, D.6438
	testl	%edi, %edi	 # D.3468
	movl	%eax, -48(%ebp)	 # D.6438, %sfp
	fildl	-48(%ebp)	 # %sfp
	fdivr	%st, %st(1)	 #,
	js	L85	 #,
	jmp	L69	 #
L87:
	fstp	%st(2)	 #
	.p2align 4,,10
L69:
	leal	22(,%edx,8), %eax	 #, tmp146
	shrl	$4, %eax	 #, tmp148
	sall	$4, %eax	 #, tmp150
	call	___chkstk_ms
	movl	-44(%ebp), %edi	 # %sfp, ivtmp.353
	subl	%eax, %esp	 # tmp152,
	sall	$3, %ebx	 #, D.6441
	xorl	%eax, %eax	 # ivtmp.351
	leal	7(%esp), %esi	 #, tmp153
	andl	$-8, %esi	 #, tmp155
	movl	%esi, %ecx	 # tmp155, A.157
	.p2align 4,,10
L72:
	fld	%st(1)	 #
	fsubrl	(%edi)	 # MEM[base: _84, offset: 0B]
	addl	%ebx, %edi	 # D.6441, ivtmp.353
	fmul	%st(0), %st	 #,
	fstpl	(%esi,%eax,8)	 # MEM[base: A.157_69, index: ivtmp.351_57, step: 8, offset: 0B]
	addl	$1, %eax	 #, ivtmp.351
	cmpl	%edx, %eax	 # D.6442, ivtmp.351
	jne	L72	 #,
	fstp	%st(1)	 #
	testl	%eax, %eax	 # ivtmp.351
	jle	L86	 #,
L68:
	fldz
	xorl	%eax, %eax	 # ivtmp.346
	.p2align 4,,10
L73:
	faddl	(%ecx,%eax,8)	 # MEM[base: A.157_33, index: ivtmp.346_93, step: 8, offset: 0B]
	addl	$1, %eax	 #, ivtmp.346
	cmpl	%edx, %eax	 # D.6442, ivtmp.346
	jne	L73	 #,
L70:
	fdivp	%st, %st(1)	 #,
	leal	-12(%ebp), %esp	 #,
	popl	%ebx	 #
	.cfi_remember_state
	.cfi_restore 3
	popl	%esi	 #
	.cfi_restore 6
	popl	%edi	 #
	.cfi_restore 7
	popl	%ebp	 #
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	fsqrt
	ret
	.p2align 4,,10
L85:
	.cfi_restore_state
	fstp	%st(1)	 #
	leal	-32(%ebp), %ecx	 #, A.157
	jmp	L68	 #
L66:
	fldz
	testl	%edi, %edi	 # D.3468
	fld	%st(0)	 #
	flds	LC1	 #
	jns	L87	 #,
	fstp	%st(0)	 #
	fxch	%st(1)	 #
	jmp	L70	 #
	.p2align 4,,10
L86:
	fldz
	jmp	L70	 #
	.cfi_endproc
LFE4:
	.section	.text.unlikely,"x"
LCOLDE15:
	.text
LHOTE15:
	.section	.text.unlikely,"x"
LCOLDB16:
	.text
LHOTB16:
	.p2align 4,,15
	.globl	___utils_MOD_mean
	.def	___utils_MOD_mean;	.scl	2;	.type	32;	.endef
___utils_MOD_mean:
LFB5:
	.cfi_startproc
	pushl	%ebx	 #
	.cfi_def_cfa_offset 8
	.cfi_offset 3, -8
	subl	$8, %esp	 #,
	.cfi_def_cfa_offset 16
	movl	16(%esp), %edx	 # x, x
	movl	12(%edx), %ebx	 # *x_5(D).dim[0].stride, D.6454
	testl	%ebx, %ebx	 # D.6454
	jne	L89	 #,
	movl	$1, %ebx	 #, D.6454
L89:
	movl	20(%edx), %ecx	 # *x_5(D).dim[0].ubound, *x_5(D).dim[0].ubound
	subl	16(%edx), %ecx	 # *x_5(D).dim[0].lbound, D.6454
	movl	(%edx), %eax	 # *x_5(D).data, x.0
	addl	$1, %ecx	 #, ubound.26
	testl	%ecx, %ecx	 # ubound.26
	jle	L93	 #,
	fldz
	sall	$3, %ebx	 #, D.6458
	xorl	%edx, %edx	 # ivtmp.364
	.p2align 4,,10
L91:
	addl	$1, %edx	 #, ivtmp.364
	faddl	(%eax)	 # MEM[base: _27, offset: 0B]
	addl	%ebx, %eax	 # D.6458, ivtmp.367
	cmpl	%edx, %ecx	 # ivtmp.364, ubound.26
	jne	L91	 #,
L90:
	movl	%ecx, %eax	 # ubound.26, tmp112
	sarl	$31, %eax	 #, tmp112
	notl	%eax	 # tmp112
	andl	%eax, %ecx	 # tmp112, D.6454
	movl	%ecx, 4(%esp)	 # D.6454, %sfp
	fildl	4(%esp)	 # %sfp
	addl	$8, %esp	 #,
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	popl	%ebx	 #
	.cfi_restore 3
	.cfi_def_cfa_offset 4
	fdivrp	%st, %st(1)	 #,
	ret
L93:
	.cfi_restore_state
	fldz
	jmp	L90	 #
	.cfi_endproc
LFE5:
	.section	.text.unlikely,"x"
LCOLDE16:
	.text
LHOTE16:
	.section	.text.unlikely,"x"
LCOLDB17:
	.text
LHOTB17:
	.p2align 4,,15
	.globl	___utils_MOD_trace
	.def	___utils_MOD_trace;	.scl	2;	.type	32;	.endef
___utils_MOD_trace:
LFB6:
	.cfi_startproc
	pushl	%edi	 #
	.cfi_def_cfa_offset 8
	.cfi_offset 7, -8
	pushl	%esi	 #
	.cfi_def_cfa_offset 12
	.cfi_offset 6, -12
	pushl	%ebx	 #
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movl	16(%esp), %eax	 # a, a
	movl	12(%eax), %esi	 # *a_6(D).dim[0].stride, D.6481
	testl	%esi, %esi	 # D.6481
	je	L100	 #,
	movl	%esi, %edx	 # D.6481, D.6481
	negl	%edx	 # D.6481
L97:
	movl	20(%eax), %ecx	 # *a_6(D).dim[0].ubound, *a_6(D).dim[0].ubound
	subl	16(%eax), %ecx	 # *a_6(D).dim[0].lbound, D.6481
	movl	24(%eax), %ebx	 # *a_6(D).dim[1].stride, D.6481
	addl	$1, %ecx	 #, D.6481
	subl	%ebx, %edx	 # D.6481, D.6481
	movl	%ecx, %edi	 # D.6481, tmp121
	sarl	$31, %edi	 #, tmp121
	notl	%edi	 # tmp121
	andl	%edi, %ecx	 # tmp121, D.6481
	je	L101	 #,
	movl	(%eax), %eax	 # *a_6(D).data, *a_6(D).data
	addl	%ebx, %esi	 # D.6481, D.6481
	fldz
	addl	%esi, %edx	 # D.6481, D.6482
	leal	0(,%esi,8), %ebx	 #, D.6482
	addl	$1, %ecx	 #, D.6481
	leal	(%eax,%edx,8), %edx	 #, ivtmp.374
	movl	$1, %eax	 #, i
	.p2align 4,,10
L99:
	addl	$1, %eax	 #, i
	faddl	(%edx)	 # MEM[base: _31, offset: 0B]
	addl	%ebx, %edx	 # D.6482, ivtmp.374
	cmpl	%ecx, %eax	 # D.6481, i
	jne	L99	 #,
	popl	%ebx	 #
	.cfi_remember_state
	.cfi_restore 3
	.cfi_def_cfa_offset 12
	popl	%esi	 #
	.cfi_restore 6
	.cfi_def_cfa_offset 8
	popl	%edi	 #
	.cfi_restore 7
	.cfi_def_cfa_offset 4
	ret
	.p2align 4,,10
L100:
	.cfi_restore_state
	movl	$-1, %edx	 #, D.6481
	movl	$1, %esi	 #, D.6481
	jmp	L97	 #
	.p2align 4,,10
L101:
	popl	%ebx	 #
	.cfi_restore 3
	.cfi_def_cfa_offset 12
	fldz
	popl	%esi	 #
	.cfi_restore 6
	.cfi_def_cfa_offset 8
	popl	%edi	 #
	.cfi_restore 7
	.cfi_def_cfa_offset 4
	ret
	.cfi_endproc
LFE6:
	.section	.text.unlikely,"x"
LCOLDE17:
	.text
LHOTE17:
	.section .rdata,"dr"
LC18:
	.ascii "test.f90\0"
	.section	.text.unlikely,"x"
LCOLDB19:
	.text
LHOTB19:
	.p2align 4,,15
	.globl	___utils_MOD_stop_error
	.def	___utils_MOD_stop_error;	.scl	2;	.type	32;	.endef
___utils_MOD_stop_error:
LFB8:
	.cfi_startproc
	pushl	%ebx	 #
	.cfi_def_cfa_offset 8
	.cfi_offset 3, -8
	subl	$376, %esp	 #,
	.cfi_def_cfa_offset 384
	leal	16(%esp), %ebx	 #, tmp89
	movl	$LC18, 24(%esp)	 #, dt_parm.40.common.filename
	movl	$33, 28(%esp)	 #, dt_parm.40.common.line
	movl	$128, 16(%esp)	 #, dt_parm.40.common.flags
	movl	$6, 20(%esp)	 #, dt_parm.40.common.unit
	movl	%ebx, (%esp)	 # tmp89,
	call	__gfortran_st_write	 #
	movl	388(%esp), %eax	 # _msg, _msg
	movl	%ebx, (%esp)	 # tmp89,
	movl	%eax, 8(%esp)	 # _msg,
	movl	384(%esp), %eax	 # msg, msg
	movl	%eax, 4(%esp)	 # msg,
	call	__gfortran_transfer_character_write	 #
	movl	%ebx, (%esp)	 # tmp89,
	call	__gfortran_st_write_done	 #
	movl	$1, (%esp)	 #,
	call	__gfortran_stop_numeric_f08	 #
	.cfi_endproc
LFE8:
	.section	.text.unlikely,"x"
LCOLDE19:
	.text
LHOTE19:
	.section .rdata,"dr"
LC20:
	.ascii "Assert failed."
	.section	.text.unlikely,"x"
LCOLDB21:
	.text
LHOTB21:
	.p2align 4,,15
	.def	___utils_MOD_assert.part.0;	.scl	3;	.type	32;	.endef
___utils_MOD_assert.part.0:
LFB19:
	.cfi_startproc
	subl	$28, %esp	 #,
	.cfi_def_cfa_offset 32
	movl	$14, 4(%esp)	 #,
	movl	$LC20, (%esp)	 #,
	call	___utils_MOD_stop_error	 #
	.cfi_endproc
LFE19:
	.section	.text.unlikely,"x"
LCOLDE21:
	.text
LHOTE21:
	.section	.text.unlikely,"x"
LCOLDB22:
	.text
LHOTB22:
	.p2align 4,,15
	.globl	___utils_MOD_assert
	.def	___utils_MOD_assert;	.scl	2;	.type	32;	.endef
___utils_MOD_assert:
LFB7:
	.cfi_startproc
	subl	$28, %esp	 #,
	.cfi_def_cfa_offset 32
	movl	32(%esp), %eax	 # condition, condition
	movl	(%eax), %edx	 # *condition_2(D),
	testl	%edx, %edx	 #
	je	L111	 #,
	addl	$28, %esp	 #,
	.cfi_remember_state
	.cfi_def_cfa_offset 4
	ret
L111:
	.cfi_restore_state
	movl	%eax, (%esp)	 # condition,
	call	___utils_MOD_assert.part.0	 #
	.cfi_endproc
LFE7:
	.section	.text.unlikely,"x"
LCOLDE22:
	.text
LHOTE22:
	.section .rdata,"dr"
LC23:
	.ascii "c\0"
LC24:
	.ascii "At line 303 of file test.f90\0"
	.section	.text.unlikely,"x"
LCOLDB25:
	.text
LHOTB25:
	.p2align 4,,15
	.globl	___bench_MOD_randmatmul
	.def	___bench_MOD_randmatmul;	.scl	2;	.type	32;	.endef
___bench_MOD_randmatmul:
LFB9:
	.cfi_startproc
	pushl	%ebp	 #
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	pushl	%edi	 #
	.cfi_def_cfa_offset 12
	.cfi_offset 7, -12
	pushl	%esi	 #
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pushl	%ebx	 #
	.cfi_def_cfa_offset 20
	.cfi_offset 3, -20
	subl	$172, %esp	 #,
	.cfi_def_cfa_offset 192
	movl	192(%esp), %eax	 # n, n
	movl	196(%esp), %ebx	 # c, c
	movl	$0, 52(%esp)	 #, a.data
	movl	$0, 88(%esp)	 #, b.data
	movl	(%eax), %edi	 # *n_21(D), D.6517
	movl	%edi, %esi	 # D.6517, tmp148
	sarl	$31, %esi	 #, tmp148
	notl	%esi	 # tmp148
	andl	%edi, %esi	 # D.6517, D.6517
	je	L163	 #,
	movl	%esi, %ebp	 # D.6517, D.6516
	xorl	%eax, %eax	 # D.6517
	imull	%esi, %ebp	 # D.6517, D.6516
	cmpl	$536870911, %ebp	 #, D.6516
	setg	%al	 #, D.6517
	movl	%eax, %ecx	 # D.6517, D.6517
	movl	$2147483647, %eax	 #, tmp189
	cltd
	movl	%ecx, 44(%esp)	 # D.6517, %sfp
	idivl	%esi	 # D.6517
	xorl	%edx, %edx	 # D.6518
	cmpl	%eax, %esi	 # D.6517, D.6517
	movl	%esi, %eax	 # D.6517, D.6517
	setg	%dl	 #, D.6518
	notl	%eax	 # D.6517
	addl	%ecx, %edx	 # D.6517, D.6517
	movl	%eax, 40(%esp)	 # D.6517, %sfp
	xorl	%eax, %eax	 # D.6516
	testl	%edi, %edi	 # D.6517
	jle	L132	 #,
L133:
	leal	0(,%ebp,8), %eax	 #, D.6516
L132:
	testl	%edx, %edx	 # D.6517
	jne	L120	 #,
L115:
	testl	%eax, %eax	 # D.6516
	je	L164	 #,
L116:
	movl	%eax, (%esp)	 # D.6516,
	call	_malloc	 #
	testl	%eax, %eax	 # tmp150
	movl	%eax, 52(%esp)	 # tmp150, a.data
	je	L122	 #,
	movl	40(%esp), %eax	 # %sfp, D.6517
	testl	%esi, %esi	 # D.6517
	movl	$538, 60(%esp)	 #, a.dtype
	movl	$1, 68(%esp)	 #, a.dim[0].lbound
	movl	%edi, 72(%esp)	 # D.6517, a.dim[0].ubound
	movl	$1, 64(%esp)	 #, a.dim[0].stride
	movl	$1, 80(%esp)	 #, a.dim[1].lbound
	movl	%edi, 84(%esp)	 # D.6517, a.dim[1].ubound
	movl	%esi, 76(%esp)	 # D.6517, a.dim[1].stride
	movl	%eax, 56(%esp)	 # D.6517, a.offset
	je	L165	 #,
	movl	$2147483647, %eax	 #, tmp195
	cltd
	idivl	%esi	 # D.6517
	xorl	%edx, %edx	 # D.6517
	cmpl	%eax, %esi	 # D.6517, D.6517
	setg	%dl	 #, D.6517
L134:
	xorl	%eax, %eax	 # tmp205
	testl	%edi, %edi	 # D.6517
	leal	0(,%ebp,8), %ecx	 #, tmp204
	setle	%al	 #, tmp205
	subl	$1, %eax	 #, tmp205
	andl	%ecx, %eax	 # tmp204, D.6516
	addl	44(%esp), %edx	 # %sfp, tmp210
	jne	L120	 #,
	testl	%eax, %eax	 # D.6516
	je	L166	 #,
L121:
	movl	%eax, (%esp)	 # D.6516,
	call	_malloc	 #
	testl	%eax, %eax	 # tmp152
	movl	%eax, 88(%esp)	 # tmp152, b.data
	je	L122	 #,
	movl	40(%esp), %eax	 # %sfp, D.6517
	testl	%esi, %esi	 # D.6517
	movl	$538, 96(%esp)	 #, b.dtype
	movl	$1, 104(%esp)	 #, b.dim[0].lbound
	movl	%edi, 108(%esp)	 # D.6517, b.dim[0].ubound
	movl	$1, 100(%esp)	 #, b.dim[0].stride
	movl	$1, 116(%esp)	 #, b.dim[1].lbound
	movl	%edi, 120(%esp)	 # D.6517, b.dim[1].ubound
	movl	%esi, 112(%esp)	 # D.6517, b.dim[1].stride
	movl	%eax, 92(%esp)	 # D.6517, b.offset
	je	L167	 #,
	movl	$2147483647, %eax	 #, tmp200
	cltd
	idivl	%esi	 # D.6517
	xorl	%edx, %edx	 # D.6517
	cmpl	%eax, %esi	 # D.6517, D.6517
	setg	%dl	 #, D.6517
L135:
	sall	$3, %ebp	 #, tmp207
	xorl	%eax, %eax	 # tmp208
	testl	%edi, %edi	 # D.6517
	setle	%al	 #, tmp208
	subl	$1, %eax	 #, tmp208
	andl	%eax, %ebp	 # tmp208, D.6516
	movl	44(%esp), %eax	 # %sfp, tmp211
	addl	%edx, %eax	 # D.6517, tmp211
	jne	L120	 #,
	movl	(%ebx), %edx	 # *c_128(D).data,
	testl	%edx, %edx	 #
	jne	L168	 #,
	testl	%ebp, %ebp	 # D.6516
	je	L169	 #,
L126:
	movl	%ebp, (%esp)	 # D.6516,
	call	_malloc	 #
	testl	%eax, %eax	 # tmp154
	movl	%eax, (%ebx)	 # tmp154, *c_128(D).data
	je	L122	 #,
	movl	40(%esp), %eax	 # %sfp, D.6517
	movl	%esi, 24(%ebx)	 # D.6517, *c_128(D).dim[1].stride
	leal	52(%esp), %esi	 #, tmp155
	movl	%edi, 20(%ebx)	 # D.6517, *c_128(D).dim[0].ubound
	movl	%edi, 32(%ebx)	 # D.6517, *c_128(D).dim[1].ubound
	leal	88(%esp), %edi	 #, tmp156
	movl	$538, 8(%ebx)	 #, *c_128(D).dtype
	movl	$1, 16(%ebx)	 #, *c_128(D).dim[0].lbound
	movl	%eax, 4(%ebx)	 # D.6517, *c_128(D).offset
	movl	$1, 12(%ebx)	 #, *c_128(D).dim[0].stride
	movl	$1, 28(%ebx)	 #, *c_128(D).dim[1].lbound
	movl	%esi, (%esp)	 # tmp155,
	call	__gfortran_arandom_r8	 #
	movl	%edi, (%esp)	 # tmp156,
	call	__gfortran_arandom_r8	 #
	movl	4(%ebx), %eax	 # *c_128(D), *c_128(D)
	movl	$538, 8(%ebx)	 #, *c_128(D).dtype
	movl	$538, 132(%esp)	 #, D.3602
	movl	$0, 124(%esp)	 #, D.3602.data
	movl	%eax, 128(%esp)	 # *c_128(D), D.3602
	movl	12(%ebx), %eax	 # *c_128(D), *c_128(D)
	movl	%eax, 136(%esp)	 # *c_128(D), D.3602
	movl	16(%ebx), %eax	 # *c_128(D), *c_128(D)
	movl	%eax, 140(%esp)	 # *c_128(D), D.3602
	movl	20(%ebx), %eax	 # *c_128(D), *c_128(D)
	movl	%eax, 144(%esp)	 # *c_128(D), D.3602
	movl	24(%ebx), %eax	 # *c_128(D), *c_128(D)
	movl	%eax, 148(%esp)	 # *c_128(D), D.3602
	movl	28(%ebx), %eax	 # *c_128(D), *c_128(D)
	movl	%eax, 152(%esp)	 # *c_128(D), D.3602
	movl	32(%ebx), %eax	 # *c_128(D), *c_128(D)
	movl	$0, 20(%esp)	 #,
	movl	$0, 16(%esp)	 #,
	movl	$0, 12(%esp)	 #,
	movl	%edi, 8(%esp)	 # tmp156,
	movl	%eax, 156(%esp)	 # *c_128(D), D.3602
	leal	124(%esp), %eax	 #, tmp168
	movl	%esi, 4(%esp)	 # tmp155,
	movl	%eax, (%esp)	 # tmp168,
	call	__gfortran_matmul_r8	 #
	movl	(%ebx), %eax	 # *c_128(D).data, D.6519
	xorl	%ecx, %ecx	 # D.6518
	testl	%eax, %eax	 # D.6519
	sete	%cl	 #, D.6518
	movl	%ecx, 40(%esp)	 # D.6518, %sfp
	je	L127	 #,
	movl	%eax, (%esp)	 # D.6519,
	call	_free	 #
L127:
	movl	124(%esp), %eax	 # D.3602.data, D.3602.data
	movl	144(%esp), %esi	 # D.3602.dim[0].ubound, D.6517
	movl	28(%ebx), %edx	 # *c_128(D).dim[1].lbound, D.6517
	movl	156(%esp), %ecx	 # D.3602.dim[1].ubound, D.6517
	movl	%eax, (%ebx)	 # D.3602.data, *c_128(D).data
	movl	16(%ebx), %eax	 # *c_128(D).dim[0].lbound, D.6517
	movl	%eax, %edi	 # D.6517, D.6517
	subl	140(%esp), %edi	 # D.3602.dim[0].lbound, D.6517
	movl	%eax, 44(%esp)	 # D.6517, %sfp
	subl	20(%ebx), %edi	 # *c_128(D).dim[0].ubound, D.6517
	xorl	%eax, %eax	 # D.6518
	addl	%esi, %edi	 # D.6517, tmp212
	movl	%edx, %edi	 # D.6517, D.6517
	setne	%al	 #, D.6518
	subl	152(%esp), %edi	 # D.3602.dim[1].lbound, D.6517
	subl	32(%ebx), %edi	 # *c_128(D).dim[1].ubound, D.6517
	movl	%eax, %ebp	 # D.6518, D.6518
	xorl	%eax, %eax	 # D.6518
	addl	%ecx, %edi	 # D.6517, tmp213
	setne	%al	 #, D.6518
	movl	%eax, %edi	 # D.6518, D.6518
	orl	%edi, %ebp	 # D.6518, tmp214
	jne	L128	 #,
	movl	40(%esp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	jne	L128	 #,
	movl	44(%esp), %eax	 # %sfp, D.6517
	movl	$1, 12(%ebx)	 #, *c_128(D).dim[0].stride
	addl	%eax, %esi	 # D.6517, tmp203
	negl	%eax	 # D.6517
	movl	%esi, 20(%ebx)	 # tmp203, *c_128(D).dim[0].ubound
L136:
	addl	%edx, %ecx	 # D.6517, tmp182
	movl	%edx, 28(%ebx)	 # D.6517, *c_128(D).dim[1].lbound
	movl	%ecx, 32(%ebx)	 # tmp182, *c_128(D).dim[1].ubound
	movl	148(%esp), %ecx	 # D.3602.dim[1].stride, D.6517
	imull	%ecx, %edx	 # D.6517, D.6517
	movl	%ecx, 24(%ebx)	 # D.6517, *c_128(D).dim[1].stride
	subl	%edx, %eax	 # D.6517, tmp184
	movl	%eax, 4(%ebx)	 # tmp184, *c_128(D).offset
	movl	88(%esp), %eax	 # b.data, D.6519
	testl	%eax, %eax	 # D.6519
	je	L130	 #,
	movl	%eax, (%esp)	 # D.6519,
	call	_free	 #
L130:
	movl	52(%esp), %eax	 # a.data, D.6519
	movl	$0, 88(%esp)	 #, b.data
	testl	%eax, %eax	 # D.6519
	je	L112	 #,
	movl	%eax, (%esp)	 # D.6519,
	call	_free	 #
L112:
	addl	$172, %esp	 #,
	.cfi_remember_state
	.cfi_def_cfa_offset 20
	popl	%ebx	 #
	.cfi_restore 3
	.cfi_def_cfa_offset 16
	popl	%esi	 #
	.cfi_restore 6
	.cfi_def_cfa_offset 12
	popl	%edi	 #
	.cfi_restore 7
	.cfi_def_cfa_offset 8
	popl	%ebp	 #
	.cfi_restore 5
	.cfi_def_cfa_offset 4
	ret
	.p2align 4,,10
L164:
	.cfi_restore_state
	movl	$1, %eax	 #, D.6516
	jmp	L116	 #
	.p2align 4,,10
L166:
	movl	$1, %eax	 #, D.6516
	jmp	L121	 #
	.p2align 4,,10
L169:
	movl	$1, %ebp	 #, D.6516
	jmp	L126	 #
	.p2align 4,,10
L128:
	addl	$1, %esi	 #, tmp202
	movl	$1, 16(%ebx)	 #, *c_128(D).dim[0].lbound
	movl	$1, 12(%ebx)	 #, *c_128(D).dim[0].stride
	movl	%esi, 20(%ebx)	 # tmp202, *c_128(D).dim[0].ubound
	movl	$-1, %eax	 #, D.6517
	movl	$1, %edx	 #, D.6517
	jmp	L136	 #
L120:
	movl	$LC8, (%esp)	 #,
	call	__gfortran_runtime_error	 #
L122:
	movl	$LC12, (%esp)	 #,
	call	__gfortran_os_error	 #
L168:
	movl	$LC23, 8(%esp)	 #,
	movl	$LC10, 4(%esp)	 #,
	movl	$LC24, (%esp)	 #,
	call	__gfortran_runtime_error_at	 #
L167:
	xorl	%edx, %edx	 # D.6517
	jmp	L135	 #
L163:
	testl	%edi, %edi	 # D.6517
	movl	$0, 44(%esp)	 #, %sfp
	jle	L140	 #,
	xorl	%edx, %edx	 # D.6517
	movl	$-1, 40(%esp)	 #, %sfp
	xorl	%ebp, %ebp	 # D.6516
	jmp	L133	 #
L165:
	xorl	%edx, %edx	 # D.6517
	jmp	L134	 #
L140:
	movl	$-1, 40(%esp)	 #, %sfp
	xorl	%ebp, %ebp	 # D.6516
	xorl	%eax, %eax	 # D.6516
	jmp	L115	 #
	.cfi_endproc
LFE9:
	.section	.text.unlikely,"x"
LCOLDE25:
	.text
LHOTE25:
	.section	.text.unlikely,"x"
LCOLDB26:
	.text
LHOTB26:
	.p2align 4,,15
	.globl	___bench_MOD_randmatstat
	.def	___bench_MOD_randmatstat;	.scl	2;	.type	32;	.endef
___bench_MOD_randmatstat:
LFB10:
	.cfi_startproc
	pushl	%ebp	 #
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp	 #,
	.cfi_def_cfa_register 5
	pushl	%edi	 #
	pushl	%esi	 #
	pushl	%ebx	 #
	subl	$572, %esp	 #,
	.cfi_offset 7, -12
	.cfi_offset 6, -16
	.cfi_offset 3, -20
	movl	$0, -312(%ebp)	 #, b.data
	movl	$0, -276(%ebp)	 #, c.data
	movl	$0, -240(%ebp)	 #, d.data
	movl	$0, -204(%ebp)	 #, p.data
	movl	$0, -168(%ebp)	 #, q.data
	movl	$0, -396(%ebp)	 #, v.data
	movl	$0, -372(%ebp)	 #, w.data
	movl	$0, -132(%ebp)	 #, x.data
	movl	$200, (%esp)	 #,
	call	_malloc	 #
	testl	%eax, %eax	 # D.6712
	movl	%eax, -420(%ebp)	 # D.6712, %sfp
	movl	%eax, -348(%ebp)	 # D.6712, a.data
	je	L172	 #,
	movl	$538, -340(%ebp)	 #, a.dtype
	movl	$1, -332(%ebp)	 #, a.dim[0].lbound
	movl	$5, -328(%ebp)	 #, a.dim[0].ubound
	movl	$1, -336(%ebp)	 #, a.dim[0].stride
	movl	$1, -320(%ebp)	 #, a.dim[1].lbound
	movl	$5, -316(%ebp)	 #, a.dim[1].ubound
	movl	$5, -324(%ebp)	 #, a.dim[1].stride
	movl	$-6, -344(%ebp)	 #, a.offset
	movl	$200, (%esp)	 #,
	call	_malloc	 #
	testl	%eax, %eax	 # D.6712
	movl	%eax, -424(%ebp)	 # D.6712, %sfp
	movl	%eax, -312(%ebp)	 # D.6712, b.data
	je	L172	 #,
	movl	$538, -304(%ebp)	 #, b.dtype
	movl	$1, -296(%ebp)	 #, b.dim[0].lbound
	movl	$5, -292(%ebp)	 #, b.dim[0].ubound
	movl	$1, -300(%ebp)	 #, b.dim[0].stride
	movl	$1, -284(%ebp)	 #, b.dim[1].lbound
	movl	$5, -280(%ebp)	 #, b.dim[1].ubound
	movl	$5, -288(%ebp)	 #, b.dim[1].stride
	movl	$-6, -308(%ebp)	 #, b.offset
	movl	$200, (%esp)	 #,
	call	_malloc	 #
	testl	%eax, %eax	 # D.6712
	movl	%eax, -428(%ebp)	 # D.6712, %sfp
	movl	%eax, -276(%ebp)	 # D.6712, c.data
	je	L172	 #,
	movl	$538, -268(%ebp)	 #, c.dtype
	movl	$1, -260(%ebp)	 #, c.dim[0].lbound
	movl	$5, -256(%ebp)	 #, c.dim[0].ubound
	movl	$1, -264(%ebp)	 #, c.dim[0].stride
	movl	$1, -248(%ebp)	 #, c.dim[1].lbound
	movl	$5, -244(%ebp)	 #, c.dim[1].ubound
	movl	$5, -252(%ebp)	 #, c.dim[1].stride
	movl	$-6, -272(%ebp)	 #, c.offset
	movl	$200, (%esp)	 #,
	call	_malloc	 #
	testl	%eax, %eax	 # D.6712
	movl	%eax, -432(%ebp)	 # D.6712, %sfp
	movl	%eax, -240(%ebp)	 # D.6712, d.data
	je	L172	 #,
	movl	$538, -232(%ebp)	 #, d.dtype
	movl	$1, -224(%ebp)	 #, d.dim[0].lbound
	movl	$5, -220(%ebp)	 #, d.dim[0].ubound
	movl	$1, -228(%ebp)	 #, d.dim[0].stride
	movl	$1, -212(%ebp)	 #, d.dim[1].lbound
	movl	$5, -208(%ebp)	 #, d.dim[1].ubound
	movl	$5, -216(%ebp)	 #, d.dim[1].stride
	movl	$-6, -236(%ebp)	 #, d.offset
	movl	$800, (%esp)	 #,
	call	_malloc	 #
	testl	%eax, %eax	 # D.6712
	movl	%eax, -412(%ebp)	 # D.6712, %sfp
	movl	%eax, -204(%ebp)	 # D.6712, p.data
	je	L172	 #,
	movl	$538, -196(%ebp)	 #, p.dtype
	movl	$1, -188(%ebp)	 #, p.dim[0].lbound
	movl	$20, -184(%ebp)	 #, p.dim[0].ubound
	movl	$1, -192(%ebp)	 #, p.dim[0].stride
	movl	$1, -176(%ebp)	 #, p.dim[1].lbound
	movl	$5, -172(%ebp)	 #, p.dim[1].ubound
	movl	$20, -180(%ebp)	 #, p.dim[1].stride
	movl	$-21, -200(%ebp)	 #, p.offset
	movl	$800, (%esp)	 #,
	call	_malloc	 #
	testl	%eax, %eax	 # D.6712
	movl	%eax, -416(%ebp)	 # D.6712, %sfp
	movl	%eax, -168(%ebp)	 # D.6712, q.data
	je	L172	 #,
	movl	$538, -160(%ebp)	 #, q.dtype
	movl	$1, -152(%ebp)	 #, q.dim[0].lbound
	movl	$10, -148(%ebp)	 #, q.dim[0].ubound
	movl	$1, -156(%ebp)	 #, q.dim[0].stride
	movl	$1, -140(%ebp)	 #, q.dim[1].lbound
	movl	$10, -136(%ebp)	 #, q.dim[1].ubound
	movl	$10, -144(%ebp)	 #, q.dim[1].stride
	movl	$-11, -164(%ebp)	 #, q.offset
	movl	$800, (%esp)	 #,
	call	_malloc	 #
	testl	%eax, %eax	 # D.6712
	movl	%eax, %esi	 #, D.6712
	movl	%eax, -132(%ebp)	 # D.6712, x.data
	je	L172	 #,
	movl	8(%ebp), %eax	 # t, t
	movl	$538, -124(%ebp)	 #, x.dtype
	movl	$1, -116(%ebp)	 #, x.dim[0].lbound
	movl	$10, -112(%ebp)	 #, x.dim[0].ubound
	movl	$1, -120(%ebp)	 #, x.dim[0].stride
	movl	$1, -104(%ebp)	 #, x.dim[1].lbound
	movl	(%eax), %ebx	 # *t_252(D), D.6710
	movl	$10, -100(%ebp)	 #, x.dim[1].ubound
	movl	$10, -108(%ebp)	 #, x.dim[1].stride
	movl	$-11, -128(%ebp)	 #, x.offset
	movl	%ebx, %edx	 # D.6710, tmp739
	sarl	$31, %edx	 #, tmp739
	notl	%edx	 # tmp739
	andl	%ebx, %edx	 # D.6710, D.6710
	je	L173	 #,
	xorl	%eax, %eax	 # tmp1131
	testl	%ebx, %ebx	 # D.6710
	leal	0(,%edx,8), %edi	 #, tmp1130
	setle	%al	 #, tmp1131
	movl	%edx, %ecx	 # D.6710, D.6707
	subl	$1, %eax	 #, tmp1131
	andl	%edi, %eax	 # tmp1130, D.6707
	cmpl	$536870911, %edx	 #, D.6710
	jg	L178	 #,
L175:
	testl	%eax, %eax	 # D.6707
	jne	L176	 #,
	movl	$1, %eax	 #, D.6707
L176:
	movl	%ecx, -440(%ebp)	 # D.6707, %sfp
	movl	%edx, -436(%ebp)	 # D.6710, %sfp
	movl	%eax, (%esp)	 # D.6707,
	call	_malloc	 #
	testl	%eax, %eax	 # D.6712
	movl	%eax, %edi	 #, D.6712
	movl	%eax, -396(%ebp)	 # D.6712, v.data
	je	L172	 #,
	movl	-440(%ebp), %ecx	 # %sfp, D.6707
	xorl	%eax, %eax	 # tmp1134
	movl	-436(%ebp), %edx	 # %sfp, D.6710
	movl	$537, -388(%ebp)	 #, v.dtype
	movl	$1, -380(%ebp)	 #, v.dim[0].lbound
	movl	%ebx, -376(%ebp)	 # D.6710, v.dim[0].ubound
	movl	$1, -384(%ebp)	 #, v.dim[0].stride
	sall	$3, %ecx	 #, tmp1133
	testl	%ebx, %ebx	 # D.6710
	movl	$-1, -392(%ebp)	 #, v.offset
	setle	%al	 #, tmp1134
	subl	$1, %eax	 #, tmp1134
	andl	%ecx, %eax	 # tmp1133, D.6707
	cmpl	$536870911, %edx	 #, D.6710
	jg	L178	 #,
L339:
	testl	%eax, %eax	 # D.6707
	jne	L179	 #,
	movl	$1, %eax	 #, D.6707
L179:
	movl	%eax, (%esp)	 # D.6707,
	call	_malloc	 #
	testl	%eax, %eax	 # tmp743
	movl	%eax, -372(%ebp)	 # tmp743, w.data
	je	L172	 #,
	testl	%ebx, %ebx	 # D.6710
	movl	$537, -364(%ebp)	 #, w.dtype
	movl	$1, -356(%ebp)	 #, w.dim[0].lbound
	movl	%ebx, -352(%ebp)	 # D.6710, w.dim[0].ubound
	movl	$1, -360(%ebp)	 #, w.dim[0].stride
	movl	$-1, -368(%ebp)	 #, w.offset
	jle	L180	 #,
	leal	1(%ebx), %eax	 #, D.6710
	movl	%esi, -532(%ebp)	 # D.6712, %sfp
	movl	$10, -540(%ebp)	 #, %sfp
	movl	$1, -468(%ebp)	 #, %sfp
	movl	$10, -536(%ebp)	 #, %sfp
	movl	%eax, -544(%ebp)	 # D.6710, %sfp
	movl	$1, -480(%ebp)	 #, %sfp
	.p2align 4,,10
L317:
	leal	-348(%ebp), %eax	 #, tmp1243
	movl	%eax, (%esp)	 # tmp1243,
	call	___utils_MOD_randn	 #
	leal	-312(%ebp), %eax	 #, tmp1244
	movl	%eax, (%esp)	 # tmp1244,
	call	___utils_MOD_randn	 #
	leal	-276(%ebp), %eax	 #, tmp1245
	movl	%eax, (%esp)	 # tmp1245,
	call	___utils_MOD_randn	 #
	leal	-240(%ebp), %eax	 #, tmp1246
	movl	%eax, (%esp)	 # tmp1246,
	call	___utils_MOD_randn	 #
	movl	-348(%ebp), %eax	 # a.data, D.6708
	movl	-316(%ebp), %edx	 # a.dim[1].ubound, D.6710
	movl	%eax, -500(%ebp)	 # D.6708, %sfp
	movl	-344(%ebp), %eax	 # a.offset, D.6710
	movl	%edx, -452(%ebp)	 # D.6710, %sfp
	movl	%eax, -504(%ebp)	 # D.6710, %sfp
	movl	-332(%ebp), %eax	 # a.dim[0].lbound, D.6710
	movl	%eax, -420(%ebp)	 # D.6710, %sfp
	movl	-328(%ebp), %eax	 # a.dim[0].ubound, D.6710
	movl	%eax, -424(%ebp)	 # D.6710, %sfp
	movl	-320(%ebp), %eax	 # a.dim[1].lbound, D.6710
	cmpl	%edx, %eax	 # D.6710, D.6710
	movl	%eax, -484(%ebp)	 # D.6710, %sfp
	jg	L185	 #,
	movl	%eax, %ecx	 # D.6710, D.6710
	movl	-324(%ebp), %eax	 # a.dim[1].stride, D.6710
	movl	-412(%ebp), %edi	 # %sfp, ivtmp.500
	movl	%ecx, %ebx	 # D.6710, ivtmp.499
	leal	0(,%eax,8), %edx	 #, D.6709
	imull	%ecx, %eax	 # D.6710, D.6710
	addl	-504(%ebp), %eax	 # %sfp, D.6710
	movl	-420(%ebp), %ecx	 # %sfp, D.6710
	movl	%edx, -428(%ebp)	 # D.6709, %sfp
	movl	-500(%ebp), %edx	 # %sfp, D.6708
	addl	%ecx, %eax	 # D.6710, D.6710
	leal	(%edx,%eax,8), %esi	 #, ivtmp.502
	movl	-424(%ebp), %eax	 # %sfp, D.6709
	subl	%ecx, %eax	 # D.6710, D.6709
	leal	8(,%eax,8), %eax	 #, D.6709
	movl	%eax, -432(%ebp)	 # D.6709, %sfp
	movl	%esi, %eax	 # ivtmp.502, ivtmp.502
	movl	%edi, %esi	 # ivtmp.500, ivtmp.500
	movl	%eax, %edi	 # ivtmp.502, ivtmp.502
	.p2align 4,,10
L186:
	movl	-424(%ebp), %edx	 # %sfp, D.6710
	cmpl	%edx, -420(%ebp)	 # D.6710, %sfp
	jg	L187	 #,
	movl	-432(%ebp), %eax	 # %sfp, D.6709
	movl	%edi, 4(%esp)	 # ivtmp.502,
	movl	%esi, (%esp)	 # ivtmp.500,
	movl	%eax, 8(%esp)	 # D.6709,
	call	_memcpy	 #
L187:
	addl	$1, %ebx	 #, ivtmp.499
	addl	$160, %esi	 #, ivtmp.500
	addl	-428(%ebp), %edi	 # %sfp, ivtmp.502
	cmpl	%ebx, -452(%ebp)	 # ivtmp.499, %sfp
	jge	L186	 #,
L185:
	movl	-312(%ebp), %eax	 # b.data, D.6708
	movl	-280(%ebp), %edx	 # b.dim[1].ubound, D.6710
	movl	%eax, -508(%ebp)	 # D.6708, %sfp
	movl	-308(%ebp), %eax	 # b.offset, D.6710
	movl	%edx, -456(%ebp)	 # D.6710, %sfp
	movl	%eax, -512(%ebp)	 # D.6710, %sfp
	movl	-296(%ebp), %eax	 # b.dim[0].lbound, D.6710
	movl	%eax, -428(%ebp)	 # D.6710, %sfp
	movl	-292(%ebp), %eax	 # b.dim[0].ubound, D.6710
	movl	%eax, -432(%ebp)	 # D.6710, %sfp
	movl	-284(%ebp), %eax	 # b.dim[1].lbound, D.6710
	cmpl	%edx, %eax	 # D.6710, D.6710
	movl	%eax, -488(%ebp)	 # D.6710, %sfp
	jg	L182	 #,
	movl	%eax, %ecx	 # D.6710, D.6710
	movl	-288(%ebp), %eax	 # b.dim[1].stride, D.6710
	xorl	%esi, %esi	 # ivtmp.494
	movl	%ecx, %ebx	 # D.6710, ivtmp.493
	leal	0(,%eax,8), %edx	 #, D.6709
	imull	%ecx, %eax	 # D.6710, D.6710
	addl	-512(%ebp), %eax	 # %sfp, D.6710
	movl	-508(%ebp), %ecx	 # %sfp, D.6708
	movl	%edx, -436(%ebp)	 # D.6709, %sfp
	movl	-428(%ebp), %edx	 # %sfp, D.6710
	addl	%edx, %eax	 # D.6710, D.6710
	leal	(%ecx,%eax,8), %edi	 #, ivtmp.495
	movl	-432(%ebp), %eax	 # %sfp, D.6709
	subl	%edx, %eax	 # D.6710, D.6709
	leal	8(,%eax,8), %eax	 #, D.6709
	movl	%eax, -440(%ebp)	 # D.6709, %sfp
	.p2align 4,,10
L191:
	movl	-432(%ebp), %edx	 # %sfp, D.6710
	cmpl	%edx, -428(%ebp)	 # D.6710, %sfp
	jg	L192	 #,
	movl	-412(%ebp), %eax	 # %sfp, D.6712
	movl	-440(%ebp), %ecx	 # %sfp, D.6709
	movl	%edi, 4(%esp)	 # ivtmp.495,
	leal	40(%eax,%esi), %eax	 #, D.6712
	movl	%ecx, 8(%esp)	 # D.6709,
	movl	%eax, (%esp)	 # D.6712,
	call	_memcpy	 #
L192:
	addl	$1, %ebx	 #, ivtmp.493
	addl	$160, %esi	 #, ivtmp.494
	addl	-436(%ebp), %edi	 # %sfp, ivtmp.495
	cmpl	%ebx, -456(%ebp)	 # ivtmp.493, %sfp
	jge	L191	 #,
L182:
	movl	-276(%ebp), %eax	 # c.data, D.6708
	movl	-244(%ebp), %edx	 # c.dim[1].ubound, D.6710
	movl	%eax, -516(%ebp)	 # D.6708, %sfp
	movl	-272(%ebp), %eax	 # c.offset, D.6710
	movl	%edx, -460(%ebp)	 # D.6710, %sfp
	movl	%eax, -520(%ebp)	 # D.6710, %sfp
	movl	-260(%ebp), %eax	 # c.dim[0].lbound, D.6710
	movl	%eax, -436(%ebp)	 # D.6710, %sfp
	movl	-256(%ebp), %eax	 # c.dim[0].ubound, D.6710
	movl	%eax, -440(%ebp)	 # D.6710, %sfp
	movl	-248(%ebp), %eax	 # c.dim[1].lbound, D.6710
	cmpl	%edx, %eax	 # D.6710, D.6710
	movl	%eax, -492(%ebp)	 # D.6710, %sfp
	jg	L188	 #,
	movl	%eax, %edx	 # D.6710, D.6710
	movl	-252(%ebp), %eax	 # c.dim[1].stride, D.6710
	xorl	%esi, %esi	 # ivtmp.488
	movl	%edx, %ebx	 # D.6710, ivtmp.487
	leal	0(,%eax,8), %ecx	 #, D.6709
	imull	%edx, %eax	 # D.6710, D.6710
	addl	-520(%ebp), %eax	 # %sfp, D.6710
	movl	-516(%ebp), %edx	 # %sfp, D.6708
	movl	%ecx, -444(%ebp)	 # D.6709, %sfp
	movl	-436(%ebp), %ecx	 # %sfp, D.6710
	addl	%ecx, %eax	 # D.6710, D.6710
	leal	(%edx,%eax,8), %edi	 #, ivtmp.489
	movl	-440(%ebp), %eax	 # %sfp, D.6709
	subl	%ecx, %eax	 # D.6710, D.6709
	leal	8(,%eax,8), %eax	 #, D.6709
	movl	%eax, -448(%ebp)	 # D.6709, %sfp
	.p2align 4,,10
L196:
	movl	-440(%ebp), %ecx	 # %sfp, D.6710
	cmpl	%ecx, -436(%ebp)	 # D.6710, %sfp
	jg	L197	 #,
	movl	-412(%ebp), %eax	 # %sfp, D.6712
	movl	-448(%ebp), %edx	 # %sfp, D.6709
	movl	%edi, 4(%esp)	 # ivtmp.489,
	leal	80(%eax,%esi), %eax	 #, D.6712
	movl	%edx, 8(%esp)	 # D.6709,
	movl	%eax, (%esp)	 # D.6712,
	call	_memcpy	 #
L197:
	addl	$1, %ebx	 #, ivtmp.487
	addl	$160, %esi	 #, ivtmp.488
	addl	-444(%ebp), %edi	 # %sfp, ivtmp.489
	cmpl	%ebx, -460(%ebp)	 # ivtmp.487, %sfp
	jge	L196	 #,
L188:
	movl	-240(%ebp), %eax	 # d.data, D.6708
	movl	-208(%ebp), %ecx	 # d.dim[1].ubound, D.6710
	movl	%eax, -524(%ebp)	 # D.6708, %sfp
	movl	-236(%ebp), %eax	 # d.offset, D.6710
	movl	%ecx, -464(%ebp)	 # D.6710, %sfp
	movl	%eax, -528(%ebp)	 # D.6710, %sfp
	movl	-224(%ebp), %eax	 # d.dim[0].lbound, D.6710
	movl	%eax, -444(%ebp)	 # D.6710, %sfp
	movl	-220(%ebp), %eax	 # d.dim[0].ubound, D.6710
	movl	%eax, -448(%ebp)	 # D.6710, %sfp
	movl	-212(%ebp), %eax	 # d.dim[1].lbound, D.6710
	cmpl	%ecx, %eax	 # D.6710, D.6710
	movl	%eax, -496(%ebp)	 # D.6710, %sfp
	jg	L193	 #,
	movl	%eax, %edx	 # D.6710, D.6710
	movl	-216(%ebp), %eax	 # d.dim[1].stride, D.6710
	xorl	%esi, %esi	 # ivtmp.482
	movl	%edx, %ebx	 # D.6710, ivtmp.481
	leal	0(,%eax,8), %ecx	 #, D.6709
	imull	%edx, %eax	 # D.6710, D.6710
	addl	-528(%ebp), %eax	 # %sfp, D.6710
	movl	-444(%ebp), %edx	 # %sfp, D.6710
	movl	%ecx, -472(%ebp)	 # D.6709, %sfp
	movl	-524(%ebp), %ecx	 # %sfp, D.6708
	addl	%edx, %eax	 # D.6710, D.6710
	leal	(%ecx,%eax,8), %edi	 #, ivtmp.483
	movl	-448(%ebp), %eax	 # %sfp, D.6709
	subl	%edx, %eax	 # D.6710, D.6709
	leal	8(,%eax,8), %eax	 #, D.6709
	movl	%eax, -476(%ebp)	 # D.6709, %sfp
	.p2align 4,,10
L201:
	movl	-448(%ebp), %edx	 # %sfp, D.6710
	cmpl	%edx, -444(%ebp)	 # D.6710, %sfp
	jg	L202	 #,
	movl	-412(%ebp), %eax	 # %sfp, D.6712
	movl	-476(%ebp), %ecx	 # %sfp, D.6709
	movl	%edi, 4(%esp)	 # ivtmp.483,
	leal	120(%eax,%esi), %eax	 #, D.6712
	movl	%ecx, 8(%esp)	 # D.6709,
	movl	%eax, (%esp)	 # D.6712,
	call	_memcpy	 #
L202:
	addl	$1, %ebx	 #, ivtmp.481
	addl	$160, %esi	 #, ivtmp.482
	addl	-472(%ebp), %edi	 # %sfp, ivtmp.483
	cmpl	%ebx, -464(%ebp)	 # ivtmp.481, %sfp
	jge	L201	 #,
L193:
	movl	-452(%ebp), %ecx	 # %sfp, D.6710
	cmpl	%ecx, -484(%ebp)	 # D.6710, %sfp
	jg	L198	 #,
	movl	-324(%ebp), %eax	 # a.dim[1].stride, D.6710
	movl	-484(%ebp), %ebx	 # %sfp, ivtmp.474
	movl	-420(%ebp), %ecx	 # %sfp, D.6710
	movl	-416(%ebp), %edi	 # %sfp, ivtmp.475
	leal	0(,%eax,8), %edx	 #, D.6709
	imull	%ebx, %eax	 # ivtmp.474, D.6710
	addl	-504(%ebp), %eax	 # %sfp, D.6710
	movl	%edx, -472(%ebp)	 # D.6709, %sfp
	movl	-500(%ebp), %edx	 # %sfp, D.6708
	addl	%ecx, %eax	 # D.6710, D.6710
	leal	(%edx,%eax,8), %esi	 #, ivtmp.477
	movl	-424(%ebp), %eax	 # %sfp, D.6709
	subl	%ecx, %eax	 # D.6710, D.6709
	leal	8(,%eax,8), %eax	 #, D.6709
	movl	%eax, -476(%ebp)	 # D.6709, %sfp
	movl	%esi, %eax	 # ivtmp.477, ivtmp.477
	movl	%edi, %esi	 # ivtmp.475, ivtmp.475
	movl	%eax, %edi	 # ivtmp.477, ivtmp.477
	.p2align 4,,10
L207:
	movl	-424(%ebp), %ecx	 # %sfp, D.6710
	cmpl	%ecx, -420(%ebp)	 # D.6710, %sfp
	jg	L208	 #,
	movl	-476(%ebp), %eax	 # %sfp, D.6709
	movl	%edi, 4(%esp)	 # ivtmp.477,
	movl	%esi, (%esp)	 # ivtmp.475,
	movl	%eax, 8(%esp)	 # D.6709,
	call	_memcpy	 #
L208:
	addl	$1, %ebx	 #, ivtmp.474
	addl	$80, %esi	 #, ivtmp.475
	addl	-472(%ebp), %edi	 # %sfp, ivtmp.477
	cmpl	%ebx, -452(%ebp)	 # ivtmp.474, %sfp
	jge	L207	 #,
L198:
	movl	-456(%ebp), %edx	 # %sfp, D.6710
	cmpl	%edx, -488(%ebp)	 # D.6710, %sfp
	jg	L210	 #,
	movl	-288(%ebp), %eax	 # b.dim[1].stride, D.6710
	movl	-488(%ebp), %ebx	 # %sfp, ivtmp.468
	xorl	%esi, %esi	 # ivtmp.469
	movl	-428(%ebp), %edx	 # %sfp, D.6710
	leal	0(,%eax,8), %ecx	 #, D.6709
	imull	%ebx, %eax	 # ivtmp.468, D.6710
	addl	-512(%ebp), %eax	 # %sfp, D.6710
	movl	%ecx, -420(%ebp)	 # D.6709, %sfp
	movl	-508(%ebp), %ecx	 # %sfp, D.6708
	addl	%edx, %eax	 # D.6710, D.6710
	leal	(%ecx,%eax,8), %edi	 #, ivtmp.470
	movl	-432(%ebp), %eax	 # %sfp, D.6709
	subl	%edx, %eax	 # D.6710, D.6709
	leal	8(,%eax,8), %eax	 #, D.6709
	movl	%eax, -424(%ebp)	 # D.6709, %sfp
	.p2align 4,,10
L211:
	movl	-432(%ebp), %edx	 # %sfp, D.6710
	cmpl	%edx, -428(%ebp)	 # D.6710, %sfp
	jg	L212	 #,
	movl	-416(%ebp), %eax	 # %sfp, D.6712
	movl	-424(%ebp), %edx	 # %sfp, D.6709
	movl	%edi, 4(%esp)	 # ivtmp.470,
	leal	40(%eax,%esi), %eax	 #, D.6712
	movl	%edx, 8(%esp)	 # D.6709,
	movl	%eax, (%esp)	 # D.6712,
	call	_memcpy	 #
L212:
	addl	$1, %ebx	 #, ivtmp.468
	addl	$80, %esi	 #, ivtmp.469
	addl	-420(%ebp), %edi	 # %sfp, ivtmp.470
	cmpl	%ebx, -456(%ebp)	 # ivtmp.468, %sfp
	jge	L211	 #,
L210:
	movl	-460(%ebp), %ecx	 # %sfp, D.6710
	cmpl	%ecx, -492(%ebp)	 # D.6710, %sfp
	jg	L204	 #,
	movl	-252(%ebp), %eax	 # c.dim[1].stride, D.6710
	movl	-492(%ebp), %ebx	 # %sfp, ivtmp.462
	xorl	%esi, %esi	 # ivtmp.463
	movl	-516(%ebp), %edx	 # %sfp, D.6708
	leal	0(,%eax,8), %ecx	 #, D.6709
	imull	%ebx, %eax	 # ivtmp.462, D.6710
	addl	-520(%ebp), %eax	 # %sfp, D.6710
	movl	%ecx, -420(%ebp)	 # D.6709, %sfp
	movl	-436(%ebp), %ecx	 # %sfp, D.6710
	addl	%ecx, %eax	 # D.6710, D.6710
	leal	(%edx,%eax,8), %edi	 #, ivtmp.464
	movl	-440(%ebp), %eax	 # %sfp, D.6709
	subl	%ecx, %eax	 # D.6710, D.6709
	leal	8(,%eax,8), %eax	 #, D.6709
	movl	%eax, -424(%ebp)	 # D.6709, %sfp
	.p2align 4,,10
L216:
	movl	-440(%ebp), %ecx	 # %sfp, D.6710
	cmpl	%ecx, -436(%ebp)	 # D.6710, %sfp
	jg	L217	 #,
	movl	-416(%ebp), %eax	 # %sfp, D.6712
	movl	-424(%ebp), %ecx	 # %sfp, D.6709
	movl	%edi, 4(%esp)	 # ivtmp.464,
	leal	400(%eax,%esi), %eax	 #, D.6712
	movl	%ecx, 8(%esp)	 # D.6709,
	movl	%eax, (%esp)	 # D.6712,
	call	_memcpy	 #
L217:
	addl	$1, %ebx	 #, ivtmp.462
	addl	$80, %esi	 #, ivtmp.463
	addl	-420(%ebp), %edi	 # %sfp, ivtmp.464
	cmpl	%ebx, -460(%ebp)	 # ivtmp.462, %sfp
	jge	L216	 #,
L204:
	movl	-464(%ebp), %edx	 # %sfp, D.6710
	cmpl	%edx, -496(%ebp)	 # D.6710, %sfp
	jg	L213	 #,
	movl	-216(%ebp), %eax	 # d.dim[1].stride, D.6710
	movl	-496(%ebp), %ebx	 # %sfp, ivtmp.456
	xorl	%esi, %esi	 # ivtmp.457
	movl	-444(%ebp), %edx	 # %sfp, D.6710
	leal	0(,%eax,8), %ecx	 #, D.6709
	imull	%ebx, %eax	 # ivtmp.456, D.6710
	addl	-528(%ebp), %eax	 # %sfp, D.6710
	movl	%ecx, -420(%ebp)	 # D.6709, %sfp
	movl	-524(%ebp), %ecx	 # %sfp, D.6708
	addl	%edx, %eax	 # D.6710, D.6710
	leal	(%ecx,%eax,8), %edi	 #, ivtmp.458
	movl	-448(%ebp), %eax	 # %sfp, D.6709
	subl	%edx, %eax	 # D.6710, D.6709
	leal	8(,%eax,8), %eax	 #, D.6709
	movl	%eax, -424(%ebp)	 # D.6709, %sfp
	.p2align 4,,10
L221:
	movl	-448(%ebp), %edx	 # %sfp, D.6710
	cmpl	%edx, -444(%ebp)	 # D.6710, %sfp
	jg	L222	 #,
	movl	-416(%ebp), %eax	 # %sfp, D.6712
	movl	-424(%ebp), %edx	 # %sfp, D.6709
	movl	%edi, 4(%esp)	 # ivtmp.458,
	leal	440(%eax,%esi), %eax	 #, D.6712
	movl	%edx, 8(%esp)	 # D.6709,
	movl	%eax, (%esp)	 # D.6712,
	call	_memcpy	 #
L222:
	addl	$1, %ebx	 #, ivtmp.456
	addl	$80, %esi	 #, ivtmp.457
	addl	-420(%ebp), %edi	 # %sfp, ivtmp.458
	cmpl	%ebx, -464(%ebp)	 # ivtmp.456, %sfp
	jge	L221	 #,
L213:
	movl	-128(%ebp), %eax	 # x, x
	movl	$538, -124(%ebp)	 #, x.dtype
	xorl	%ebx, %ebx	 # D.6714
	movl	$538, -88(%ebp)	 #, D.3898
	movl	$0, -96(%ebp)	 #, D.3898.data
	movl	$538, -52(%ebp)	 #, parm.81.dtype
	movl	$1, -32(%ebp)	 #, parm.81.dim[1].lbound
	movl	%eax, -92(%ebp)	 # x, D.3898
	movl	-120(%ebp), %eax	 # x, x
	movl	$20, -28(%ebp)	 #, parm.81.dim[1].ubound
	movl	$1, -36(%ebp)	 #, parm.81.dim[1].stride
	movl	$1, -44(%ebp)	 #, parm.81.dim[0].lbound
	movl	$5, -40(%ebp)	 #, parm.81.dim[0].ubound
	movl	%eax, -84(%ebp)	 # x, D.3898
	movl	-116(%ebp), %eax	 # x, x
	movl	$20, -48(%ebp)	 #, parm.81.dim[0].stride
	movl	$0, -56(%ebp)	 #, parm.81.offset
	movl	%eax, -80(%ebp)	 # x, D.3898
	movl	-112(%ebp), %eax	 # x, x
	movl	%eax, -76(%ebp)	 # x, D.3898
	movl	-108(%ebp), %eax	 # x, x
	movl	%eax, -72(%ebp)	 # x, D.3898
	movl	-104(%ebp), %eax	 # x, x
	movl	%eax, -68(%ebp)	 # x, D.3898
	movl	-100(%ebp), %eax	 # x, x
	movl	%eax, -64(%ebp)	 # x, D.3898
	movl	-412(%ebp), %eax	 # %sfp, D.6712
	movl	%eax, -60(%ebp)	 # D.6712, parm.81.data
	leal	-204(%ebp), %eax	 #, tmp1381
	movl	$0, 20(%esp)	 #,
	movl	$0, 16(%esp)	 #,
	movl	$0, 12(%esp)	 #,
	movl	%eax, 8(%esp)	 # tmp1381,
	leal	-60(%ebp), %eax	 #, tmp1382
	movl	%eax, 4(%esp)	 # tmp1382,
	leal	-96(%ebp), %eax	 #, tmp1383
	movl	%eax, (%esp)	 # tmp1383,
	call	__gfortran_matmul_r8	 #
	movl	-532(%ebp), %eax	 # %sfp, D.6711
	testl	%eax, %eax	 # D.6711
	sete	%bl	 #, D.6714
	je	L219	 #,
	movl	%eax, (%esp)	 # D.6711,
	call	_free	 #
L219:
	movl	-96(%ebp), %eax	 # D.3898.data, D.6712
	movl	%eax, -440(%ebp)	 # D.6712, %sfp
	movl	%eax, -132(%ebp)	 # D.6712, x.data
	movl	-76(%ebp), %eax	 # D.3898.dim[0].ubound, D.6710
	movl	%eax, %ecx	 # D.6710, D.6710
	movl	%eax, -452(%ebp)	 # D.6710, %sfp
	movl	-64(%ebp), %eax	 # D.3898.dim[1].ubound, D.6710
	movl	%eax, %edx	 # D.6710, D.6710
	movl	%eax, -460(%ebp)	 # D.6710, %sfp
	movl	$1, %eax	 #, tmp862
	subl	-80(%ebp), %eax	 # D.3898.dim[0].lbound, D.6710
	subl	-536(%ebp), %eax	 # %sfp, D.6710
	addl	%ecx, %eax	 # D.6710, tmp1223
	setne	%al	 #, D.6714
	movzbl	%al, %eax	 # D.6714, D.6714
	orl	%ebx, %eax	 # D.6714, tmp1224
	jne	L223	 #,
	movl	-468(%ebp), %eax	 # %sfp, D.6710
	subl	-68(%ebp), %eax	 # D.3898.dim[1].lbound, D.6710
	subl	-540(%ebp), %eax	 # %sfp, D.6710
	addl	%edx, %eax	 # D.6710, tmp1225
	jne	L223	 #,
	movl	-452(%ebp), %eax	 # %sfp, D.6710
	movl	$1, -120(%ebp)	 #, x.dim[0].stride
	addl	$1, %eax	 #, D.6710
	movl	%eax, -472(%ebp)	 # D.6710, %sfp
	movl	%eax, -112(%ebp)	 # D.6710, x.dim[0].ubound
L331:
	movl	-468(%ebp), %edi	 # %sfp, D.6710
	movl	-72(%ebp), %eax	 # D.3898.dim[1].stride, D.6710
	movl	-460(%ebp), %ecx	 # %sfp, D.6710
	movl	%esp, -456(%ebp)	 #, %sfp
	movl	$538, -52(%ebp)	 #, atmp.82.dtype
	movl	$0, -60(%ebp)	 #, atmp.82.data
	movl	%eax, -108(%ebp)	 # D.6710, x.dim[1].stride
	movl	%edi, -104(%ebp)	 # D.6710, x.dim[1].lbound
	imull	%edi, %eax	 # D.6710, D.6710
	addl	%edi, %ecx	 # D.6710, D.6710
	movl	$0, -56(%ebp)	 #, atmp.82.offset
	movl	%ecx, -488(%ebp)	 # D.6710, %sfp
	movl	%ecx, -100(%ebp)	 # D.6710, x.dim[1].ubound
	notl	%eax	 # D.6710
	movl	%eax, -444(%ebp)	 # D.6710, %sfp
	movl	%eax, -128(%ebp)	 # D.6710, x.offset
	leal	-132(%ebp), %eax	 #, tmp1419
	movl	$0, 20(%esp)	 #,
	movl	$0, 16(%esp)	 #,
	movl	%eax, 8(%esp)	 # tmp1419,
	movl	%eax, 4(%esp)	 # tmp1420,
	leal	-60(%ebp), %eax	 #, tmp1421
	movl	$0, 12(%esp)	 #,
	movl	%eax, (%esp)	 # tmp1421,
	call	__gfortran_matmul_r8	 #
	movl	-40(%ebp), %eax	 # atmp.82.dim[0].ubound, atmp.82.dim[0].ubound
	subl	-44(%ebp), %eax	 # atmp.82.dim[0].lbound, D.6710
	movl	%eax, %edi	 # D.6710, D.6710
	movl	-28(%ebp), %eax	 # atmp.82.dim[1].ubound, atmp.82.dim[1].ubound
	subl	-32(%ebp), %eax	 # atmp.82.dim[1].lbound, D.6710
	leal	1(%edi), %ecx	 #, D.6709
	movl	%ecx, -436(%ebp)	 # D.6709, %sfp
	leal	1(%eax), %edx	 #, D.6710
	movl	%eax, -424(%ebp)	 # D.6710, %sfp
	imull	%edx, %ecx	 # D.6710, D.6710
	testl	%edi, %edi	 # D.6710
	movl	%edx, -476(%ebp)	 # D.6710, %sfp
	movl	%ecx, -484(%ebp)	 # D.6710, %sfp
	js	L225	 #,
	testl	%eax, %eax	 # D.6710
	js	L225	 #,
	leal	22(,%ecx,8), %eax	 #, tmp887
	shrl	$4, %eax	 #, tmp889
	sall	$4, %eax	 #, tmp891
	call	___chkstk_ms
	subl	%eax, %esp	 # tmp893,
	leal	31(%esp), %ecx	 #, tmp894
	andl	$-8, %ecx	 #, A.230
	movl	%ecx, -448(%ebp)	 # A.230, %sfp
L226:
	movl	-436(%ebp), %edx	 # %sfp, D.6709
	movl	-60(%ebp), %eax	 # atmp.82.data, D.6711
	xorl	%ebx, %ebx	 # ivtmp.448
	movl	-448(%ebp), %ecx	 # %sfp, ivtmp.450
	movl	%edi, -428(%ebp)	 # D.6710, %sfp
	sall	$3, %edx	 #, D.6709
	movl	%eax, -464(%ebp)	 # D.6711, %sfp
	movl	%eax, %esi	 # D.6711, ivtmp.452
	movl	%edx, -420(%ebp)	 # D.6709, %sfp
	movl	-36(%ebp), %edx	 # atmp.82.dim[1].stride, tmp1439
	movl	%ecx, %edi	 # ivtmp.450, ivtmp.450
	sall	$3, %edx	 #, D.6709
	movl	%edx, -432(%ebp)	 # D.6709, %sfp
	.p2align 4,,10
L229:
	movl	-428(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	js	L230	 #,
	movl	-420(%ebp), %eax	 # %sfp, D.6709
	movl	%esi, 4(%esp)	 # ivtmp.452,
	movl	%edi, (%esp)	 # ivtmp.450,
	movl	%eax, 8(%esp)	 # D.6709,
	call	_memcpy	 #
L230:
	addl	$1, %ebx	 #, ivtmp.448
	addl	-420(%ebp), %edi	 # %sfp, ivtmp.450
	addl	-432(%ebp), %esi	 # %sfp, ivtmp.452
	cmpl	%ebx, -424(%ebp)	 # ivtmp.448, %sfp
	jge	L229	 #,
	movl	-440(%ebp), %esi	 # %sfp,
	movl	-428(%ebp), %edi	 # %sfp, D.6710
	testl	%esi, %esi	 #
	je	L231	 #,
L452:
	movl	-472(%ebp), %edx	 # %sfp, D.6710
	cmpl	%edx, -436(%ebp)	 # D.6710, %sfp
	je	L449	 #,
L232:
	movl	-452(%ebp), %eax	 # %sfp, tmp1138
	movl	-460(%ebp), %ecx	 # %sfp, D.6710
	xorl	%edx, %edx	 # D.6710
	sarl	$31, %eax	 #, tmp1138
	notl	%eax	 # tmp1138
	andl	-472(%ebp), %eax	 # %sfp, D.6710
	testl	%ecx, %ecx	 # D.6710
	js	L235	 #,
	movl	%ecx, %edx	 # D.6710, D.6710
	addl	$1, %edx	 #, D.6710
	imull	%eax, %edx	 # D.6710, D.6710
L235:
	movl	-436(%ebp), %eax	 # %sfp, D.6709
	movl	-484(%ebp), %ecx	 # %sfp, D.6710
	movl	-476(%ebp), %esi	 # %sfp, D.6710
	movl	$1, -116(%ebp)	 #, x.dim[0].lbound
	movl	$1, -104(%ebp)	 #, x.dim[1].lbound
	movl	%eax, -112(%ebp)	 # D.6709, x.dim[0].ubound
	movl	%eax, -108(%ebp)	 # D.6709, x.dim[1].stride
	cmpl	%edx, %ecx	 # D.6710, D.6710
	notl	%eax	 # D.6710
	movl	%esi, -100(%ebp)	 # D.6710, x.dim[1].ubound
	movl	%eax, -444(%ebp)	 # D.6710, %sfp
	movl	%eax, -128(%ebp)	 # D.6710, x.offset
	movl	-440(%ebp), %eax	 # %sfp, D.6711
	je	L236	 #,
	movl	%ecx, %eax	 # D.6710, D.6710
	sall	$3, %eax	 #, D.6710
	testl	%eax, %eax	 # D.6710
	jne	L237	 #,
	movl	$1, %eax	 #, D.6710
L237:
	movl	%eax, 4(%esp)	 # D.6710,
	movl	-440(%ebp), %eax	 # %sfp, D.6712
	movl	%eax, (%esp)	 # D.6712,
	call	_realloc	 #
	movl	%eax, -132(%ebp)	 # D.6712, x.data
L236:
	movl	%eax, -420(%ebp)	 # D.6711, %sfp
	movl	$1, -468(%ebp)	 #, %sfp
L233:
	movl	-424(%ebp), %ebx	 # %sfp,
	testl	%ebx, %ebx	 #
	js	L242	 #,
	movl	-108(%ebp), %eax	 # x.dim[1].stride, D.6710
	xorl	%esi, %esi	 # ivtmp.442
	leal	0(,%eax,8), %ecx	 #, D.6709
	imull	-468(%ebp), %eax	 # %sfp, D.6710
	movl	%ecx, -432(%ebp)	 # D.6709, %sfp
	movl	-444(%ebp), %ecx	 # %sfp, D.6710
	leal	(%eax,%ecx), %ebx	 #, D.6710
	movl	-436(%ebp), %eax	 # %sfp, D.6709
	movl	-448(%ebp), %ecx	 # %sfp, ivtmp.446
	movl	%edi, -436(%ebp)	 # D.6710, %sfp
	sall	$3, %ebx	 #, ivtmp.444
	sall	$3, %eax	 #, D.6709
	movl	%ebx, %edi	 # ivtmp.444, ivtmp.444
	movl	%ecx, %ebx	 # ivtmp.446, ivtmp.446
	movl	%eax, -428(%ebp)	 # D.6709, %sfp
	.p2align 4,,10
L243:
	movl	-436(%ebp), %edx	 # %sfp,
	testl	%edx, %edx	 #
	js	L244	 #,
	movl	-420(%ebp), %eax	 # %sfp, D.6708
	movl	-428(%ebp), %ecx	 # %sfp, D.6709
	movl	%ebx, 4(%esp)	 # ivtmp.446,
	leal	8(%eax,%edi), %eax	 #, D.6713
	movl	%ecx, 8(%esp)	 # D.6709,
	movl	%eax, (%esp)	 # D.6713,
	call	_memcpy	 #
L244:
	addl	$1, %esi	 #, ivtmp.442
	addl	-432(%ebp), %edi	 # %sfp, ivtmp.444
	addl	-428(%ebp), %ebx	 # %sfp, ivtmp.446
	cmpl	%esi, -424(%ebp)	 # ivtmp.442, %sfp
	jge	L243	 #,
L242:
	movl	-464(%ebp), %ecx	 # %sfp,
	testl	%ecx, %ecx	 #
	je	L240	 #,
	movl	-464(%ebp), %eax	 # %sfp, D.6711
	movl	%eax, (%esp)	 # D.6711,
	call	_free	 #
L240:
	movl	-456(%ebp), %esp	 # %sfp,
	leal	-132(%ebp), %eax	 #, tmp1477
	movl	$538, -52(%ebp)	 #, atmp.88.dtype
	movl	$0, -60(%ebp)	 #, atmp.88.data
	movl	$0, -56(%ebp)	 #, atmp.88.offset
	movl	%eax, 8(%esp)	 # tmp1477,
	movl	%eax, 4(%esp)	 # tmp1478,
	leal	-60(%ebp), %eax	 #, tmp1479
	movl	$0, 20(%esp)	 #,
	movl	$0, 16(%esp)	 #,
	movl	%eax, (%esp)	 # tmp1479,
	movl	$0, 12(%esp)	 #,
	call	__gfortran_matmul_r8	 #
	movl	-40(%ebp), %eax	 # atmp.88.dim[0].ubound, atmp.88.dim[0].ubound
	subl	-44(%ebp), %eax	 # atmp.88.dim[0].lbound, D.6710
	movl	%eax, %edi	 # D.6710, D.6710
	movl	-28(%ebp), %eax	 # atmp.88.dim[1].ubound, atmp.88.dim[1].ubound
	subl	-32(%ebp), %eax	 # atmp.88.dim[1].lbound, D.6710
	leal	1(%edi), %edx	 #, D.6710
	movl	%edx, -440(%ebp)	 # D.6710, %sfp
	leal	1(%eax), %ecx	 #, D.6710
	movl	%eax, -424(%ebp)	 # D.6710, %sfp
	imull	%ecx, %edx	 # D.6710, D.6710
	testl	%edi, %edi	 # D.6710
	movl	%ecx, -464(%ebp)	 # D.6710, %sfp
	movl	%edx, -448(%ebp)	 # D.6710, %sfp
	js	L245	 #,
	testl	%eax, %eax	 # D.6710
	js	L245	 #,
	leal	22(,%edx,8), %eax	 #, tmp930
	shrl	$4, %eax	 #, tmp932
	sall	$4, %eax	 #, tmp934
	call	___chkstk_ms
	subl	%eax, %esp	 # tmp936,
	leal	31(%esp), %ecx	 #, tmp937
	andl	$-8, %ecx	 #, A.235
	movl	%ecx, -460(%ebp)	 # A.235, %sfp
L246:
	movl	-440(%ebp), %ecx	 # %sfp, D.6710
	movl	-36(%ebp), %esi	 # atmp.88.dim[1].stride, tmp1497
	xorl	%ebx, %ebx	 # ivtmp.436
	movl	-60(%ebp), %eax	 # atmp.88.data, D.6711
	movl	%edi, -432(%ebp)	 # D.6710, %sfp
	leal	0(,%ecx,8), %edx	 #, D.6709
	movl	-460(%ebp), %ecx	 # %sfp, ivtmp.438
	movl	%eax, -472(%ebp)	 # D.6711, %sfp
	movl	%edx, -428(%ebp)	 # D.6709, %sfp
	leal	0(,%esi,8), %edx	 #, D.6709
	movl	%eax, %esi	 # D.6711, ivtmp.440
	movl	%ecx, %edi	 # ivtmp.438, ivtmp.438
	movl	%edx, -436(%ebp)	 # D.6709, %sfp
	.p2align 4,,10
L249:
	movl	-432(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	js	L250	 #,
	movl	-428(%ebp), %eax	 # %sfp, D.6709
	movl	%esi, 4(%esp)	 # ivtmp.440,
	movl	%edi, (%esp)	 # ivtmp.438,
	movl	%eax, 8(%esp)	 # D.6709,
	call	_memcpy	 #
L250:
	addl	$1, %ebx	 #, ivtmp.436
	addl	-428(%ebp), %edi	 # %sfp, ivtmp.438
	addl	-436(%ebp), %esi	 # %sfp, ivtmp.440
	cmpl	%ebx, -424(%ebp)	 # ivtmp.436, %sfp
	jge	L249	 #,
	movl	-420(%ebp), %eax	 # %sfp,
	movl	-432(%ebp), %edi	 # %sfp, D.6710
	testl	%eax, %eax	 #
	je	L251	 #,
L453:
	movl	-112(%ebp), %edx	 # x.dim[0].ubound, D.6710
	cmpl	%edx, -440(%ebp)	 # D.6710, %sfp
	je	L252	 #,
	movl	-100(%ebp), %eax	 # x.dim[1].ubound, D.6710
L253:
	leal	-1(%edx), %ecx	 #, D.6710
	sarl	$31, %ecx	 #, tmp1136
	notl	%ecx	 # tmp1136
	andl	%ecx, %edx	 # tmp1136, D.6710
	xorl	%ecx, %ecx	 # D.6710
	subl	-468(%ebp), %eax	 # %sfp, D.6710
	js	L256	 #,
	leal	1(%eax), %ecx	 #, D.6710
	imull	%edx, %ecx	 # D.6710, D.6710
L256:
	movl	-464(%ebp), %edx	 # %sfp, D.6710
	movl	-440(%ebp), %eax	 # %sfp, D.6710
	movl	$1, -116(%ebp)	 #, x.dim[0].lbound
	movl	$1, -120(%ebp)	 #, x.dim[0].stride
	movl	$1, -104(%ebp)	 #, x.dim[1].lbound
	movl	%edx, -100(%ebp)	 # D.6710, x.dim[1].ubound
	movl	-448(%ebp), %edx	 # %sfp, D.6710
	movl	%eax, -112(%ebp)	 # D.6710, x.dim[0].ubound
	movl	%eax, -108(%ebp)	 # D.6710, x.dim[1].stride
	notl	%eax	 # D.6710
	movl	%eax, -444(%ebp)	 # D.6710, %sfp
	movl	%eax, -128(%ebp)	 # D.6710, x.offset
	cmpl	%ecx, %edx	 # D.6710, D.6710
	movl	-420(%ebp), %eax	 # %sfp, D.6711
	je	L257	 #,
	movl	%edx, %eax	 # D.6710, D.6710
	sall	$3, %eax	 #, D.6710
	testl	%eax, %eax	 # D.6710
	jne	L258	 #,
	movl	$1, %eax	 #, D.6710
L258:
	movl	%eax, 4(%esp)	 # D.6710,
	movl	-420(%ebp), %eax	 # %sfp, D.6708
	movl	%eax, (%esp)	 # D.6708,
	call	_realloc	 #
	movl	%eax, -132(%ebp)	 # D.6712, x.data
L257:
	movl	-440(%ebp), %ecx	 # %sfp, D.6710
	movl	%eax, -420(%ebp)	 # D.6711, %sfp
	movl	$1, -448(%ebp)	 #, %sfp
	movl	$1, -468(%ebp)	 #, %sfp
	movl	%ecx, -452(%ebp)	 # D.6710, %sfp
L254:
	movl	-424(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	js	L263	 #,
	movl	-452(%ebp), %eax	 # %sfp, D.6710
	movl	-468(%ebp), %ebx	 # %sfp, D.6710
	xorl	%esi, %esi	 # ivtmp.430
	movl	-460(%ebp), %ecx	 # %sfp, ivtmp.434
	movl	%edi, -436(%ebp)	 # D.6710, %sfp
	imull	%eax, %ebx	 # D.6710, D.6710
	addl	-444(%ebp), %ebx	 # %sfp, D.6710
	leal	0(,%eax,8), %edx	 #, D.6709
	movl	-440(%ebp), %eax	 # %sfp, D.6710
	movl	%edx, -432(%ebp)	 # D.6709, %sfp
	sall	$3, %ebx	 #, ivtmp.432
	sall	$3, %eax	 #, D.6709
	movl	%ebx, %edi	 # ivtmp.432, ivtmp.432
	movl	%eax, -428(%ebp)	 # D.6709, %sfp
	movl	%ecx, %ebx	 # ivtmp.434, ivtmp.434
	.p2align 4,,10
L264:
	movl	-436(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	js	L265	 #,
	movl	-420(%ebp), %eax	 # %sfp, D.6708
	movl	-428(%ebp), %edx	 # %sfp, D.6709
	movl	%ebx, 4(%esp)	 # ivtmp.434,
	leal	8(%eax,%edi), %eax	 #, D.6713
	movl	%edx, 8(%esp)	 # D.6709,
	movl	%eax, (%esp)	 # D.6713,
	call	_memcpy	 #
L265:
	addl	$1, %esi	 #, ivtmp.430
	addl	-432(%ebp), %edi	 # %sfp, ivtmp.432
	addl	-428(%ebp), %ebx	 # %sfp, ivtmp.434
	cmpl	%esi, -424(%ebp)	 # ivtmp.430, %sfp
	jge	L264	 #,
L263:
	movl	-472(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	je	L261	 #,
	movl	-472(%ebp), %eax	 # %sfp, D.6711
	movl	%eax, (%esp)	 # D.6711,
	call	_free	 #
L261:
	movl	-448(%ebp), %eax	 # %sfp, D.6710
	movl	-480(%ebp), %edx	 # %sfp, D.6710
	addl	-392(%ebp), %edx	 # v.offset, D.6710
	movl	-456(%ebp), %esp	 # %sfp,
	movl	-396(%ebp), %edi	 # v.data, D.6712
	testl	%eax, %eax	 # D.6710
	je	L351	 #,
	movl	%eax, %ecx	 # D.6710, D.6710
	negl	%ecx	 # D.6710
L266:
	movl	-440(%ebp), %esi	 # %sfp, D.6710
	movl	-452(%ebp), %ebx	 # %sfp, D.6710
	movl	%esi, %eax	 # D.6710, tmp961
	subl	%ebx, %ecx	 # D.6710, D.6710
	sarl	$31, %eax	 #, tmp961
	notl	%eax	 # tmp961
	andl	%esi, %eax	 # D.6710, D.6710
	je	L352	 #,
	movl	-448(%ebp), %esi	 # %sfp, D.6710
	fldz
	addl	%ebx, %esi	 # D.6710, D.6710
	addl	%esi, %ecx	 # D.6710, D.6709
	leal	0(,%esi,8), %ebx	 #, D.6709
	movl	-420(%ebp), %esi	 # %sfp, D.6708
	leal	(%esi,%ecx,8), %ecx	 #, ivtmp.428
	leal	1(%eax), %esi	 #, D.6710
	movl	$1, %eax	 #, i
	.p2align 4,,10
L268:
	addl	$1, %eax	 #, i
	faddl	(%ecx)	 # MEM[base: _581, offset: 0B]
	addl	%ebx, %ecx	 # D.6709, ivtmp.428
	cmpl	%eax, %esi	 # i, D.6710
	jne	L268	 #,
L267:
	movl	-128(%ebp), %eax	 # x, x
	fstpl	(%edi,%edx,8)	 # MEM[(real(kind=8)[0:] *)_682]
	movl	$538, -124(%ebp)	 #, x.dtype
	movl	$538, -88(%ebp)	 #, D.3997
	movl	$0, -96(%ebp)	 #, D.3997.data
	xorl	%ebx, %ebx	 # D.6714
	movl	$538, -52(%ebp)	 #, parm.94.dtype
	movl	%eax, -92(%ebp)	 # x, D.3997
	movl	-120(%ebp), %eax	 # x, x
	movl	$1, -32(%ebp)	 #, parm.94.dim[1].lbound
	movl	$10, -28(%ebp)	 #, parm.94.dim[1].ubound
	movl	$1, -36(%ebp)	 #, parm.94.dim[1].stride
	movl	$1, -44(%ebp)	 #, parm.94.dim[0].lbound
	movl	%eax, -84(%ebp)	 # x, D.3997
	movl	-116(%ebp), %eax	 # x, x
	movl	$10, -40(%ebp)	 #, parm.94.dim[0].ubound
	movl	$10, -48(%ebp)	 #, parm.94.dim[0].stride
	movl	$0, -56(%ebp)	 #, parm.94.offset
	movl	%eax, -80(%ebp)	 # x, D.3997
	movl	-112(%ebp), %eax	 # x, x
	movl	%eax, -76(%ebp)	 # x, D.3997
	movl	-108(%ebp), %eax	 # x, x
	movl	%eax, -72(%ebp)	 # x, D.3997
	movl	-104(%ebp), %eax	 # x, x
	movl	%eax, -68(%ebp)	 # x, D.3997
	movl	-100(%ebp), %eax	 # x, x
	movl	%eax, -64(%ebp)	 # x, D.3997
	movl	-416(%ebp), %eax	 # %sfp, D.6712
	movl	%eax, -60(%ebp)	 # D.6712, parm.94.data
	leal	-168(%ebp), %eax	 #, tmp1545
	movl	$0, 20(%esp)	 #,
	movl	$0, 16(%esp)	 #,
	movl	$0, 12(%esp)	 #,
	movl	%eax, 8(%esp)	 # tmp1545,
	leal	-60(%ebp), %eax	 #, tmp1546
	movl	%eax, 4(%esp)	 # tmp1546,
	leal	-96(%ebp), %eax	 #, tmp1547
	movl	%eax, (%esp)	 # tmp1547,
	call	__gfortran_matmul_r8	 #
	movl	-420(%ebp), %eax	 # %sfp, D.6708
	testl	%eax, %eax	 # D.6708
	sete	%bl	 #, D.6714
	je	L269	 #,
	movl	%eax, (%esp)	 # D.6708,
	call	_free	 #
L269:
	movl	-96(%ebp), %eax	 # D.3997.data, D.6712
	movl	%eax, -448(%ebp)	 # D.6712, %sfp
	movl	%eax, -132(%ebp)	 # D.6712, x.data
	movl	-76(%ebp), %eax	 # D.3997.dim[0].ubound, D.6710
	movl	%eax, %ecx	 # D.6710, D.6710
	movl	%eax, -452(%ebp)	 # D.6710, %sfp
	movl	-64(%ebp), %eax	 # D.3997.dim[1].ubound, D.6710
	movl	%eax, %edx	 # D.6710, D.6710
	movl	%eax, -460(%ebp)	 # D.6710, %sfp
	movl	$1, %eax	 #, tmp980
	subl	-80(%ebp), %eax	 # D.3997.dim[0].lbound, D.6710
	subl	-440(%ebp), %eax	 # %sfp, D.6710
	addl	%ecx, %eax	 # D.6710, tmp1226
	setne	%al	 #, D.6714
	movzbl	%al, %eax	 # D.6714, D.6714
	orl	%ebx, %eax	 # D.6714, tmp1227
	jne	L270	 #,
	movl	-468(%ebp), %eax	 # %sfp, D.6710
	subl	-68(%ebp), %eax	 # D.3997.dim[1].lbound, D.6710
	subl	-464(%ebp), %eax	 # %sfp, D.6710
	addl	%edx, %eax	 # D.6710, tmp1228
	jne	L270	 #,
	movl	-452(%ebp), %eax	 # %sfp, D.6710
	movl	$1, -120(%ebp)	 #, x.dim[0].stride
	addl	$1, %eax	 #, D.6710
	movl	%eax, -472(%ebp)	 # D.6710, %sfp
	movl	%eax, -112(%ebp)	 # D.6710, x.dim[0].ubound
L334:
	movl	-468(%ebp), %edi	 # %sfp, D.6710
	movl	-72(%ebp), %eax	 # D.3997.dim[1].stride, D.6710
	movl	-460(%ebp), %ecx	 # %sfp, D.6710
	movl	%esp, -456(%ebp)	 #, %sfp
	movl	$538, -52(%ebp)	 #, atmp.95.dtype
	movl	$0, -60(%ebp)	 #, atmp.95.data
	movl	%eax, -108(%ebp)	 # D.6710, x.dim[1].stride
	movl	%edi, -104(%ebp)	 # D.6710, x.dim[1].lbound
	imull	%edi, %eax	 # D.6710, D.6710
	addl	%edi, %ecx	 # D.6710, D.6710
	movl	$0, -56(%ebp)	 #, atmp.95.offset
	movl	%ecx, -488(%ebp)	 # D.6710, %sfp
	movl	%ecx, -100(%ebp)	 # D.6710, x.dim[1].ubound
	notl	%eax	 # D.6710
	movl	%eax, -444(%ebp)	 # D.6710, %sfp
	movl	%eax, -128(%ebp)	 # D.6710, x.offset
	leal	-132(%ebp), %eax	 #, tmp1570
	movl	$0, 20(%esp)	 #,
	movl	$0, 16(%esp)	 #,
	movl	%eax, 8(%esp)	 # tmp1570,
	movl	%eax, 4(%esp)	 # tmp1571,
	leal	-60(%ebp), %eax	 #, tmp1572
	movl	$0, 12(%esp)	 #,
	movl	%eax, (%esp)	 # tmp1572,
	call	__gfortran_matmul_r8	 #
	movl	-40(%ebp), %eax	 # atmp.95.dim[0].ubound, atmp.95.dim[0].ubound
	subl	-44(%ebp), %eax	 # atmp.95.dim[0].lbound, D.6710
	movl	%eax, %edi	 # D.6710, D.6710
	movl	-28(%ebp), %eax	 # atmp.95.dim[1].ubound, atmp.95.dim[1].ubound
	subl	-32(%ebp), %eax	 # atmp.95.dim[1].lbound, D.6710
	leal	1(%edi), %ecx	 #, D.6709
	movl	%ecx, -436(%ebp)	 # D.6709, %sfp
	leal	1(%eax), %edx	 #, D.6710
	movl	%eax, -424(%ebp)	 # D.6710, %sfp
	imull	%edx, %ecx	 # D.6710, D.6710
	testl	%edi, %edi	 # D.6710
	movl	%edx, -476(%ebp)	 # D.6710, %sfp
	movl	%ecx, -484(%ebp)	 # D.6710, %sfp
	js	L272	 #,
	testl	%eax, %eax	 # D.6710
	js	L272	 #,
	leal	22(,%ecx,8), %eax	 #, tmp1005
	shrl	$4, %eax	 #, tmp1007
	sall	$4, %eax	 #, tmp1009
	call	___chkstk_ms
	subl	%eax, %esp	 # tmp1011,
	leal	31(%esp), %ecx	 #, tmp1012
	andl	$-8, %ecx	 #, A.242
	movl	%ecx, -440(%ebp)	 # A.242, %sfp
L273:
	movl	-436(%ebp), %esi	 # %sfp, D.6709
	movl	-60(%ebp), %eax	 # atmp.95.data, D.6711
	xorl	%ebx, %ebx	 # ivtmp.419
	movl	%edi, -428(%ebp)	 # D.6710, %sfp
	leal	0(,%esi,8), %ecx	 #, D.6709
	movl	-36(%ebp), %esi	 # atmp.95.dim[1].stride, tmp1590
	movl	%eax, -464(%ebp)	 # D.6711, %sfp
	movl	%ecx, -420(%ebp)	 # D.6709, %sfp
	movl	-440(%ebp), %ecx	 # %sfp, ivtmp.421
	leal	0(,%esi,8), %edx	 #, D.6709
	movl	%eax, %esi	 # D.6711, ivtmp.423
	movl	%edx, -432(%ebp)	 # D.6709, %sfp
	movl	%ecx, %edi	 # ivtmp.421, ivtmp.421
	.p2align 4,,10
L276:
	movl	-428(%ebp), %edx	 # %sfp,
	testl	%edx, %edx	 #
	js	L277	 #,
	movl	-420(%ebp), %eax	 # %sfp, D.6709
	movl	%esi, 4(%esp)	 # ivtmp.423,
	movl	%edi, (%esp)	 # ivtmp.421,
	movl	%eax, 8(%esp)	 # D.6709,
	call	_memcpy	 #
L277:
	addl	$1, %ebx	 #, ivtmp.419
	addl	-420(%ebp), %edi	 # %sfp, ivtmp.421
	addl	-432(%ebp), %esi	 # %sfp, ivtmp.423
	cmpl	-424(%ebp), %ebx	 # %sfp, ivtmp.419
	jle	L276	 #,
	movl	-448(%ebp), %eax	 # %sfp,
	movl	-428(%ebp), %edi	 # %sfp, D.6710
	testl	%eax, %eax	 #
	je	L278	 #,
L454:
	movl	-472(%ebp), %ecx	 # %sfp, D.6710
	cmpl	%ecx, -436(%ebp)	 # D.6710, %sfp
	je	L450	 #,
L279:
	movl	-452(%ebp), %eax	 # %sfp, tmp1139
	movl	-460(%ebp), %ecx	 # %sfp, D.6710
	xorl	%edx, %edx	 # D.6710
	sarl	$31, %eax	 #, tmp1139
	notl	%eax	 # tmp1139
	andl	-472(%ebp), %eax	 # %sfp, D.6710
	testl	%ecx, %ecx	 # D.6710
	js	L282	 #,
	movl	%ecx, %edx	 # D.6710, D.6710
	addl	$1, %edx	 #, D.6710
	imull	%eax, %edx	 # D.6710, D.6710
L282:
	movl	-476(%ebp), %ecx	 # %sfp, D.6710
	movl	-436(%ebp), %eax	 # %sfp, D.6709
	movl	$1, -116(%ebp)	 #, x.dim[0].lbound
	movl	$1, -104(%ebp)	 #, x.dim[1].lbound
	movl	%ecx, -100(%ebp)	 # D.6710, x.dim[1].ubound
	movl	-484(%ebp), %ecx	 # %sfp, D.6710
	movl	%eax, -112(%ebp)	 # D.6709, x.dim[0].ubound
	movl	%eax, -108(%ebp)	 # D.6709, x.dim[1].stride
	notl	%eax	 # D.6710
	movl	%eax, -444(%ebp)	 # D.6710, %sfp
	movl	%eax, -128(%ebp)	 # D.6710, x.offset
	cmpl	%edx, %ecx	 # D.6710, D.6710
	movl	-448(%ebp), %eax	 # %sfp, D.6711
	je	L283	 #,
	movl	%ecx, %eax	 # D.6710, D.6710
	sall	$3, %eax	 #, D.6710
	testl	%eax, %eax	 # D.6710
	jne	L284	 #,
	movl	$1, %eax	 #, D.6710
L284:
	movl	%eax, 4(%esp)	 # D.6710,
	movl	-448(%ebp), %eax	 # %sfp, D.6712
	movl	%eax, (%esp)	 # D.6712,
	call	_realloc	 #
	movl	%eax, -132(%ebp)	 # D.6712, x.data
L283:
	movl	%eax, -420(%ebp)	 # D.6711, %sfp
	movl	$1, -468(%ebp)	 #, %sfp
L280:
	movl	-424(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	js	L289	 #,
	movl	-108(%ebp), %eax	 # x.dim[1].stride, D.6710
	xorl	%esi, %esi	 # ivtmp.413
	leal	0(,%eax,8), %ecx	 #, D.6709
	imull	-468(%ebp), %eax	 # %sfp, D.6710
	movl	%ecx, -432(%ebp)	 # D.6709, %sfp
	movl	-444(%ebp), %ecx	 # %sfp, D.6710
	leal	(%eax,%ecx), %ebx	 #, D.6710
	movl	-436(%ebp), %eax	 # %sfp, D.6709
	movl	-440(%ebp), %ecx	 # %sfp, ivtmp.417
	movl	%edi, -436(%ebp)	 # D.6710, %sfp
	sall	$3, %ebx	 #, ivtmp.415
	sall	$3, %eax	 #, D.6709
	movl	%ebx, %edi	 # ivtmp.415, ivtmp.415
	movl	%ecx, %ebx	 # ivtmp.417, ivtmp.417
	movl	%eax, -428(%ebp)	 # D.6709, %sfp
	.p2align 4,,10
L290:
	movl	-436(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	js	L291	 #,
	movl	-420(%ebp), %eax	 # %sfp, D.6708
	movl	-428(%ebp), %ecx	 # %sfp, D.6709
	movl	%ebx, 4(%esp)	 # ivtmp.417,
	leal	8(%eax,%edi), %eax	 #, D.6713
	movl	%ecx, 8(%esp)	 # D.6709,
	movl	%eax, (%esp)	 # D.6713,
	call	_memcpy	 #
L291:
	addl	$1, %esi	 #, ivtmp.413
	addl	-432(%ebp), %edi	 # %sfp, ivtmp.415
	addl	-428(%ebp), %ebx	 # %sfp, ivtmp.417
	cmpl	-424(%ebp), %esi	 # %sfp, ivtmp.413
	jle	L290	 #,
L289:
	movl	-464(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	je	L287	 #,
	movl	-464(%ebp), %eax	 # %sfp, D.6711
	movl	%eax, (%esp)	 # D.6711,
	call	_free	 #
L287:
	movl	-456(%ebp), %esp	 # %sfp,
	leal	-132(%ebp), %eax	 #, tmp1628
	movl	$538, -52(%ebp)	 #, atmp.101.dtype
	movl	$0, -60(%ebp)	 #, atmp.101.data
	movl	$0, -56(%ebp)	 #, atmp.101.offset
	movl	%eax, 8(%esp)	 # tmp1628,
	movl	%eax, 4(%esp)	 # tmp1629,
	leal	-60(%ebp), %eax	 #, tmp1630
	movl	$0, 20(%esp)	 #,
	movl	$0, 16(%esp)	 #,
	movl	%eax, (%esp)	 # tmp1630,
	movl	$0, 12(%esp)	 #,
	call	__gfortran_matmul_r8	 #
	movl	-40(%ebp), %eax	 # atmp.101.dim[0].ubound, atmp.101.dim[0].ubound
	subl	-44(%ebp), %eax	 # atmp.101.dim[0].lbound, D.6710
	movl	%eax, %edi	 # D.6710, D.6710
	movl	-28(%ebp), %eax	 # atmp.101.dim[1].ubound, atmp.101.dim[1].ubound
	subl	-32(%ebp), %eax	 # atmp.101.dim[1].lbound, D.6710
	movl	%eax, %ecx	 # D.6710, D.6710
	movl	%eax, -424(%ebp)	 # D.6710, %sfp
	leal	1(%edi), %eax	 #, D.6710
	leal	1(%ecx), %edx	 #, D.6710
	movl	%eax, -440(%ebp)	 # D.6710, %sfp
	movl	%eax, -536(%ebp)	 # D.6710, %sfp
	imull	%edx, %eax	 # D.6710, D.6710
	testl	%edi, %edi	 # D.6710
	movl	%edx, -448(%ebp)	 # D.6710, %sfp
	movl	%eax, -452(%ebp)	 # D.6710, %sfp
	js	L292	 #,
	testl	%ecx, %ecx	 # D.6710
	js	L292	 #,
	leal	22(,%eax,8), %eax	 #, tmp1048
	shrl	$4, %eax	 #, tmp1050
	sall	$4, %eax	 #, tmp1052
	call	___chkstk_ms
	subl	%eax, %esp	 # tmp1054,
	leal	31(%esp), %ecx	 #, tmp1055
	andl	$-8, %ecx	 #, A.247
	movl	%ecx, -460(%ebp)	 # A.247, %sfp
L293:
	movl	-440(%ebp), %edx	 # %sfp, D.6710
	movl	-60(%ebp), %eax	 # atmp.101.data, D.6711
	xorl	%ebx, %ebx	 # ivtmp.407
	movl	-460(%ebp), %ecx	 # %sfp, ivtmp.409
	movl	%edi, -432(%ebp)	 # D.6710, %sfp
	leal	0(,%edx,8), %esi	 #, D.6709
	movl	-36(%ebp), %edx	 # atmp.101.dim[1].stride, tmp1649
	movl	%eax, -464(%ebp)	 # D.6711, %sfp
	movl	%ecx, %edi	 # ivtmp.409, ivtmp.409
	movl	%esi, -428(%ebp)	 # D.6709, %sfp
	leal	0(,%edx,8), %esi	 #, D.6709
	movl	%esi, -436(%ebp)	 # D.6709, %sfp
	movl	%eax, %esi	 # D.6711, ivtmp.411
	.p2align 4,,10
L296:
	movl	-432(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	js	L297	 #,
	movl	-428(%ebp), %eax	 # %sfp, D.6709
	movl	%esi, 4(%esp)	 # ivtmp.411,
	movl	%edi, (%esp)	 # ivtmp.409,
	movl	%eax, 8(%esp)	 # D.6709,
	call	_memcpy	 #
L297:
	addl	$1, %ebx	 #, ivtmp.407
	addl	-428(%ebp), %edi	 # %sfp, ivtmp.409
	addl	-436(%ebp), %esi	 # %sfp, ivtmp.411
	cmpl	-424(%ebp), %ebx	 # %sfp, ivtmp.407
	jle	L296	 #,
	movl	-420(%ebp), %esi	 # %sfp,
	movl	-432(%ebp), %edi	 # %sfp, D.6710
	testl	%esi, %esi	 #
	je	L298	 #,
L455:
	movl	-112(%ebp), %edx	 # x.dim[0].ubound, D.6710
	cmpl	%edx, -440(%ebp)	 # D.6710, %sfp
	movl	-100(%ebp), %eax	 # x.dim[1].ubound, D.6710
	je	L451	 #,
L300:
	leal	-1(%edx), %ecx	 #, D.6710
	sarl	$31, %ecx	 #, tmp1137
	notl	%ecx	 # tmp1137
	andl	%ecx, %edx	 # tmp1137, D.6710
	xorl	%ecx, %ecx	 # D.6710
	subl	-468(%ebp), %eax	 # %sfp, D.6710
	js	L303	 #,
	leal	1(%eax), %ecx	 #, D.6710
	imull	%edx, %ecx	 # D.6710, D.6710
L303:
	movl	-448(%ebp), %edx	 # %sfp, D.6710
	movl	-440(%ebp), %eax	 # %sfp, D.6710
	movl	$1, -116(%ebp)	 #, x.dim[0].lbound
	movl	$1, -120(%ebp)	 #, x.dim[0].stride
	movl	$1, -104(%ebp)	 #, x.dim[1].lbound
	movl	%edx, -100(%ebp)	 # D.6710, x.dim[1].ubound
	movl	-452(%ebp), %edx	 # %sfp, D.6710
	movl	%eax, -112(%ebp)	 # D.6710, x.dim[0].ubound
	movl	%eax, -108(%ebp)	 # D.6710, x.dim[1].stride
	notl	%eax	 # D.6710
	movl	%eax, -444(%ebp)	 # D.6710, %sfp
	movl	%eax, -128(%ebp)	 # D.6710, x.offset
	cmpl	%ecx, %edx	 # D.6710, D.6710
	movl	-420(%ebp), %eax	 # %sfp, D.6711
	je	L304	 #,
	movl	%edx, %eax	 # D.6710, D.6710
	sall	$3, %eax	 #, D.6710
	testl	%eax, %eax	 # D.6710
	jne	L305	 #,
	movl	$1, %eax	 #, D.6710
L305:
	movl	%eax, 4(%esp)	 # D.6710,
	movl	-420(%ebp), %eax	 # %sfp, D.6708
	movl	%eax, (%esp)	 # D.6708,
	call	_realloc	 #
	movl	%eax, -132(%ebp)	 # D.6712, x.data
L304:
	movl	-440(%ebp), %ecx	 # %sfp, D.6710
	movl	%eax, -420(%ebp)	 # D.6711, %sfp
	movl	$1, -448(%ebp)	 #, %sfp
	movl	$1, -468(%ebp)	 #, %sfp
	movl	%ecx, -452(%ebp)	 # D.6710, %sfp
L301:
	movl	-424(%ebp), %ebx	 # %sfp,
	testl	%ebx, %ebx	 #
	js	L310	 #,
	movl	-452(%ebp), %eax	 # %sfp, D.6710
	movl	-468(%ebp), %ebx	 # %sfp, D.6710
	xorl	%esi, %esi	 # ivtmp.401
	movl	%edi, -436(%ebp)	 # D.6710, %sfp
	leal	0(,%eax,8), %ecx	 #, D.6709
	imull	%eax, %ebx	 # D.6710, D.6710
	addl	-444(%ebp), %ebx	 # %sfp, D.6710
	movl	-440(%ebp), %eax	 # %sfp, D.6710
	movl	%ecx, -432(%ebp)	 # D.6709, %sfp
	movl	-460(%ebp), %ecx	 # %sfp, ivtmp.405
	sall	$3, %eax	 #, D.6709
	sall	$3, %ebx	 #, ivtmp.403
	movl	%eax, -428(%ebp)	 # D.6709, %sfp
	movl	%ebx, %edi	 # ivtmp.403, ivtmp.403
	movl	%ecx, %ebx	 # ivtmp.405, ivtmp.405
	.p2align 4,,10
L311:
	movl	-436(%ebp), %edx	 # %sfp,
	testl	%edx, %edx	 #
	js	L312	 #,
	movl	-420(%ebp), %eax	 # %sfp, D.6708
	movl	-428(%ebp), %edx	 # %sfp, D.6709
	movl	%ebx, 4(%esp)	 # ivtmp.405,
	leal	8(%eax,%edi), %eax	 #, D.6713
	movl	%edx, 8(%esp)	 # D.6709,
	movl	%eax, (%esp)	 # D.6713,
	call	_memcpy	 #
L312:
	addl	$1, %esi	 #, ivtmp.401
	addl	-432(%ebp), %edi	 # %sfp, ivtmp.403
	addl	-428(%ebp), %ebx	 # %sfp, ivtmp.405
	cmpl	-424(%ebp), %esi	 # %sfp, ivtmp.401
	jle	L311	 #,
L310:
	movl	-464(%ebp), %ecx	 # %sfp,
	testl	%ecx, %ecx	 #
	je	L308	 #,
	movl	-464(%ebp), %eax	 # %sfp, D.6711
	movl	%eax, (%esp)	 # D.6711,
	call	_free	 #
L308:
	movl	-448(%ebp), %eax	 # %sfp, D.6710
	movl	-480(%ebp), %esi	 # %sfp, D.6710
	addl	-368(%ebp), %esi	 # w.offset, D.6710
	movl	-456(%ebp), %esp	 # %sfp,
	movl	-372(%ebp), %edi	 # w.data, D.6712
	testl	%eax, %eax	 # D.6710
	je	L360	 #,
	movl	%eax, %edx	 # D.6710, D.6710
	negl	%edx	 # D.6710
L313:
	movl	-440(%ebp), %ecx	 # %sfp, D.6710
	movl	-452(%ebp), %ebx	 # %sfp, D.6710
	movl	%ecx, %eax	 # D.6710, tmp1080
	subl	%ebx, %edx	 # D.6710, D.6710
	sarl	$31, %eax	 #, tmp1080
	notl	%eax	 # tmp1080
	andl	%ecx, %eax	 # D.6710, D.6710
	movl	%eax, -424(%ebp)	 # D.6710, %sfp
	je	L361	 #,
	movl	-448(%ebp), %eax	 # %sfp, D.6710
	fldz
	addl	%ebx, %eax	 # D.6710, D.6710
	movl	-424(%ebp), %ebx	 # %sfp, D.6710
	addl	%eax, %edx	 # D.6710, D.6709
	leal	0(,%eax,8), %ecx	 #, D.6709
	movl	-420(%ebp), %eax	 # %sfp, D.6708
	addl	$1, %ebx	 #, D.6710
	leal	(%eax,%edx,8), %edx	 #, ivtmp.399
	movl	$1, %eax	 #, i
	.p2align 4,,10
L315:
	addl	$1, %eax	 #, i
	faddl	(%edx)	 # MEM[base: _365, offset: 0B]
	addl	%ecx, %edx	 # D.6709, ivtmp.399
	cmpl	%eax, %ebx	 # i, D.6710
	jne	L315	 #,
L314:
	addl	$1, -480(%ebp)	 #, %sfp
	fstpl	(%edi,%esi,8)	 # MEM[(real(kind=8)[0:] *)_913]
	movl	-480(%ebp), %eax	 # %sfp, i
	cmpl	%eax, -544(%ebp)	 # i, %sfp
	je	L316	 #,
	movl	-104(%ebp), %eax	 # x.dim[1].lbound, D.6710
	movl	%eax, -468(%ebp)	 # D.6710, %sfp
	movl	-100(%ebp), %eax	 # x.dim[1].ubound, D.6710
	movl	%eax, -540(%ebp)	 # D.6710, %sfp
	movl	-420(%ebp), %eax	 # %sfp, D.6708
	movl	%eax, -532(%ebp)	 # D.6708, %sfp
	jmp	L317	 #
	.p2align 4,,10
L360:
	movl	$-1, %edx	 #, D.6710
	movl	$1, -448(%ebp)	 #, %sfp
	jmp	L313	 #
	.p2align 4,,10
L270:
	movl	-452(%ebp), %eax	 # %sfp, D.6710
	movl	$1, -116(%ebp)	 #, x.dim[0].lbound
	movl	$1, -120(%ebp)	 #, x.dim[0].stride
	movl	$1, -468(%ebp)	 #, %sfp
	addl	$1, %eax	 #, D.6710
	movl	%eax, -472(%ebp)	 # D.6710, %sfp
	movl	%eax, -112(%ebp)	 # D.6710, x.dim[0].ubound
	jmp	L334	 #
	.p2align 4,,10
L351:
	movl	$-1, %ecx	 #, D.6710
	movl	$1, -448(%ebp)	 #, %sfp
	jmp	L266	 #
	.p2align 4,,10
L223:
	movl	-452(%ebp), %eax	 # %sfp, D.6710
	movl	$1, -116(%ebp)	 #, x.dim[0].lbound
	movl	$1, -120(%ebp)	 #, x.dim[0].stride
	movl	$1, -468(%ebp)	 #, %sfp
	addl	$1, %eax	 #, D.6710
	movl	%eax, -472(%ebp)	 # D.6710, %sfp
	movl	%eax, -112(%ebp)	 # D.6710, x.dim[0].ubound
	jmp	L331	 #
	.p2align 4,,10
L225:
	leal	24(%esp), %eax	 #, A.230
	movl	%eax, -448(%ebp)	 # A.230, %sfp
	movl	-424(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	jns	L226	 #,
	movl	-440(%ebp), %esi	 # %sfp,
	movl	-60(%ebp), %eax	 # atmp.82.data, D.6711
	testl	%esi, %esi	 #
	movl	%eax, -464(%ebp)	 # D.6711, %sfp
	jne	L452	 #,
	.p2align 4,,10
L231:
	movl	-436(%ebp), %eax	 # %sfp, D.6709
	movl	-476(%ebp), %edx	 # %sfp, D.6710
	movl	$1, -116(%ebp)	 #, x.dim[0].lbound
	movl	$1, -104(%ebp)	 #, x.dim[1].lbound
	movl	%eax, -112(%ebp)	 # D.6709, x.dim[0].ubound
	movl	%eax, -108(%ebp)	 # D.6709, x.dim[1].stride
	notl	%eax	 # D.6710
	movl	%eax, -444(%ebp)	 # D.6710, %sfp
	movl	%eax, -128(%ebp)	 # D.6710, x.offset
	movl	-484(%ebp), %eax	 # %sfp, D.6710
	movl	%edx, -100(%ebp)	 # D.6710, x.dim[1].ubound
	sall	$3, %eax	 #, D.6710
	testl	%eax, %eax	 # D.6710
	jne	L332	 #,
	movl	$1, %eax	 #, D.6710
L332:
	movl	%eax, (%esp)	 # D.6710,
	call	_malloc	 #
	movl	%eax, -132(%ebp)	 # tmp1098, x.data
	jmp	L236	 #
	.p2align 4,,10
L245:
	leal	24(%esp), %eax	 #, A.235
	movl	%eax, -460(%ebp)	 # A.235, %sfp
	movl	-424(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	jns	L246	 #,
	movl	-60(%ebp), %eax	 # atmp.88.data, D.6711
	movl	%eax, -472(%ebp)	 # D.6711, %sfp
	movl	-420(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	jne	L453	 #,
	.p2align 4,,10
L251:
	movl	-440(%ebp), %eax	 # %sfp, D.6710
	movl	-464(%ebp), %edx	 # %sfp, D.6710
	movl	$1, -116(%ebp)	 #, x.dim[0].lbound
	movl	$1, -120(%ebp)	 #, x.dim[0].stride
	movl	$1, -104(%ebp)	 #, x.dim[1].lbound
	movl	%eax, -112(%ebp)	 # D.6710, x.dim[0].ubound
	movl	%eax, -108(%ebp)	 # D.6710, x.dim[1].stride
	notl	%eax	 # D.6710
	movl	%eax, -444(%ebp)	 # D.6710, %sfp
	movl	%eax, -128(%ebp)	 # D.6710, x.offset
	movl	-448(%ebp), %eax	 # %sfp, D.6710
	movl	%edx, -100(%ebp)	 # D.6710, x.dim[1].ubound
	sall	$3, %eax	 #, D.6710
	testl	%eax, %eax	 # D.6710
	jne	L333	 #,
	movl	$1, %eax	 #, D.6710
L333:
	movl	%eax, (%esp)	 # D.6710,
	call	_malloc	 #
	movl	$538, -124(%ebp)	 #, x.dtype
	movl	%eax, -132(%ebp)	 # tmp1100, x.data
	jmp	L257	 #
	.p2align 4,,10
L272:
	movl	-424(%ebp), %ecx	 # %sfp,
	leal	24(%esp), %eax	 #, A.242
	movl	%eax, -440(%ebp)	 # A.242, %sfp
	testl	%ecx, %ecx	 #
	jns	L273	 #,
	movl	-60(%ebp), %eax	 # atmp.95.data, D.6711
	movl	%eax, -464(%ebp)	 # D.6711, %sfp
	movl	-448(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	jne	L454	 #,
	.p2align 4,,10
L278:
	movl	-436(%ebp), %eax	 # %sfp, D.6709
	movl	-476(%ebp), %edx	 # %sfp, D.6710
	movl	$1, -116(%ebp)	 #, x.dim[0].lbound
	movl	$1, -104(%ebp)	 #, x.dim[1].lbound
	movl	%eax, -112(%ebp)	 # D.6709, x.dim[0].ubound
	movl	%eax, -108(%ebp)	 # D.6709, x.dim[1].stride
	notl	%eax	 # D.6710
	movl	%eax, -444(%ebp)	 # D.6710, %sfp
	movl	%eax, -128(%ebp)	 # D.6710, x.offset
	movl	-484(%ebp), %eax	 # %sfp, D.6710
	movl	%edx, -100(%ebp)	 # D.6710, x.dim[1].ubound
	sall	$3, %eax	 #, D.6710
	testl	%eax, %eax	 # D.6710
	jne	L335	 #,
	movl	$1, %eax	 #, D.6710
L335:
	movl	%eax, (%esp)	 # D.6710,
	call	_malloc	 #
	movl	%eax, -132(%ebp)	 # tmp1102, x.data
	jmp	L283	 #
	.p2align 4,,10
L292:
	leal	24(%esp), %eax	 #, A.247
	movl	%eax, -460(%ebp)	 # A.247, %sfp
	movl	-424(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	jns	L293	 #,
	movl	-420(%ebp), %esi	 # %sfp,
	movl	-60(%ebp), %eax	 # atmp.101.data, D.6711
	testl	%esi, %esi	 #
	movl	%eax, -464(%ebp)	 # D.6711, %sfp
	jne	L455	 #,
	.p2align 4,,10
L298:
	movl	-440(%ebp), %eax	 # %sfp, D.6710
	movl	-448(%ebp), %esi	 # %sfp, D.6710
	movl	$1, -116(%ebp)	 #, x.dim[0].lbound
	movl	$1, -120(%ebp)	 #, x.dim[0].stride
	movl	$1, -104(%ebp)	 #, x.dim[1].lbound
	movl	%eax, -112(%ebp)	 # D.6710, x.dim[0].ubound
	movl	%eax, -108(%ebp)	 # D.6710, x.dim[1].stride
	notl	%eax	 # D.6710
	movl	%eax, -444(%ebp)	 # D.6710, %sfp
	movl	%eax, -128(%ebp)	 # D.6710, x.offset
	movl	-452(%ebp), %eax	 # %sfp, D.6710
	movl	%esi, -100(%ebp)	 # D.6710, x.dim[1].ubound
	sall	$3, %eax	 #, D.6710
	testl	%eax, %eax	 # D.6710
	jne	L336	 #,
	movl	$1, %eax	 #, D.6710
L336:
	movl	%eax, (%esp)	 # D.6710,
	call	_malloc	 #
	movl	$538, -124(%ebp)	 #, x.dtype
	movl	%eax, -132(%ebp)	 # tmp1104, x.data
	jmp	L304	 #
	.p2align 4,,10
L450:
	movl	-468(%ebp), %eax	 # %sfp, D.6710
	addl	-424(%ebp), %eax	 # %sfp, D.6710
	cmpl	%eax, -488(%ebp)	 # D.6710, %sfp
	movl	-448(%ebp), %edx	 # %sfp, D.6712
	movl	%edx, -420(%ebp)	 # D.6712, %sfp
	jne	L279	 #,
	jmp	L280	 #
	.p2align 4,,10
L451:
	movl	-468(%ebp), %ecx	 # %sfp, D.6710
	addl	-424(%ebp), %ecx	 # %sfp, D.6710
	cmpl	%eax, %ecx	 # D.6710, D.6710
	jne	L300	 #,
	movl	-108(%ebp), %eax	 # x.dim[1].stride, D.6710
	movl	%eax, -452(%ebp)	 # D.6710, %sfp
	movl	-120(%ebp), %eax	 # MEM[(struct array2_real(kind=8) &)&x].dim[0].stride, D.6710
	movl	%eax, -448(%ebp)	 # D.6710, %sfp
	jmp	L301	 #
	.p2align 4,,10
L449:
	movl	-468(%ebp), %eax	 # %sfp, D.6710
	addl	-424(%ebp), %eax	 # %sfp, D.6710
	cmpl	%eax, -488(%ebp)	 # D.6710, %sfp
	movl	-440(%ebp), %esi	 # %sfp, D.6712
	movl	%esi, -420(%ebp)	 # D.6712, %sfp
	jne	L232	 #,
	jmp	L233	 #
	.p2align 4,,10
L252:
	movl	-468(%ebp), %ecx	 # %sfp, D.6710
	addl	-424(%ebp), %ecx	 # %sfp, D.6710
	movl	-100(%ebp), %eax	 # x.dim[1].ubound, D.6710
	cmpl	%eax, %ecx	 # D.6710, D.6710
	jne	L253	 #,
	movl	-108(%ebp), %eax	 # x.dim[1].stride, D.6710
	movl	%ecx, -464(%ebp)	 # D.6710, %sfp
	movl	%eax, -452(%ebp)	 # D.6710, %sfp
	movl	-120(%ebp), %eax	 # MEM[(struct array2_real(kind=8) &)&x].dim[0].stride, D.6710
	movl	%eax, -448(%ebp)	 # D.6710, %sfp
	jmp	L254	 #
	.p2align 4,,10
L352:
	fldz
	jmp	L267	 #
	.p2align 4,,10
L361:
	fldz
	jmp	L314	 #
L316:
	movl	-360(%ebp), %eax	 # MEM[(struct array1_real(kind=8) &)&w].dim[0].stride, D.6710
	movl	-384(%ebp), %edx	 # MEM[(struct array1_real(kind=8) &)&v].dim[0].stride, D.6710
	movl	-396(%ebp), %ecx	 # MEM[(struct array1_real(kind=8) &)&v].data, D.6711
	movl	-376(%ebp), %ebx	 # MEM[(struct array1_real(kind=8) &)&v].dim[0].ubound, D.6710
	movl	%eax, -424(%ebp)	 # D.6710, %sfp
	movl	-240(%ebp), %eax	 # d.data, D.6711
	movl	%edx, -460(%ebp)	 # D.6710, %sfp
	movl	%ecx, -456(%ebp)	 # D.6711, %sfp
	movl	%eax, -452(%ebp)	 # D.6711, %sfp
	movl	-276(%ebp), %eax	 # c.data, D.6711
	movl	%eax, -448(%ebp)	 # D.6711, %sfp
	movl	-312(%ebp), %eax	 # b.data, D.6711
	movl	%eax, -444(%ebp)	 # D.6711, %sfp
	movl	-348(%ebp), %eax	 # a.data, D.6711
	movl	%eax, -440(%ebp)	 # D.6711, %sfp
	movl	-352(%ebp), %eax	 # MEM[(struct array1_real(kind=8) &)&w].dim[0].ubound, D.6710
	movl	%eax, -436(%ebp)	 # D.6710, %sfp
	movl	-356(%ebp), %eax	 # MEM[(struct array1_real(kind=8) &)&w].dim[0].lbound, D.6710
	movl	%eax, -432(%ebp)	 # D.6710, %sfp
	movl	-380(%ebp), %eax	 # MEM[(struct array1_real(kind=8) &)&v].dim[0].lbound, D.6710
	movl	%eax, -428(%ebp)	 # D.6710, %sfp
	leal	-396(%ebp), %eax	 #, tmp1085
	movl	%eax, (%esp)	 # tmp1085,
	call	___utils_MOD_std	 #
	movl	-460(%ebp), %edx	 # %sfp, D.6710
	movl	-420(%ebp), %esi	 # %sfp, D.6711
	movl	-456(%ebp), %ecx	 # %sfp, D.6711
	testl	%edx, %edx	 # D.6710
	jne	L318	 #,
L448:
	movl	$1, %edx	 #, D.6710
L318:
	movl	%ebx, %eax	 # D.6710, D.6710
	subl	-428(%ebp), %eax	 # %sfp, D.6710
	addl	$1, %eax	 #, ubound.26
	testl	%eax, %eax	 # ubound.26
	jle	L363	 #,
	fldz
	leal	0(,%edx,8), %ebx	 #, D.6709
	xorl	%edx, %edx	 # ivtmp.391
	.p2align 4,,10
L320:
	addl	$1, %edx	 #, ivtmp.391
	faddl	(%ecx)	 # MEM[base: _937, offset: 0B]
	addl	%ebx, %ecx	 # D.6709, ivtmp.394
	cmpl	%eax, %edx	 # ubound.26, ivtmp.391
	jne	L320	 #,
L319:
	cltd
	notl	%edx	 # tmp1087
	andl	%edx, %eax	 # tmp1087, D.6710
	movl	%eax, -420(%ebp)	 # D.6710, %sfp
	movl	12(%ebp), %eax	 # s1, s1
	fildl	-420(%ebp)	 # %sfp
	fdivrp	%st, %st(1)	 #,
	fdivrp	%st, %st(1)	 #,
	fstpl	(%eax)	 # *s1_922(D)
	leal	-372(%ebp), %eax	 #, tmp1091
	movl	%eax, (%esp)	 # tmp1091,
	call	___utils_MOD_std	 #
	movl	-424(%ebp), %eax	 # %sfp,
	testl	%eax, %eax	 #
	jne	L321	 #,
	movl	$1, -424(%ebp)	 #, %sfp
L321:
	movl	-436(%ebp), %ecx	 # %sfp, D.6710
	subl	-432(%ebp), %ecx	 # %sfp, D.6710
	addl	$1, %ecx	 #, ubound.26
	testl	%ecx, %ecx	 # ubound.26
	jle	L364	 #,
	movl	-424(%ebp), %ebx	 # %sfp, D.6709
	fldz
	movl	%edi, %edx	 # D.6711, ivtmp.389
	xorl	%eax, %eax	 # ivtmp.386
	sall	$3, %ebx	 #, D.6709
	.p2align 4,,10
L323:
	addl	$1, %eax	 #, ivtmp.386
	faddl	(%edx)	 # MEM[base: _1108, offset: 0B]
	addl	%ebx, %edx	 # D.6709, ivtmp.389
	cmpl	%ecx, %eax	 # ubound.26, ivtmp.386
	jne	L323	 #,
L322:
	movl	%ecx, %eax	 # ubound.26, tmp1093
	sarl	$31, %eax	 #, tmp1093
	notl	%eax	 # tmp1093
	andl	%ecx, %eax	 # ubound.26, D.6710
	testl	%esi, %esi	 # D.6711
	movl	%eax, -420(%ebp)	 # D.6710, %sfp
	movl	16(%ebp), %eax	 # s2, s2
	fildl	-420(%ebp)	 # %sfp
	fdivrp	%st, %st(1)	 #,
	fdivrp	%st, %st(1)	 #,
	fstpl	(%eax)	 # *s2_927(D)
	je	L324	 #,
	movl	%esi, (%esp)	 # D.6711,
	call	_free	 #
	movl	-372(%ebp), %edi	 # w.data, D.6711
	movl	$0, -132(%ebp)	 #, x.data
	testl	%edi, %edi	 # D.6711
	je	L325	 #,
L341:
	movl	%edi, (%esp)	 # D.6711,
	call	_free	 #
L325:
	movl	-396(%ebp), %eax	 # v.data, D.6712
	movl	$0, -372(%ebp)	 #, w.data
	testl	%eax, %eax	 # D.6712
	je	L338	 #,
	movl	%eax, (%esp)	 # D.6712,
	call	_free	 #
L338:
	movl	-416(%ebp), %eax	 # %sfp, D.6712
	movl	%eax, (%esp)	 # D.6712,
	call	_free	 #
	movl	-412(%ebp), %eax	 # %sfp, D.6712
	movl	%eax, (%esp)	 # D.6712,
	call	_free	 #
	movl	-452(%ebp), %eax	 # %sfp, D.6711
	testl	%eax, %eax	 # D.6711
	je	L326	 #,
	movl	%eax, (%esp)	 # D.6711,
	call	_free	 #
L326:
	movl	-448(%ebp), %eax	 # %sfp, D.6711
	testl	%eax, %eax	 # D.6711
	je	L327	 #,
	movl	%eax, (%esp)	 # D.6711,
	call	_free	 #
L327:
	movl	-444(%ebp), %eax	 # %sfp, D.6711
	testl	%eax, %eax	 # D.6711
	je	L328	 #,
	movl	%eax, (%esp)	 # D.6711,
	call	_free	 #
L328:
	movl	-440(%ebp), %eax	 # %sfp, D.6711
	testl	%eax, %eax	 # D.6711
	je	L170	 #,
	movl	%eax, (%esp)	 # D.6711,
	call	_free	 #
L170:
	leal	-12(%ebp), %esp	 #,
	popl	%ebx	 #
	.cfi_remember_state
	.cfi_restore 3
	popl	%esi	 #
	.cfi_restore 6
	popl	%edi	 #
	.cfi_restore 7
	popl	%ebp	 #
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
L180:
	.cfi_restore_state
	movl	%eax, -456(%ebp)	 # tmp743, %sfp
	leal	-396(%ebp), %eax	 #, tmp1106
	movl	%eax, (%esp)	 # tmp1106,
	call	___utils_MOD_std	 #
	movl	-420(%ebp), %eax	 # %sfp, D.6712
	movl	-456(%ebp), %edx	 # %sfp, tmp743
	movl	%edi, %ecx	 # D.6712, D.6711
	movl	%ebx, -436(%ebp)	 # D.6710, %sfp
	movl	%eax, -440(%ebp)	 # D.6712, %sfp
	movl	-424(%ebp), %eax	 # %sfp, D.6712
	movl	%edx, %edi	 # tmp743, D.6711
	movl	$1, -424(%ebp)	 #, %sfp
	movl	%eax, -444(%ebp)	 # D.6712, %sfp
	movl	-428(%ebp), %eax	 # %sfp, D.6712
	movl	$1, -428(%ebp)	 #, %sfp
	movl	%eax, -448(%ebp)	 # D.6712, %sfp
	movl	-432(%ebp), %eax	 # %sfp, D.6712
	movl	$1, -432(%ebp)	 #, %sfp
	movl	%eax, -452(%ebp)	 # D.6712, %sfp
	jmp	L448	 #
L324:
	movl	$0, -132(%ebp)	 #, x.data
	jmp	L341	 #
L364:
	fldz
	jmp	L322	 #
L363:
	fldz
	jmp	L319	 #
L172:
	movl	$LC12, (%esp)	 #,
	call	__gfortran_os_error	 #
L173:
	testl	%ebx, %ebx	 # D.6710
	jle	L330	 #,
	xorl	%ecx, %ecx	 # D.6707
	xorl	%eax, %eax	 # D.6707
	jmp	L175	 #
L178:
	movl	$LC8, (%esp)	 #,
	call	__gfortran_runtime_error	 #
L330:
	movl	$1, (%esp)	 #,
	call	_malloc	 #
	testl	%eax, %eax	 # D.6712
	movl	%eax, %edi	 #, D.6712
	movl	%eax, -396(%ebp)	 # D.6712, v.data
	je	L172	 #,
	movl	$537, -388(%ebp)	 #, v.dtype
	movl	$1, -380(%ebp)	 #, v.dim[0].lbound
	xorl	%eax, %eax	 # D.6707
	movl	%ebx, -376(%ebp)	 # D.6710, v.dim[0].ubound
	movl	$1, -384(%ebp)	 #, v.dim[0].stride
	movl	$-1, -392(%ebp)	 #, v.offset
	jmp	L339	 #
	.cfi_endproc
LFE10:
	.section	.text.unlikely,"x"
LCOLDE26:
	.text
LHOTE26:
	.section	.text.unlikely,"x"
LCOLDB27:
	.text
LHOTB27:
	.p2align 4,,15
	.globl	___bench_MOD_pisum
	.def	___bench_MOD_pisum;	.scl	2;	.type	32;	.endef
___bench_MOD_pisum:
LFB11:
	.cfi_startproc
	fld1
	subl	$12, %esp	 #,
	.cfi_def_cfa_offset 16
	movl	$500, %ecx	 #, D.6786
	jmp	L458	 #
L462:
	fstp	%st(0)	 #
L458:
	fldz
	movl	$1, %edx	 #, k
	.p2align 4,,10
L457:
	movl	%edx, %eax	 # k, D.6784
	imull	%edx, %eax	 # k, D.6784
	addl	$1, %edx	 #, k
	cmpl	$10001, %edx	 #, k
	movl	%eax, 4(%esp)	 # D.6784, %sfp
	fildl	4(%esp)	 # %sfp
	fdivr	%st(2), %st	 #,
	faddp	%st, %st(1)	 #,
	jne	L457	 #,
	subl	$1, %ecx	 #, D.6786
	jne	L462	 #,
	fstp	%st(1)	 #
	addl	$12, %esp	 #,
	.cfi_def_cfa_offset 4
	ret
	.cfi_endproc
LFE11:
	.section	.text.unlikely,"x"
LCOLDE27:
	.text
LHOTE27:
	.section	.text.unlikely,"x"
LCOLDB28:
	.text
LHOTB28:
	.p2align 4,,15
	.globl	___bench_MOD_quicksort
	.def	___bench_MOD_quicksort;	.scl	2;	.type	32;	.endef
___bench_MOD_quicksort:
LFB12:
	.cfi_startproc
	pushl	%ebp	 #
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	pushl	%edi	 #
	.cfi_def_cfa_offset 12
	.cfi_offset 7, -12
	pushl	%esi	 #
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pushl	%ebx	 #
	.cfi_def_cfa_offset 20
	.cfi_offset 3, -20
	subl	$108, %esp	 #,
	.cfi_def_cfa_offset 128
	movl	128(%esp), %eax	 # a, a
	movl	12(%eax), %ebp	 # *a_10(D).dim[0].stride, D.6813
	testl	%ebp, %ebp	 # D.6813
	je	L481	 #,
	movl	%ebp, %edx	 # D.6813, D.6813
	negl	%edx	 # D.6813
	movl	%edx, 56(%esp)	 # D.6813, %sfp
L464:
	movl	(%eax), %edx	 # *a_10(D).data, a.0
	movl	%edx, %ecx	 # a.0, a.0
	movl	%edx, 36(%esp)	 # a.0, %sfp
	movl	20(%eax), %edx	 # *a_10(D).dim[0].ubound, *a_10(D).dim[0].ubound
	subl	16(%eax), %edx	 # *a_10(D).dim[0].lbound, D.6813
	movl	%edx, %eax	 # D.6813, D.6813
	movl	136(%esp), %edx	 # hi, tmp181
	addl	$1, %eax	 #, ubound.107
	movl	%eax, 60(%esp)	 # ubound.107, %sfp
	movl	132(%esp), %eax	 # lo0, lo0
	movl	(%edx), %edx	 # *hi_25(D), D.6813
	movl	(%eax), %eax	 # *lo0_21(D), i
	movl	%edx, 48(%esp)	 # D.6813, %sfp
	movl	%edx, 64(%esp)	 # D.6813, j
	cmpl	%edx, %eax	 # D.6813, i
	movl	%eax, 32(%esp)	 # i, %sfp
	movl	%eax, 68(%esp)	 # i, lo
	movl	%eax, %ebx	 # i, i
	jge	L463	 #,
	leal	0(,%ebp,8), %eax	 #, tmp133
	movl	%ebx, 52(%esp)	 # i, %sfp
	movl	%ecx, %ebx	 # a.0, a.0
	negl	%eax	 # D.6814
	movl	%eax, %esi	 # D.6814, D.6814
	movl	%eax, 28(%esp)	 # D.6814, %sfp
	movl	%ecx, %eax	 # a.0, D.6815
	addl	%esi, %eax	 # D.6814, D.6815
	movl	%eax, 44(%esp)	 # D.6815, %sfp
L479:
	movl	48(%esp), %eax	 # %sfp, D.6813
	addl	32(%esp), %eax	 # %sfp, D.6813
	movl	%eax, %ecx	 # D.6813, tmp136
	shrl	$31, %ecx	 #, tmp136
	addl	%ecx, %eax	 # tmp136, tmp137
	sarl	%eax	 # D.6813
	imull	%ebp, %eax	 # D.6813, D.6813
	subl	%ebp, %eax	 # D.6813, D.6813
	fldl	(%ebx,%eax,8)	 # *a.0_14
	movl	64(%esp), %ebx	 # j, j_lsm.524
	jmp	L475	 #
	.p2align 4,,10
L496:
	fstp	%st(1)	 #
	fstp	%st(1)	 #
L475:
	movl	32(%esp), %eax	 # %sfp, i
	cmpl	%edx, %eax	 # D.6813, i
	jg	L492	 #,
L490:
	movl	%eax, %ecx	 # i, D.6813
	movl	36(%esp), %eax	 # %sfp, a.0
	imull	%ebp, %ecx	 # D.6813, D.6813
	movl	%ecx, %edi	 # D.6813, D.6813
	subl	%ebp, %edi	 # D.6813, D.6813
	fldl	(%eax,%edi,8)	 # *a.0_14
	fcom	%st(1)	 #
	fnstsw	%ax	 # tmp141
	sahf
	jnb	L489	 #,
	fstp	%st(0)	 #
	movl	%ebx, 40(%esp)	 # j_lsm.524, %sfp
	movl	44(%esp), %esi	 # %sfp, D.6815
	movl	32(%esp), %ebx	 # %sfp, i
	jmp	L472	 #
	.p2align 4,,10
L493:
	fstp	%st(0)	 #
L472:
	movl	%ecx, %edi	 # ivtmp.536, D.6813
	leal	(%ecx,%ebp), %ecx	 #, ivtmp.536
	addl	$1, %ebx	 #, i
	fldl	(%esi,%ecx,8)	 # MEM[base: _146, index: ivtmp.536_41, step: 8, offset: 0B]
	fcom	%st(1)	 #
	fnstsw	%ax	 # tmp144
	sahf
	jb	L493	 #,
	movl	%ebp, %esi	 # D.6813, D.6813
	movl	36(%esp), %eax	 # %sfp, a.0
	movl	%ebx, 32(%esp)	 # i, %sfp
	imull	%edx, %esi	 # D.6813, D.6813
	movl	40(%esp), %ebx	 # %sfp, j_lsm.524
	subl	%ebp, %esi	 # D.6813, D.6813
	fldl	(%eax,%esi,8)	 # *a.0_14
	fxch	%st(2)	 #
	fcom	%st(2)	 #
	fnstsw	%ax	 # tmp143
	sahf
	jnb	L494	 #,
	fstp	%st(2)	 #
	fxch	%st(1)	 #
	jmp	L470	 #
L497:
	fstp	%st(2)	 #
	fxch	%st(1)	 #
	.p2align 4,,10
L470:
	leal	-2(%edx), %eax	 #, D.6813
	leal	-1(%edx), %ecx	 #, ivtmp.526
	movl	36(%esp), %edx	 # %sfp, a.0
	movl	%edi, 40(%esp)	 # D.6813, %sfp
	imull	%ebp, %eax	 # D.6813, ivtmp.529
	leal	(%edx,%eax,8), %ebx	 #, ivtmp.531
	movl	%eax, %edi	 # ivtmp.529, ivtmp.529
	jmp	L473	 #
	.p2align 4,,10
L495:
	fstp	%st(1)	 #
L473:
	fldl	(%ebx)	 # MEM[base: _117, offset: 0B]
	fxch	%st(1)	 #
	movl	%edi, %esi	 # ivtmp.529, D.6813
	addl	28(%esp), %ebx	 # %sfp, ivtmp.531
	subl	%ebp, %edi	 # D.6813, ivtmp.529
	movl	%ecx, %edx	 # ivtmp.526, D.6813
	leal	-1(%ecx), %ecx	 #, ivtmp.526
	fcom	%st(1)	 #
	fnstsw	%ax	 # tmp147
	sahf
	jb	L495	 #,
	movl	40(%esp), %edi	 # %sfp, D.6813
	movl	%edx, %ebx	 # D.6813, j_lsm.524
	jmp	L469	 #
L494:
	fxch	%st(1)	 #
	fxch	%st(2)	 #
	fxch	%st(1)	 #
	.p2align 4,,10
L469:
	cmpl	32(%esp), %edx	 # %sfp, D.6813
	jl	L496	 #,
	fxch	%st(1)	 #
L480:
	movl	36(%esp), %eax	 # %sfp, a.0
	addl	$1, 32(%esp)	 #, %sfp
	subl	$1, %edx	 #, D.6813
	movl	%edx, %ebx	 # D.6813, j_lsm.524
	fstpl	(%eax,%edi,8)	 # *a.0_14
	fxch	%st(1)	 #
	fstpl	(%eax,%esi,8)	 # *a.0_14
	movl	32(%esp), %eax	 # %sfp, i
	cmpl	%edx, %eax	 # D.6813, i
	jle	L490	 #,
	fstp	%st(0)	 #
	jmp	L466	 #
	.p2align 4,,10
L492:
	fstp	%st(0)	 #
L466:
	cmpl	%edx, 52(%esp)	 # D.6813, %sfp
	movl	%ebx, 64(%esp)	 # j_lsm.524, j
	jl	L491	 #,
L477:
	movl	48(%esp), %eax	 # %sfp, D.6813
	movl	32(%esp), %ebx	 # %sfp, i
	cmpl	%eax, %ebx	 # D.6813, i
	movl	%ebx, 68(%esp)	 # i, lo
	movl	%eax, %edx	 # D.6813, D.6813
	movl	%eax, 64(%esp)	 # D.6813, j
	jge	L463	 #,
	movl	%ebx, 52(%esp)	 # i, %sfp
	movl	36(%esp), %ebx	 # %sfp, a.0
	jmp	L479	 #
L489:
	movl	%ebp, %esi	 # D.6813, D.6813
	movl	36(%esp), %eax	 # %sfp, a.0
	imull	%edx, %esi	 # D.6813, D.6813
	subl	%ebp, %esi	 # D.6813, D.6813
	fldl	(%eax,%esi,8)	 # *a.0_14
	fxch	%st(2)	 #
	fcom	%st(2)	 #
	fnstsw	%ax	 # tmp152
	sahf
	jb	L497	 #,
	fxch	%st(1)	 #
	fxch	%st(2)	 #
	jmp	L480	 #
L491:
	movl	60(%esp), %eax	 # %sfp, ubound.107
	movl	$537, 80(%esp)	 #, parm.111.dtype
	movl	$1, 88(%esp)	 #, parm.111.dim[0].lbound
	movl	%ebp, 84(%esp)	 # D.6813, parm.111.dim[0].stride
	movl	%eax, 92(%esp)	 # ubound.107, parm.111.dim[0].ubound
	movl	36(%esp), %eax	 # %sfp, a.0
	movl	%eax, 72(%esp)	 # a.0, parm.111.data
	movl	56(%esp), %eax	 # %sfp, D.6813
	movl	%eax, 76(%esp)	 # D.6813, parm.111.offset
	leal	64(%esp), %eax	 #, tmp213
	movl	%eax, 8(%esp)	 # tmp213,
	leal	68(%esp), %eax	 #, tmp214
	movl	%eax, 4(%esp)	 # tmp214,
	leal	72(%esp), %eax	 #, tmp150
	movl	%eax, (%esp)	 # tmp150,
	call	___bench_MOD_quicksort	 #
	movl	136(%esp), %eax	 # hi, tmp215
	movl	(%eax), %eax	 # *hi_25(D), D.6813
	movl	%eax, 48(%esp)	 # D.6813, %sfp
	jmp	L477	 #
L463:
	addl	$108, %esp	 #,
	.cfi_remember_state
	.cfi_def_cfa_offset 20
	popl	%ebx	 #
	.cfi_restore 3
	.cfi_def_cfa_offset 16
	popl	%esi	 #
	.cfi_restore 6
	.cfi_def_cfa_offset 12
	popl	%edi	 #
	.cfi_restore 7
	.cfi_def_cfa_offset 8
	popl	%ebp	 #
	.cfi_restore 5
	.cfi_def_cfa_offset 4
	ret
L481:
	.cfi_restore_state
	movl	$-1, 56(%esp)	 #, %sfp
	movl	$1, %ebp	 #, D.6813
	jmp	L464	 #
	.cfi_endproc
LFE12:
	.section	.text.unlikely,"x"
LCOLDE28:
	.text
LHOTE28:
	.section	.text.unlikely,"x"
LCOLDB31:
	.text
LHOTB31:
	.p2align 4,,15
	.globl	___bench_MOD_mandelperf
	.def	___bench_MOD_mandelperf;	.scl	2;	.type	32;	.endef
___bench_MOD_mandelperf:
LFB13:
	.cfi_startproc
	pushl	%ebx	 #
	.cfi_def_cfa_offset 8
	.cfi_offset 3, -8
	movl	$-20, %ebx	 #, re
	subl	$24, %esp	 #,
	.cfi_def_cfa_offset 32
	movl	$0, 20(%esp)	 #, mandel_sum
L504:
	movl	%ebx, 4(%esp)	 # re, %sfp
	movl	$-10, %ecx	 #, im
	fildl	4(%esp)	 # %sfp
	fmull	LC29	 #
	.p2align 4,,10
L503:
	movl	%ecx, 4(%esp)	 # im, %sfp
	movl	$1, %edx	 #, n
	fildl	4(%esp)	 # %sfp
	fmull	LC29	 #
	fld	%st(0)	 #
	fld	%st(2)	 #
	flds	LC30	 #
	jmp	L502	 #
	.p2align 4,,10
L509:
	fxch	%st(4)	 #
	fmulp	%st, %st(3)	 #,
	fxch	%st(2)	 #
	addl	$1, %edx	 #, n
	cmpl	$81, %edx	 #, n
	fadd	%st(0), %st	 #,
	fxch	%st(2)	 #
	fadd	%st(5), %st	 #,
	fsubp	%st, %st(3)	 #,
	fxch	%st(1)	 #
	fadd	%st(3), %st	 #,
	je	L511	 #,
	fxch	%st(2)	 #
	fxch	%st(1)	 #
L502:
	fld	%st(1)	 #
	fmul	%st(2), %st	 #,
	fld	%st(3)	 #
	fmul	%st(4), %st	 #,
	fld	%st(0)	 #
	fadd	%st(2), %st	 #,
	fcomp	%st(3)	 #
	fnstsw	%ax	 # tmp115
	sahf
	jbe	L509	 #,
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	subl	$1, %edx	 #, D.6855
L501:
	movl	20(%esp), %eax	 # mandel_sum, D.6855
	addl	$1, %ecx	 #, im
	addl	%eax, %edx	 # D.6855, D.6855
	cmpl	$11, %ecx	 #, im
	movl	%edx, 20(%esp)	 # D.6855, mandel_sum
	jne	L503	 #,
	fstp	%st(0)	 #
	addl	$1, %ebx	 #, re
	cmpl	$6, %ebx	 #, re
	jne	L504	 #,
	movl	20(%esp), %eax	 # mandel_sum, D.6855
	addl	$24, %esp	 #,
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	popl	%ebx	 #
	.cfi_restore 3
	.cfi_def_cfa_offset 4
	ret
	.p2align 4,,10
L511:
	.cfi_restore_state
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	movl	$80, %edx	 #, D.6855
	jmp	L501	 #
	.cfi_endproc
LFE13:
	.section	.text.unlikely,"x"
LCOLDE31:
	.text
LHOTE31:
	.section .rdata,"dr"
LC32:
	.ascii "parse_int 1"
LC33:
	.ascii "parse_int 2"
	.section	.text.unlikely,"x"
LCOLDB34:
	.text
LHOTB34:
	.p2align 4,,15
	.globl	___bench_MOD_parse_int
	.def	___bench_MOD_parse_int;	.scl	2;	.type	32;	.endef
___bench_MOD_parse_int:
LFB15:
	.cfi_startproc
	pushl	%edi	 #
	.cfi_def_cfa_offset 8
	.cfi_offset 7, -8
	pushl	%esi	 #
	.cfi_def_cfa_offset 12
	.cfi_offset 6, -12
	pushl	%ebx	 #
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	subl	$16, %esp	 #,
	.cfi_def_cfa_offset 32
	movl	40(%esp), %esi	 # _s, _s
	movl	36(%esp), %edi	 # base, base
	testl	%esi, %esi	 # _s
	jle	L520	 #,
	movl	32(%esp), %ebx	 # s, ivtmp.567
	xorl	%eax, %eax	 # n
	addl	%ebx, %esi	 # ivtmp.567, D.6882
	jmp	L519	 #
	.p2align 4,,10
L524:
	leal	-55(%ecx), %edx	 #, d
L515:
	movl	(%edi), %ecx	 # *base_22(D), D.6883
	cmpl	%ecx, %edx	 # D.6883, d
	jge	L523	 #,
	imull	%eax, %ecx	 # n, D.6883
	addl	$1, %ebx	 #, ivtmp.567
	cmpl	%esi, %ebx	 # D.6882, ivtmp.567
	leal	(%edx,%ecx), %eax	 #, n
	je	L513	 #,
L519:
	movzbl	(%ebx), %ecx	 # MEM[base: _21, offset: 0], D.6882
	leal	-48(%ecx), %edx	 #, D.6882
	cmpl	$9, %edx	 #, D.6882
	jbe	L515	 #,
	leal	-65(%ecx), %edx	 #, D.6882
	cmpl	$25, %edx	 #, D.6882
	jbe	L524	 #,
	leal	-97(%ecx), %edx	 #, D.6882
	cmpl	$25, %edx	 #, D.6882
	ja	L517	 #,
	leal	-87(%ecx), %edx	 #, d
	jmp	L515	 #
L520:
	xorl	%eax, %eax	 # n
L513:
	addl	$16, %esp	 #,
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	popl	%ebx	 #
	.cfi_restore 3
	.cfi_def_cfa_offset 12
	popl	%esi	 #
	.cfi_restore 6
	.cfi_def_cfa_offset 8
	popl	%edi	 #
	.cfi_restore 7
	.cfi_def_cfa_offset 4
	ret
L523:
	.cfi_restore_state
	movl	$11, 4(%esp)	 #,
	movl	$LC33, (%esp)	 #,
	call	___utils_MOD_stop_error	 #
L517:
	movl	$11, 4(%esp)	 #,
	movl	$LC32, (%esp)	 #,
	call	___utils_MOD_stop_error	 #
	.cfi_endproc
LFE15:
	.section	.text.unlikely,"x"
LCOLDE34:
	.text
LHOTE34:
	.section	.text.unlikely,"x"
LCOLDB35:
	.text
LHOTB35:
	.p2align 4,,15
	.globl	___bench_MOD_fib
	.def	___bench_MOD_fib;	.scl	2;	.type	32;	.endef
___bench_MOD_fib:
LFB16:
	.cfi_startproc
	pushl	%ebp	 #
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	pushl	%edi	 #
	.cfi_def_cfa_offset 12
	.cfi_offset 7, -12
	pushl	%esi	 #
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pushl	%ebx	 #
	.cfi_def_cfa_offset 20
	.cfi_offset 3, -20
	subl	$60, %esp	 #,
	.cfi_def_cfa_offset 80
	movl	80(%esp), %eax	 # n, n
	movl	(%eax), %ebx	 # *n_4(D), r
	cmpl	$1, %ebx	 #, r
	jle	L526	 #,
	cmpl	$2, %ebx	 #, r
	leal	-2(%ebx), %ebp	 #, D.4186
	je	L556	 #,
	leal	-3(%ebx), %eax	 #, D.6898
	cmpl	$1, %ebp	 #, D.4186
	movl	$1, %edx	 #, D.6903
	movl	%eax, 20(%esp)	 # D.6898, %sfp
	movl	%eax, %edi	 # D.6898, D.6902
	je	L528	 #,
	cmpl	$1, %eax	 #, D.6898
	leal	-4(%ebx), %esi	 #, D.6912
	movl	%eax, %edx	 # D.6898, D.6913
	jle	L529	 #,
	cmpl	$1, %esi	 #, D.6912
	leal	-5(%ebx), %ecx	 #, D.6922
	movl	%esi, %edx	 # D.6912, D.6923
	jle	L530	 #,
	leal	-6(%ebx), %eax	 #, tmp176
	movl	%ecx, 44(%esp)	 # D.6922, D.6933
	movl	%ecx, 28(%esp)	 # D.6922, %sfp
	movl	%eax, 40(%esp)	 # tmp176, D.6932
	leal	44(%esp), %eax	 #, tmp177
	movl	%eax, (%esp)	 # tmp177,
	call	___bench_MOD_fib	 #
	movl	%eax, 24(%esp)	 #, %sfp
	leal	40(%esp), %eax	 #, tmp178
	movl	%eax, (%esp)	 # tmp178,
	call	___bench_MOD_fib	 #
	movl	24(%esp), %edx	 # %sfp, D.6923
	movl	28(%esp), %ecx	 # %sfp, D.6922
	addl	%eax, %edx	 # D.7048, D.6923
L530:
	cmpl	$1, %ecx	 #, D.6922
	jle	L531	 #,
	leal	-6(%ebx), %eax	 #, tmp179
	movl	%edx, 28(%esp)	 # D.6923, %sfp
	movl	%eax, 44(%esp)	 # tmp179, D.6928
	leal	-7(%ebx), %eax	 #, tmp180
	movl	%eax, 40(%esp)	 # tmp180, D.6927
	leal	44(%esp), %eax	 #, tmp181
	movl	%eax, (%esp)	 # tmp181,
	call	___bench_MOD_fib	 #
	movl	%eax, 24(%esp)	 #, %sfp
	leal	40(%esp), %eax	 #, tmp182
	movl	%eax, (%esp)	 # tmp182,
	call	___bench_MOD_fib	 #
	movl	24(%esp), %ecx	 # %sfp, D.6922
	movl	28(%esp), %edx	 # %sfp, D.6923
	addl	%eax, %ecx	 # D.7048, D.6922
L531:
	addl	%ecx, %edx	 # D.6922, D.6913
L529:
	cmpl	$1, %esi	 #, D.6912
	jle	L532	 #,
	leal	-5(%ebx), %ecx	 #, D.6918
	leal	-6(%ebx), %esi	 #, D.6917
	cmpl	$1, %ecx	 #, D.6918
	jle	L533	 #,
	leal	-7(%ebx), %eax	 #, tmp183
	movl	%edx, 28(%esp)	 # D.6913, %sfp
	movl	%esi, 44(%esp)	 # D.6917, D.6943
	movl	%eax, 40(%esp)	 # tmp183, D.6942
	leal	44(%esp), %eax	 #, tmp184
	movl	%eax, (%esp)	 # tmp184,
	call	___bench_MOD_fib	 #
	movl	%eax, 24(%esp)	 #, %sfp
	leal	40(%esp), %eax	 #, tmp185
	movl	%eax, (%esp)	 # tmp185,
	call	___bench_MOD_fib	 #
	movl	24(%esp), %ecx	 # %sfp, D.6918
	movl	28(%esp), %edx	 # %sfp, D.6913
	addl	%eax, %ecx	 # D.7048, D.6918
L533:
	cmpl	$1, %esi	 #, D.6917
	jle	L534	 #,
	leal	-7(%ebx), %eax	 #, tmp186
	movl	%edx, 28(%esp)	 # D.6913, %sfp
	movl	%ecx, 24(%esp)	 # D.6918, %sfp
	movl	%eax, 44(%esp)	 # tmp186, D.6938
	leal	-8(%ebx), %eax	 #, tmp187
	movl	%eax, 40(%esp)	 # tmp187, D.6937
	leal	44(%esp), %eax	 #, tmp188
	movl	%eax, (%esp)	 # tmp188,
	call	___bench_MOD_fib	 #
	movl	%eax, %esi	 #, D.7048
	leal	40(%esp), %eax	 #, tmp189
	movl	%eax, (%esp)	 # tmp189,
	call	___bench_MOD_fib	 #
	movl	28(%esp), %edx	 # %sfp, D.6913
	movl	24(%esp), %ecx	 # %sfp, D.6918
	addl	%eax, %esi	 # D.7048, D.6917
L534:
	addl	%ecx, %esi	 # D.6918, D.6912
L532:
	addl	%esi, %edx	 # D.6912, D.6903
L528:
	cmpl	$1, 20(%esp)	 #, %sfp
	jle	L535	 #,
	leal	-4(%ebx), %esi	 #, D.6908
	leal	-5(%ebx), %edi	 #, D.6907
	cmpl	$1, %esi	 #, D.6908
	jle	L536	 #,
	cmpl	$1, %edi	 #, D.6907
	leal	-6(%ebx), %esi	 #, D.6952
	movl	%edi, %ecx	 # D.6907, D.6953
	jle	L537	 #,
	leal	-7(%ebx), %eax	 #, tmp190
	movl	%edx, 28(%esp)	 # D.6903, %sfp
	movl	%esi, 44(%esp)	 # D.6952, D.6963
	movl	%eax, 40(%esp)	 # tmp190, D.6962
	leal	44(%esp), %eax	 #, tmp191
	movl	%eax, (%esp)	 # tmp191,
	call	___bench_MOD_fib	 #
	movl	%eax, 24(%esp)	 #, %sfp
	leal	40(%esp), %eax	 #, tmp192
	movl	%eax, (%esp)	 # tmp192,
	call	___bench_MOD_fib	 #
	movl	24(%esp), %ecx	 # %sfp, D.6953
	movl	28(%esp), %edx	 # %sfp, D.6903
	addl	%eax, %ecx	 # D.7048, D.6953
L537:
	cmpl	$1, %esi	 #, D.6952
	jle	L538	 #,
	leal	-7(%ebx), %eax	 #, tmp193
	movl	%ecx, 28(%esp)	 # D.6953, %sfp
	movl	%edx, 24(%esp)	 # D.6903, %sfp
	movl	%eax, 44(%esp)	 # tmp193, D.6958
	leal	-8(%ebx), %eax	 #, tmp194
	movl	%eax, 40(%esp)	 # tmp194, D.6957
	leal	44(%esp), %eax	 #, tmp195
	movl	%eax, (%esp)	 # tmp195,
	call	___bench_MOD_fib	 #
	movl	%eax, %esi	 #, D.7048
	leal	40(%esp), %eax	 #, tmp196
	movl	%eax, (%esp)	 # tmp196,
	call	___bench_MOD_fib	 #
	movl	28(%esp), %ecx	 # %sfp, D.6953
	movl	24(%esp), %edx	 # %sfp, D.6903
	addl	%eax, %esi	 # D.7048, D.6952
L538:
	addl	%ecx, %esi	 # D.6953, D.6908
L536:
	cmpl	$1, %edi	 #, D.6907
	jle	L539	 #,
	leal	-6(%ebx), %ecx	 #, D.6948
	leal	-7(%ebx), %edi	 #, D.6947
	cmpl	$1, %ecx	 #, D.6948
	jle	L540	 #,
	leal	-8(%ebx), %eax	 #, tmp197
	movl	%edx, 28(%esp)	 # D.6903, %sfp
	movl	%edi, 44(%esp)	 # D.6947, D.6973
	movl	%eax, 40(%esp)	 # tmp197, D.6972
	leal	44(%esp), %eax	 #, tmp198
	movl	%eax, (%esp)	 # tmp198,
	call	___bench_MOD_fib	 #
	movl	%eax, 24(%esp)	 #, %sfp
	leal	40(%esp), %eax	 #, tmp199
	movl	%eax, (%esp)	 # tmp199,
	call	___bench_MOD_fib	 #
	movl	24(%esp), %ecx	 # %sfp, D.6948
	movl	28(%esp), %edx	 # %sfp, D.6903
	addl	%eax, %ecx	 # D.7048, D.6948
L540:
	cmpl	$1, %edi	 #, D.6947
	jle	L541	 #,
	leal	-8(%ebx), %eax	 #, tmp200
	movl	%ecx, 28(%esp)	 # D.6948, %sfp
	movl	%edx, 24(%esp)	 # D.6903, %sfp
	movl	%eax, 44(%esp)	 # tmp200, D.6968
	leal	-9(%ebx), %eax	 #, tmp201
	movl	%eax, 40(%esp)	 # tmp201, D.6967
	leal	44(%esp), %eax	 #, tmp202
	movl	%eax, (%esp)	 # tmp202,
	call	___bench_MOD_fib	 #
	movl	%eax, %edi	 #, D.7048
	leal	40(%esp), %eax	 #, tmp203
	movl	%eax, (%esp)	 # tmp203,
	call	___bench_MOD_fib	 #
	movl	28(%esp), %ecx	 # %sfp, D.6948
	movl	24(%esp), %edx	 # %sfp, D.6903
	addl	%eax, %edi	 # D.7048, D.6947
L541:
	addl	%ecx, %edi	 # D.6948, D.6907
L539:
	addl	%esi, %edi	 # D.6908, D.6902
L535:
	cmpl	$1, %ebp	 #, D.4186
	leal	(%edi,%edx), %esi	 #, D.4185
	je	L527	 #,
	movl	20(%esp), %ebp	 # %sfp, D.6898
	leal	-4(%ebx), %edi	 #, D.6897
	cmpl	$1, %ebp	 #, D.6898
	jle	L542	 #,
	cmpl	$1, %edi	 #, D.6897
	leal	-5(%ebx), %edx	 #, D.6982
	movl	%edi, %ecx	 # D.6897, D.6983
	jle	L543	 #,
	cmpl	$1, %edx	 #, D.6982
	leal	-6(%ebx), %ecx	 #, D.6992
	movl	%edx, %ebp	 # D.6982, D.6993
	jle	L544	 #,
	leal	-7(%ebx), %eax	 #, tmp204
	movl	%edx, 24(%esp)	 # D.6982, %sfp
	movl	%ecx, 44(%esp)	 # D.6992, D.7003
	movl	%ecx, 20(%esp)	 # D.6992, %sfp
	movl	%eax, 40(%esp)	 # tmp204, D.7002
	leal	44(%esp), %eax	 #, tmp205
	movl	%eax, (%esp)	 # tmp205,
	call	___bench_MOD_fib	 #
	movl	%eax, %ebp	 #, D.7048
	leal	40(%esp), %eax	 #, tmp206
	movl	%eax, (%esp)	 # tmp206,
	call	___bench_MOD_fib	 #
	movl	24(%esp), %edx	 # %sfp, D.6982
	movl	20(%esp), %ecx	 # %sfp, D.6992
	addl	%eax, %ebp	 # D.7048, D.6993
L544:
	cmpl	$1, %ecx	 #, D.6992
	jle	L545	 #,
	leal	-7(%ebx), %eax	 #, tmp207
	movl	%edx, 24(%esp)	 # D.6982, %sfp
	movl	%eax, 44(%esp)	 # tmp207, D.6998
	leal	-8(%ebx), %eax	 #, tmp208
	movl	%eax, 40(%esp)	 # tmp208, D.6997
	leal	44(%esp), %eax	 #, tmp209
	movl	%eax, (%esp)	 # tmp209,
	call	___bench_MOD_fib	 #
	movl	%eax, 20(%esp)	 #, %sfp
	leal	40(%esp), %eax	 #, tmp210
	movl	%eax, (%esp)	 # tmp210,
	call	___bench_MOD_fib	 #
	movl	20(%esp), %ecx	 # %sfp, D.6992
	movl	24(%esp), %edx	 # %sfp, D.6982
	addl	%eax, %ecx	 # D.7048, D.6992
L545:
	addl	%ebp, %ecx	 # D.6993, D.6983
L543:
	cmpl	$1, %edx	 #, D.6982
	jle	L546	 #,
	leal	-6(%ebx), %ebp	 #, D.6988
	leal	-7(%ebx), %edx	 #, D.6987
	cmpl	$1, %ebp	 #, D.6988
	jle	L547	 #,
	leal	-8(%ebx), %eax	 #, tmp211
	movl	%ecx, 24(%esp)	 # D.6983, %sfp
	movl	%edx, 44(%esp)	 # D.6987, D.7013
	movl	%edx, 20(%esp)	 # D.6987, %sfp
	movl	%eax, 40(%esp)	 # tmp211, D.7012
	leal	44(%esp), %eax	 #, tmp212
	movl	%eax, (%esp)	 # tmp212,
	call	___bench_MOD_fib	 #
	movl	%eax, %ebp	 #, D.7048
	leal	40(%esp), %eax	 #, tmp213
	movl	%eax, (%esp)	 # tmp213,
	call	___bench_MOD_fib	 #
	movl	24(%esp), %ecx	 # %sfp, D.6983
	movl	20(%esp), %edx	 # %sfp, D.6987
	addl	%eax, %ebp	 # D.7048, D.6988
L547:
	cmpl	$1, %edx	 #, D.6987
	jle	L548	 #,
	leal	-8(%ebx), %eax	 #, tmp214
	movl	%ecx, 24(%esp)	 # D.6983, %sfp
	movl	%eax, 44(%esp)	 # tmp214, D.7008
	leal	-9(%ebx), %eax	 #, tmp215
	movl	%eax, 40(%esp)	 # tmp215, D.7007
	leal	44(%esp), %eax	 #, tmp216
	movl	%eax, (%esp)	 # tmp216,
	call	___bench_MOD_fib	 #
	movl	%eax, 20(%esp)	 #, %sfp
	leal	40(%esp), %eax	 #, tmp217
	movl	%eax, (%esp)	 # tmp217,
	call	___bench_MOD_fib	 #
	movl	20(%esp), %edx	 # %sfp, D.6987
	movl	24(%esp), %ecx	 # %sfp, D.6983
	addl	%eax, %edx	 # D.7048, D.6987
L548:
	addl	%ebp, %edx	 # D.6988, D.6982
L546:
	leal	(%edx,%ecx), %ebp	 #, D.6898
L542:
	cmpl	$1, %edi	 #, D.6897
	jle	L549	 #,
	leal	-5(%ebx), %ecx	 #, D.6978
	leal	-6(%ebx), %edx	 #, D.6977
	cmpl	$1, %ecx	 #, D.6978
	jle	L550	 #,
	cmpl	$1, %edx	 #, D.6977
	leal	-7(%ebx), %ecx	 #, D.7022
	movl	%edx, %edi	 # D.6977, D.7023
	jle	L551	 #,
	leal	-8(%ebx), %eax	 #, tmp218
	movl	%edx, 24(%esp)	 # D.6977, %sfp
	movl	%ecx, 44(%esp)	 # D.7022, D.7033
	movl	%ecx, 20(%esp)	 # D.7022, %sfp
	movl	%eax, 40(%esp)	 # tmp218, D.7032
	leal	44(%esp), %eax	 #, tmp219
	movl	%eax, (%esp)	 # tmp219,
	call	___bench_MOD_fib	 #
	movl	%eax, %edi	 #, D.7048
	leal	40(%esp), %eax	 #, tmp220
	movl	%eax, (%esp)	 # tmp220,
	call	___bench_MOD_fib	 #
	movl	24(%esp), %edx	 # %sfp, D.6977
	movl	20(%esp), %ecx	 # %sfp, D.7022
	addl	%eax, %edi	 # D.7048, D.7023
L551:
	cmpl	$1, %ecx	 #, D.7022
	jle	L552	 #,
	leal	-8(%ebx), %eax	 #, tmp221
	movl	%edx, 24(%esp)	 # D.6977, %sfp
	movl	%eax, 44(%esp)	 # tmp221, D.7028
	leal	-9(%ebx), %eax	 #, tmp222
	movl	%eax, 40(%esp)	 # tmp222, D.7027
	leal	44(%esp), %eax	 #, tmp223
	movl	%eax, (%esp)	 # tmp223,
	call	___bench_MOD_fib	 #
	movl	%eax, 20(%esp)	 #, %sfp
	leal	40(%esp), %eax	 #, tmp224
	movl	%eax, (%esp)	 # tmp224,
	call	___bench_MOD_fib	 #
	movl	20(%esp), %ecx	 # %sfp, D.7022
	movl	24(%esp), %edx	 # %sfp, D.6977
	addl	%eax, %ecx	 # D.7048, D.7022
L552:
	addl	%edi, %ecx	 # D.7023, D.6978
L550:
	cmpl	$1, %edx	 #, D.6977
	jle	L553	 #,
	leal	-7(%ebx), %edi	 #, D.7018
	leal	-8(%ebx), %edx	 #, D.7017
	cmpl	$1, %edi	 #, D.7018
	jle	L554	 #,
	leal	-9(%ebx), %eax	 #, tmp225
	movl	%ecx, 24(%esp)	 # D.6978, %sfp
	movl	%edx, 44(%esp)	 # D.7017, D.7043
	movl	%edx, 20(%esp)	 # D.7017, %sfp
	movl	%eax, 40(%esp)	 # tmp225, D.7042
	leal	44(%esp), %eax	 #, tmp226
	movl	%eax, (%esp)	 # tmp226,
	call	___bench_MOD_fib	 #
	movl	%eax, %edi	 #, D.7048
	leal	40(%esp), %eax	 #, tmp227
	movl	%eax, (%esp)	 # tmp227,
	call	___bench_MOD_fib	 #
	movl	24(%esp), %ecx	 # %sfp, D.6978
	movl	20(%esp), %edx	 # %sfp, D.7017
	addl	%eax, %edi	 # D.7048, D.7018
L554:
	cmpl	$1, %edx	 #, D.7017
	jle	L555	 #,
	leal	-9(%ebx), %eax	 #, tmp228
	subl	$10, %ebx	 #, tmp229
	movl	%ecx, 20(%esp)	 # D.6978, %sfp
	movl	%ebx, 40(%esp)	 # tmp229, D.7037
	movl	%eax, 44(%esp)	 # tmp228, D.7038
	leal	44(%esp), %eax	 #, tmp230
	movl	%eax, (%esp)	 # tmp230,
	call	___bench_MOD_fib	 #
	movl	%eax, %ebx	 #, D.7048
	leal	40(%esp), %eax	 #, tmp231
	movl	%eax, (%esp)	 # tmp231,
	call	___bench_MOD_fib	 #
	movl	20(%esp), %ecx	 # %sfp, D.6978
	leal	(%ebx,%eax), %edx	 #, D.7017
L555:
	addl	%edi, %edx	 # D.7018, D.6977
L553:
	leal	(%edx,%ecx), %edi	 #, D.6897
L549:
	addl	%edi, %ebp	 # D.6897, D.4186
	leal	0(%ebp,%esi), %ebx	 #, r
L526:
	addl	$60, %esp	 #,
	.cfi_remember_state
	.cfi_def_cfa_offset 20
	movl	%ebx, %eax	 # r,
	popl	%ebx	 #
	.cfi_restore 3
	.cfi_def_cfa_offset 16
	popl	%esi	 #
	.cfi_restore 6
	.cfi_def_cfa_offset 12
	popl	%edi	 #
	.cfi_restore 7
	.cfi_def_cfa_offset 8
	popl	%ebp	 #
	.cfi_restore 5
	.cfi_def_cfa_offset 4
	ret
	.p2align 4,,10
L556:
	.cfi_restore_state
	movl	$1, %esi	 #, D.4185
	xorl	%ebp, %ebp	 # D.4186
L527:
	leal	0(%ebp,%esi), %ebx	 #, r
	addl	$60, %esp	 #,
	.cfi_def_cfa_offset 20
	movl	%ebx, %eax	 # r,
	popl	%ebx	 #
	.cfi_restore 3
	.cfi_def_cfa_offset 16
	popl	%esi	 #
	.cfi_restore 6
	.cfi_def_cfa_offset 12
	popl	%edi	 #
	.cfi_restore 7
	.cfi_def_cfa_offset 8
	popl	%ebp	 #
	.cfi_restore 5
	.cfi_def_cfa_offset 4
	ret
	.cfi_endproc
LFE16:
	.section	.text.unlikely,"x"
LCOLDE35:
	.text
LHOTE35:
	.section .rdata,"dr"
LC36:
	.ascii "('fortran,fib,',f0.6)"
LC39:
	.ascii "(z0)"
LC40:
	.ascii "('fortran,parse_int,',f0.6)"
LC41:
	.ascii "('fortran,mandel,',f0.6)"
LC42:
	.ascii "d\0"
LC43:
	.ascii "At line 373 of file test.f90\0"
	.align 4
LC44:
	.long	1
	.align 4
LC45:
	.ascii "Attempt to DEALLOCATE unallocated '%s'\0"
LC46:
	.ascii "At line 376 of file test.f90\0"
LC47:
	.ascii "('fortran,quicksort,',f0.6)"
LC50:
	.ascii "('fortran,pi_sum,',f0.6)"
	.align 4
LC51:
	.long	1000
	.align 4
LC52:
	.ascii "('fortran,rand_mat_stat,',f0.6)"
LC53:
	.ascii "('fortran,rand_mat_mul,',f0.6)"
	.section	.text.unlikely,"x"
LCOLDB54:
	.text
LHOTB54:
	.p2align 4,,15
	.def	_MAIN__;	.scl	3;	.type	32;	.endef
_MAIN__:
LFB17:
	.cfi_startproc
	pushl	%ebp	 #
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	pushl	%edi	 #
	.cfi_def_cfa_offset 12
	.cfi_offset 7, -12
	pushl	%esi	 #
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pushl	%ebx	 #
	.cfi_def_cfa_offset 20
	.cfi_offset 3, -20
	subl	$1052, %esp	 #,
	.cfi_def_cfa_offset 1072
	leal	616(%esp), %edi	 #, tmp931
	leal	688(%esp), %esi	 #, tmp933
	leal	608(%esp), %ebx	 #, tmp930
	movl	$0, 652(%esp)	 #, c.data
	movl	$0, 628(%esp)	 #, d.data
	call	___utils_MOD_init_random_seed	 #
	movl	$5, 560(%esp)	 #, %sfp
	movl	$-1, 544(%esp)	 #, %sfp
	movl	$2147483647, 548(%esp)	 #, %sfp
L573:
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	movl	$1000, %ebp	 #, D.7803
	movl	%edi, (%esp)	 # tmp931,
	call	__gfortran_system_clock_8	 #
	movl	616(%esp), %eax	 # count.112, t1
	movl	620(%esp), %edx	 # count.112, t1
	movl	%eax, 552(%esp)	 # t1, %sfp
	movl	%edx, 556(%esp)	 # t1, %sfp
	.p2align 4,,10
L570:
	movl	%esi, (%esp)	 # tmp933,
	movl	$13, 688(%esp)	 #, D.7115
	movl	$12, 608(%esp)	 #, D.7114
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 32(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 40(%esp)	 #, %sfp
	movl	$12, 688(%esp)	 #, D.7110
	movl	$11, 608(%esp)	 #, D.7109
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 16(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 24(%esp)	 #, %sfp
	movl	$12, 688(%esp)	 #, D.7125
	movl	$11, 608(%esp)	 #, D.7124
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 60(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 64(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7120
	movl	$10, 608(%esp)	 #, D.7119
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 48(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 56(%esp)	 #, %sfp
	movl	$12, 688(%esp)	 #, D.7145
	movl	$11, 608(%esp)	 #, D.7144
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 76(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 80(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7140
	movl	$10, 608(%esp)	 #, D.7139
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 68(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 72(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7155
	movl	$10, 608(%esp)	 #, D.7154
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 92(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	$10, 688(%esp)	 #, D.7150
	movl	%eax, 96(%esp)	 #, %sfp
	movl	$9, 608(%esp)	 #, D.7149
	movl	%esi, (%esp)	 # tmp933,
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 84(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 88(%esp)	 #, %sfp
	movl	$12, 688(%esp)	 #, D.7185
	movl	$11, 608(%esp)	 #, D.7184
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 108(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 112(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7180
	movl	$10, 608(%esp)	 #, D.7179
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 100(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 104(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7195
	movl	$10, 608(%esp)	 #, D.7194
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 124(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 128(%esp)	 #, %sfp
	movl	$10, 688(%esp)	 #, D.7190
	movl	$9, 608(%esp)	 #, D.7189
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 116(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 120(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7215
	movl	$10, 608(%esp)	 #, D.7214
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 140(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 144(%esp)	 #, %sfp
	movl	$10, 688(%esp)	 #, D.7210
	movl	$9, 608(%esp)	 #, D.7209
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 132(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	$10, 688(%esp)	 #, D.7225
	movl	%eax, 136(%esp)	 #, %sfp
	movl	$9, 608(%esp)	 #, D.7224
	movl	%esi, (%esp)	 # tmp933,
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 156(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 160(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7220
	movl	$8, 608(%esp)	 #, D.7219
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 148(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 152(%esp)	 #, %sfp
	movl	$12, 688(%esp)	 #, D.7265
	movl	$11, 608(%esp)	 #, D.7264
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 172(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 176(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7260
	movl	$10, 608(%esp)	 #, D.7259
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 164(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 168(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7275
	movl	$10, 608(%esp)	 #, D.7274
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 188(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 192(%esp)	 #, %sfp
	movl	$10, 688(%esp)	 #, D.7270
	movl	$9, 608(%esp)	 #, D.7269
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 180(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 184(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7295
	movl	$10, 608(%esp)	 #, D.7294
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 204(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	$10, 688(%esp)	 #, D.7290
	movl	%eax, 208(%esp)	 #, %sfp
	movl	$9, 608(%esp)	 #, D.7289
	movl	%esi, (%esp)	 # tmp933,
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 196(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 200(%esp)	 #, %sfp
	movl	$10, 688(%esp)	 #, D.7305
	movl	$9, 608(%esp)	 #, D.7304
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 220(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 224(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7300
	movl	$8, 608(%esp)	 #, D.7299
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 212(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 216(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7335
	movl	$10, 608(%esp)	 #, D.7334
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 236(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 240(%esp)	 #, %sfp
	movl	$10, 688(%esp)	 #, D.7330
	movl	$9, 608(%esp)	 #, D.7329
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 228(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 232(%esp)	 #, %sfp
	movl	$10, 688(%esp)	 #, D.7345
	movl	$9, 608(%esp)	 #, D.7344
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 252(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 256(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7340
	movl	$8, 608(%esp)	 #, D.7339
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 244(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	$10, 688(%esp)	 #, D.7365
	movl	%eax, 248(%esp)	 #, %sfp
	movl	$9, 608(%esp)	 #, D.7364
	movl	%esi, (%esp)	 # tmp933,
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 268(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 272(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7360
	movl	$8, 608(%esp)	 #, D.7359
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 260(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 264(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7375
	movl	$8, 608(%esp)	 #, D.7374
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 284(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 288(%esp)	 #, %sfp
	movl	$8, 688(%esp)	 #, D.7370
	movl	$7, 608(%esp)	 #, D.7369
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 276(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 280(%esp)	 #, %sfp
	movl	$12, 688(%esp)	 #, D.7425
	movl	$11, 608(%esp)	 #, D.7424
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 300(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 304(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7420
	movl	$10, 608(%esp)	 #, D.7419
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 292(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 296(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7435
	movl	$10, 608(%esp)	 #, D.7434
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 316(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	$10, 688(%esp)	 #, D.7430
	movl	%eax, 320(%esp)	 #, %sfp
	movl	$9, 608(%esp)	 #, D.7429
	movl	%esi, (%esp)	 # tmp933,
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 308(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 312(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7455
	movl	$10, 608(%esp)	 #, D.7454
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 332(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 336(%esp)	 #, %sfp
	movl	$10, 688(%esp)	 #, D.7450
	movl	$9, 608(%esp)	 #, D.7449
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 324(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 328(%esp)	 #, %sfp
	movl	$10, 688(%esp)	 #, D.7465
	movl	$9, 608(%esp)	 #, D.7464
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 348(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 352(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7460
	movl	$8, 608(%esp)	 #, D.7459
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 340(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 344(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7495
	movl	$10, 608(%esp)	 #, D.7494
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 364(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 368(%esp)	 #, %sfp
	movl	$10, 688(%esp)	 #, D.7490
	movl	$9, 608(%esp)	 #, D.7489
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 356(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	$10, 688(%esp)	 #, D.7505
	movl	%eax, 360(%esp)	 #, %sfp
	movl	$9, 608(%esp)	 #, D.7504
	movl	%esi, (%esp)	 # tmp933,
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 380(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 384(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7500
	movl	$8, 608(%esp)	 #, D.7499
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 372(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 376(%esp)	 #, %sfp
	movl	$10, 688(%esp)	 #, D.7525
	movl	$9, 608(%esp)	 #, D.7524
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 396(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 400(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7520
	movl	$8, 608(%esp)	 #, D.7519
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 388(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 392(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7535
	movl	$8, 608(%esp)	 #, D.7534
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 412(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 416(%esp)	 #, %sfp
	movl	$8, 688(%esp)	 #, D.7530
	movl	$7, 608(%esp)	 #, D.7529
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 404(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 408(%esp)	 #, %sfp
	movl	$11, 688(%esp)	 #, D.7575
	movl	$10, 608(%esp)	 #, D.7574
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 428(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	$10, 688(%esp)	 #, D.7570
	movl	%eax, 432(%esp)	 #, %sfp
	movl	$9, 608(%esp)	 #, D.7569
	movl	%esi, (%esp)	 # tmp933,
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 420(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 424(%esp)	 #, %sfp
	movl	$10, 688(%esp)	 #, D.7585
	movl	$9, 608(%esp)	 #, D.7584
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 444(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 448(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7580
	movl	$8, 608(%esp)	 #, D.7579
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 436(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 440(%esp)	 #, %sfp
	movl	$10, 688(%esp)	 #, D.7605
	movl	$9, 608(%esp)	 #, D.7604
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 460(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 464(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7600
	movl	$8, 608(%esp)	 #, D.7599
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 452(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 456(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7615
	movl	$8, 608(%esp)	 #, D.7614
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 476(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 480(%esp)	 #, %sfp
	movl	$8, 688(%esp)	 #, D.7610
	movl	$7, 608(%esp)	 #, D.7609
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 468(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	$10, 688(%esp)	 #, D.7645
	movl	%eax, 472(%esp)	 #, %sfp
	movl	$9, 608(%esp)	 #, D.7644
	movl	%esi, (%esp)	 # tmp933,
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 492(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 496(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7640
	movl	$8, 608(%esp)	 #, D.7639
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 484(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 488(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7655
	movl	$8, 608(%esp)	 #, D.7654
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 508(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 512(%esp)	 #, %sfp
	movl	$8, 688(%esp)	 #, D.7650
	movl	$7, 608(%esp)	 #, D.7649
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 500(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 504(%esp)	 #, %sfp
	movl	$9, 688(%esp)	 #, D.7675
	movl	$8, 608(%esp)	 #, D.7674
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 524(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 528(%esp)	 #, %sfp
	movl	$8, 688(%esp)	 #, D.7670
	movl	$7, 608(%esp)	 #, D.7669
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 516(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 520(%esp)	 #, %sfp
	movl	$8, 688(%esp)	 #, D.7685
	movl	$7, 608(%esp)	 #, D.7684
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 536(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	movl	$7, 688(%esp)	 #, D.7680
	movl	%eax, 540(%esp)	 #, %sfp
	movl	$6, 608(%esp)	 #, D.7679
	movl	%esi, (%esp)	 # tmp933,
	call	___bench_MOD_fib	 #
	movl	%ebx, (%esp)	 # tmp930,
	movl	%eax, 532(%esp)	 #, %sfp
	call	___bench_MOD_fib	 #
	subl	$1, %ebp	 #, D.7803
	jne	L570	 #,
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 564(%esp)	 # D.7806, %sfp
	call	__gfortran_system_clock_8	 #
	movl	688(%esp), %edx	 # count.113, tmin
	subl	552(%esp), %edx	 # %sfp, tmin
	movl	692(%esp), %ecx	 # count.113, tmin
	sbbl	556(%esp), %ecx	 # %sfp, tmin
	cmpl	%ecx, 548(%esp)	 # tmin, %sfp
	movl	564(%esp), %eax	 # %sfp, D.7806
	jl	L571	 #,
	jg	L572	 #,
	cmpl	%edx, 544(%esp)	 # tmin, %sfp
	jbe	L571	 #,
L572:
	movl	%edx, 544(%esp)	 # tmin, %sfp
	movl	%ecx, 548(%esp)	 # tmin, %sfp
L571:
	subl	$1, 560(%esp)	 #, %sfp
	jne	L573	 #,
	addl	532(%esp), %eax	 # %sfp, D.7659
	movl	536(%esp), %edx	 # %sfp, D.7660
	addl	540(%esp), %edx	 # %sfp, D.7660
	leal	(%eax,%edx), %ecx	 #, D.7619
	movl	516(%esp), %edx	 # %sfp, D.7664
	movl	524(%esp), %eax	 # %sfp, D.7665
	addl	520(%esp), %edx	 # %sfp, D.7664
	addl	528(%esp), %eax	 # %sfp, D.7665
	addl	%edx, %eax	 # D.7664, D.7620
	movl	484(%esp), %edx	 # %sfp, D.7634
	addl	488(%esp), %edx	 # %sfp, D.7634
	leal	(%ecx,%eax), %ebp	 #, D.7539
	movl	500(%esp), %ecx	 # %sfp, D.7629
	movl	508(%esp), %eax	 # %sfp, D.7630
	addl	504(%esp), %ecx	 # %sfp, D.7629
	addl	512(%esp), %eax	 # %sfp, D.7630
	addl	%eax, %ecx	 # D.7630, D.7624
	movl	492(%esp), %eax	 # %sfp, D.7635
	addl	496(%esp), %eax	 # %sfp, D.7635
	addl	%edx, %eax	 # D.7634, D.7625
	movl	452(%esp), %edx	 # %sfp, D.7594
	addl	456(%esp), %edx	 # %sfp, D.7594
	addl	%ecx, %eax	 # D.7624, D.7540
	movl	468(%esp), %ecx	 # %sfp, D.7589
	addl	472(%esp), %ecx	 # %sfp, D.7589
	addl	%eax, %ebp	 # D.7540, D.7379
	movl	476(%esp), %eax	 # %sfp, D.7590
	addl	480(%esp), %eax	 # %sfp, D.7590
	addl	%eax, %ecx	 # D.7590, D.7549
	movl	460(%esp), %eax	 # %sfp, D.7595
	addl	464(%esp), %eax	 # %sfp, D.7595
	addl	%edx, %eax	 # D.7594, D.7550
	movl	420(%esp), %edx	 # %sfp, D.7564
	addl	424(%esp), %edx	 # %sfp, D.7564
	addl	%ecx, %eax	 # D.7549, D.7544
	movl	436(%esp), %ecx	 # %sfp, D.7559
	addl	440(%esp), %ecx	 # %sfp, D.7559
	movl	%eax, 452(%esp)	 # D.7544, %sfp
	movl	444(%esp), %eax	 # %sfp, D.7560
	addl	448(%esp), %eax	 # %sfp, D.7560
	addl	%eax, %ecx	 # D.7560, D.7554
	movl	428(%esp), %eax	 # %sfp, D.7565
	addl	432(%esp), %eax	 # %sfp, D.7565
	addl	%edx, %eax	 # D.7564, D.7555
	addl	%ecx, %eax	 # D.7554, D.7545
	addl	452(%esp), %eax	 # %sfp, D.7380
	movl	404(%esp), %ecx	 # %sfp, D.7509
	addl	408(%esp), %ecx	 # %sfp, D.7509
	movl	388(%esp), %edx	 # %sfp, D.7514
	addl	%eax, %ebp	 # D.7380, D.7059
	movl	412(%esp), %eax	 # %sfp, D.7510
	addl	416(%esp), %eax	 # %sfp, D.7510
	addl	%eax, %ecx	 # D.7510, D.7469
	addl	392(%esp), %edx	 # %sfp, D.7514
	movl	396(%esp), %eax	 # %sfp, D.7515
	addl	400(%esp), %eax	 # %sfp, D.7515
	addl	%edx, %eax	 # D.7514, D.7470
	movl	356(%esp), %edx	 # %sfp, D.7484
	addl	360(%esp), %edx	 # %sfp, D.7484
	addl	%ecx, %eax	 # D.7469, D.7389
	movl	372(%esp), %ecx	 # %sfp, D.7479
	addl	376(%esp), %ecx	 # %sfp, D.7479
	movl	%eax, 388(%esp)	 # D.7389, %sfp
	movl	380(%esp), %eax	 # %sfp, D.7480
	addl	384(%esp), %eax	 # %sfp, D.7480
	addl	%eax, %ecx	 # D.7480, D.7474
	movl	364(%esp), %eax	 # %sfp, D.7485
	addl	368(%esp), %eax	 # %sfp, D.7485
	addl	%edx, %eax	 # D.7484, D.7475
	movl	324(%esp), %edx	 # %sfp, D.7444
	addl	328(%esp), %edx	 # %sfp, D.7444
	addl	%ecx, %eax	 # D.7474, D.7390
	addl	388(%esp), %eax	 # %sfp, D.7384
	movl	340(%esp), %ecx	 # %sfp, D.7439
	addl	344(%esp), %ecx	 # %sfp, D.7439
	movl	%eax, 356(%esp)	 # D.7384, %sfp
	movl	348(%esp), %eax	 # %sfp, D.7440
	addl	352(%esp), %eax	 # %sfp, D.7440
	addl	%eax, %ecx	 # D.7440, D.7399
	movl	332(%esp), %eax	 # %sfp, D.7445
	addl	336(%esp), %eax	 # %sfp, D.7445
	addl	%edx, %eax	 # D.7444, D.7400
	leal	(%ecx,%eax), %edx	 #, D.7394
	movl	308(%esp), %ecx	 # %sfp, D.7409
	movl	316(%esp), %eax	 # %sfp, D.7410
	addl	312(%esp), %ecx	 # %sfp, D.7409
	movl	%edx, 324(%esp)	 # D.7394, %sfp
	addl	320(%esp), %eax	 # %sfp, D.7410
	movl	292(%esp), %edx	 # %sfp, D.7414
	addl	296(%esp), %edx	 # %sfp, D.7414
	addl	%eax, %ecx	 # D.7410, D.7404
	movl	300(%esp), %eax	 # %sfp, D.7415
	addl	304(%esp), %eax	 # %sfp, D.7415
	addl	%edx, %eax	 # D.7414, D.7405
	movl	260(%esp), %edx	 # %sfp, D.7354
	addl	264(%esp), %edx	 # %sfp, D.7354
	addl	%ecx, %eax	 # D.7404, D.7395
	addl	324(%esp), %eax	 # %sfp, D.7385
	movl	276(%esp), %ecx	 # %sfp, D.7349
	addl	356(%esp), %eax	 # %sfp, D.7060
	addl	280(%esp), %ecx	 # %sfp, D.7349
	addl	%eax, %ebp	 # D.7060, D.7054
	movl	284(%esp), %eax	 # %sfp, D.7350
	addl	288(%esp), %eax	 # %sfp, D.7350
	addl	%eax, %ecx	 # D.7350, D.7309
	movl	268(%esp), %eax	 # %sfp, D.7355
	addl	272(%esp), %eax	 # %sfp, D.7355
	addl	%edx, %eax	 # D.7354, D.7310
	movl	228(%esp), %edx	 # %sfp, D.7324
	addl	232(%esp), %edx	 # %sfp, D.7324
	addl	%ecx, %eax	 # D.7309, D.7229
	movl	244(%esp), %ecx	 # %sfp, D.7319
	addl	248(%esp), %ecx	 # %sfp, D.7319
	movl	%eax, 260(%esp)	 # D.7229, %sfp
	movl	252(%esp), %eax	 # %sfp, D.7320
	addl	256(%esp), %eax	 # %sfp, D.7320
	addl	%eax, %ecx	 # D.7320, D.7314
	movl	236(%esp), %eax	 # %sfp, D.7325
	addl	240(%esp), %eax	 # %sfp, D.7325
	addl	%edx, %eax	 # D.7324, D.7315
	movl	196(%esp), %edx	 # %sfp, D.7284
	addl	200(%esp), %edx	 # %sfp, D.7284
	addl	%ecx, %eax	 # D.7314, D.7230
	addl	260(%esp), %eax	 # %sfp, D.7069
	movl	212(%esp), %ecx	 # %sfp, D.7279
	addl	216(%esp), %ecx	 # %sfp, D.7279
	movl	%eax, 228(%esp)	 # D.7069, %sfp
	movl	220(%esp), %eax	 # %sfp, D.7280
	addl	224(%esp), %eax	 # %sfp, D.7280
	addl	%eax, %ecx	 # D.7280, D.7239
	movl	204(%esp), %eax	 # %sfp, D.7285
	addl	208(%esp), %eax	 # %sfp, D.7285
	addl	%edx, %eax	 # D.7284, D.7240
	leal	(%ecx,%eax), %edx	 #, D.7234
	movl	180(%esp), %ecx	 # %sfp, D.7249
	movl	188(%esp), %eax	 # %sfp, D.7250
	addl	184(%esp), %ecx	 # %sfp, D.7249
	addl	192(%esp), %eax	 # %sfp, D.7250
	movl	%edx, 196(%esp)	 # D.7234, %sfp
	movl	164(%esp), %edx	 # %sfp, D.7254
	addl	168(%esp), %edx	 # %sfp, D.7254
	addl	%eax, %ecx	 # D.7250, D.7244
	movl	172(%esp), %eax	 # %sfp, D.7255
	addl	176(%esp), %eax	 # %sfp, D.7255
	addl	%edx, %eax	 # D.7254, D.7245
	movl	132(%esp), %edx	 # %sfp, D.7204
	addl	136(%esp), %edx	 # %sfp, D.7204
	addl	%ecx, %eax	 # D.7244, D.7235
	addl	196(%esp), %eax	 # %sfp, D.7070
	movl	148(%esp), %ecx	 # %sfp, D.7199
	addl	228(%esp), %eax	 # %sfp, D.7064
	addl	152(%esp), %ecx	 # %sfp, D.7199
	movl	%eax, 164(%esp)	 # D.7064, %sfp
	movl	156(%esp), %eax	 # %sfp, D.7200
	addl	160(%esp), %eax	 # %sfp, D.7200
	addl	%eax, %ecx	 # D.7200, D.7159
	movl	140(%esp), %eax	 # %sfp, D.7205
	addl	144(%esp), %eax	 # %sfp, D.7205
	addl	%edx, %eax	 # D.7204, D.7160
	leal	(%ecx,%eax), %edx	 #, D.7079
	movl	116(%esp), %ecx	 # %sfp, D.7169
	movl	124(%esp), %eax	 # %sfp, D.7170
	addl	120(%esp), %ecx	 # %sfp, D.7169
	addl	128(%esp), %eax	 # %sfp, D.7170
	movl	%edx, 132(%esp)	 # D.7079, %sfp
	movl	100(%esp), %edx	 # %sfp, D.7174
	addl	104(%esp), %edx	 # %sfp, D.7174
	addl	%eax, %ecx	 # D.7170, D.7164
	movl	108(%esp), %eax	 # %sfp, D.7175
	addl	112(%esp), %eax	 # %sfp, D.7175
	addl	%edx, %eax	 # D.7174, D.7165
	movl	132(%esp), %edx	 # %sfp, D.7074
	addl	%ecx, %eax	 # D.7164, D.7080
	addl	%eax, %edx	 # D.7080, D.7074
	movl	%edx, 100(%esp)	 # D.7074, %sfp
	movl	84(%esp), %ecx	 # %sfp, D.7129
	movl	92(%esp), %eax	 # %sfp, D.7130
	addl	88(%esp), %ecx	 # %sfp, D.7129
	addl	96(%esp), %eax	 # %sfp, D.7130
	addl	%eax, %ecx	 # D.7130, D.7089
	movl	68(%esp), %eax	 # %sfp, D.7134
	addl	72(%esp), %eax	 # %sfp, D.7134
	movl	%eax, %edx	 # D.7134, D.7134
	movl	76(%esp), %eax	 # %sfp, D.7135
	addl	80(%esp), %eax	 # %sfp, D.7135
	addl	%edx, %eax	 # D.7134, D.7090
	addl	%ecx, %eax	 # D.7089, D.7084
	movl	48(%esp), %ecx	 # %sfp, D.7099
	addl	56(%esp), %ecx	 # %sfp, D.7099
	movl	%eax, 68(%esp)	 # D.7084, %sfp
	movl	60(%esp), %eax	 # %sfp, D.7100
	addl	64(%esp), %eax	 # %sfp, D.7100
	addl	%eax, %ecx	 # D.7100, D.7094
	movl	16(%esp), %eax	 # %sfp, D.7104
	addl	24(%esp), %eax	 # %sfp, D.7104
	movl	%eax, %edx	 # D.7104, D.7104
	movl	32(%esp), %eax	 # %sfp, D.7105
	addl	40(%esp), %eax	 # %sfp, D.7105
	addl	%edx, %eax	 # D.7104, D.7095
	addl	%ecx, %eax	 # D.7094, D.7085
	addl	68(%esp), %eax	 # %sfp, D.7075
	addl	100(%esp), %eax	 # %sfp, D.7065
	addl	164(%esp), %eax	 # %sfp, D.7055
	leal	0(%ebp,%eax), %edx	 #, f
	xorl	%eax, %eax	 # tmp745
	cmpl	$6765, %edx	 #, f
	sete	%al	 #, tmp745
	movl	%eax, 688(%esp)	 # tmp745, D.4214
	jne	L646	 #,
	movl	%esi, (%esp)	 # tmp933,
	movl	$LC18, 696(%esp)	 #, dt_parm.114.common.filename
	movl	$338, 700(%esp)	 #, dt_parm.114.common.line
	movl	$LC36, 740(%esp)	 #, dt_parm.114.format
	movl	$21, 744(%esp)	 #, dt_parm.114.format_len
	movl	$4096, 688(%esp)	 #, dt_parm.114.common.flags
	movl	$6, 692(%esp)	 #, dt_parm.114.common.unit
	call	__gfortran_st_write	 #
	movl	$0, 8(%esp)	 #,
	movl	%edi, 4(%esp)	 # tmp931,
	movl	$0, (%esp)	 #,
	call	__gfortran_system_clock_8	 #
	fildq	616(%esp)	 # count_rate.0
	movl	$8, 8(%esp)	 #,
	movl	%edi, 4(%esp)	 # tmp931,
	movl	%esi, (%esp)	 # tmp933,
	fdivrs	LC0	 #
	fmull	LC37	 #
	fildq	544(%esp)	 # %sfp
	fmulp	%st, %st(1)	 #,
	fstpl	616(%esp)	 # D.4216
	call	__gfortran_transfer_real_write	 #
	movl	%esi, (%esp)	 # tmp933,
	call	__gfortran_st_write_done	 #
	movl	$5, 56(%esp)	 #, %sfp
	movl	$-1, 40(%esp)	 #, %sfp
	movl	$2147483647, 44(%esp)	 #, %sfp
L587:
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	movl	%ebx, (%esp)	 # tmp930,
	call	__gfortran_system_clock_8	 #
	movl	608(%esp), %eax	 # count.115, t1
	movl	612(%esp), %edx	 # count.115, t1
	movl	$1000, 60(%esp)	 #, %sfp
	movl	%eax, 48(%esp)	 # t1, %sfp
	movl	%edx, 52(%esp)	 # t1, %sfp
L584:
	movl	$1000, 32(%esp)	 #, %sfp
	.p2align 4,,10
L583:
	leal	592(%esp), %eax	 #, tmp1144
	movl	%eax, (%esp)	 # tmp1144,
	call	__gfortran_random_r8	 #
	fnstcw	574(%esp)	 #
	fldl	LC38	 #
	movzwl	574(%esp), %eax	 #, tmp951
	movl	%esi, (%esp)	 # tmp933,
	movl	$LC18, 696(%esp)	 #, dt_parm.116.common.filename
	fmull	592(%esp)	 # s1
	movl	$347, 700(%esp)	 #, dt_parm.116.common.line
	movl	%edi, 756(%esp)	 # tmp931, dt_parm.116.internal_unit
	movl	$11, 760(%esp)	 #, dt_parm.116.internal_unit_len
	movb	$12, %ah	 #, tmp951
	movl	$0, 736(%esp)	 #, dt_parm.116.internal_unit_desc
	movl	$0, 692(%esp)	 #, dt_parm.116.common.unit
	movw	%ax, 572(%esp)	 # tmp951,
	movl	$LC39, 740(%esp)	 #, dt_parm.116.format
	movl	$4, 744(%esp)	 #, dt_parm.116.format_len
	movl	$20480, 688(%esp)	 #, dt_parm.116.common.flags
	fldcw	572(%esp)	 #
	fistpl	568(%esp)	 #
	fldcw	574(%esp)	 #
	movl	568(%esp), %eax	 #, D.7806
	movl	%eax, 24(%esp)	 # D.7806, %sfp
	movl	%eax, 584(%esp)	 # D.7806, n
	call	__gfortran_st_write	 #
	leal	584(%esp), %eax	 #, tmp1146
	movl	$4, 8(%esp)	 #,
	movl	%esi, (%esp)	 # tmp933,
	movl	%eax, 4(%esp)	 # tmp1146,
	call	__gfortran_transfer_integer_write	 #
	movl	%esi, (%esp)	 # tmp933,
	call	__gfortran_st_write_done	 #
	movl	%edi, 4(%esp)	 # tmp931,
	movl	$11, (%esp)	 #,
	call	__gfortran_string_len_trim	 #
	cltd
	notl	%edx	 # tmp772
	andl	%edx, %eax	 # tmp772, D.7806
	movl	%eax, 16(%esp)	 # D.7806, %sfp
	je	L620	 #,
	xorl	%ebp, %ebp	 # ivtmp.630
	xorl	%ecx, %ecx	 # m
	jmp	L581	 #
	.p2align 4,,10
L648:
	leal	-55(%edx), %eax	 #, d
L577:
	cmpl	$15, %eax	 #, d
	jg	L647	 #,
L580:
	sall	$4, %ecx	 #, D.7806
	addl	$1, %ebp	 #, ivtmp.630
	addl	%eax, %ecx	 # d, m
	cmpl	%ebp, 16(%esp)	 # ivtmp.630, %sfp
	je	L575	 #,
L581:
	movzbl	(%edi,%ebp), %edx	 # MEM[symbol: s, index: ivtmp.630_1392, offset: 0], D.7803
	leal	-48(%edx), %eax	 #, D.7803
	cmpl	$9, %eax	 #, D.7803
	jbe	L577	 #,
	leal	-65(%edx), %eax	 #, D.7803
	cmpl	$25, %eax	 #, D.7803
	jbe	L648	 #,
	leal	-97(%edx), %eax	 #, D.7803
	cmpl	$25, %eax	 #, D.7803
	ja	L579	 #,
	leal	-87(%edx), %eax	 #, d
	cmpl	$15, %eax	 #, d
	jle	L580	 #,
L647:
	movl	$11, 4(%esp)	 #,
	movl	$LC33, (%esp)	 #,
	call	___utils_MOD_stop_error	 #
L620:
	xorl	%ecx, %ecx	 # m
	.p2align 4,,10
L575:
	movl	24(%esp), %edx	 # %sfp, D.7806
	cmpl	%ecx, %edx	 # m, D.7806
	sete	%al	 #, tmp781
	movzbl	%al, %eax	 # tmp781, tmp781
	movl	%eax, 688(%esp)	 # tmp781, D.4227
	jne	L646	 #,
	subl	$1, 32(%esp)	 #, %sfp
	jne	L583	 #,
	subl	$1, 60(%esp)	 #, %sfp
	jne	L584	 #,
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	movl	%esi, (%esp)	 # tmp933,
	call	__gfortran_system_clock_8	 #
	movl	688(%esp), %eax	 # count.117, tmin
	subl	48(%esp), %eax	 # %sfp, tmin
	movl	692(%esp), %edx	 # count.117, tmin
	sbbl	52(%esp), %edx	 # %sfp, tmin
	cmpl	%edx, 44(%esp)	 # tmin, %sfp
	jl	L585	 #,
	jg	L586	 #,
	cmpl	%eax, 40(%esp)	 # tmin, %sfp
	jbe	L585	 #,
L586:
	movl	%eax, 40(%esp)	 # tmin, %sfp
	movl	%edx, 44(%esp)	 # tmin, %sfp
L585:
	subl	$1, 56(%esp)	 #, %sfp
	jne	L587	 #,
	movl	%esi, (%esp)	 # tmp933,
	movl	$LC18, 696(%esp)	 #, dt_parm.118.common.filename
	movl	$355, 700(%esp)	 #, dt_parm.118.common.line
	movl	$LC40, 740(%esp)	 #, dt_parm.118.format
	movl	$27, 744(%esp)	 #, dt_parm.118.format_len
	movl	$4096, 688(%esp)	 #, dt_parm.118.common.flags
	movl	$6, 692(%esp)	 #, dt_parm.118.common.unit
	call	__gfortran_st_write	 #
	movl	$0, 8(%esp)	 #,
	movl	%ebx, 4(%esp)	 # tmp930,
	movl	$0, (%esp)	 #,
	call	__gfortran_system_clock_8	 #
	fildq	608(%esp)	 # count_rate.0
	movl	$8, 8(%esp)	 #,
	movl	%ebx, 4(%esp)	 # tmp930,
	movl	%esi, (%esp)	 # tmp933,
	fdivrs	LC0	 #
	fmull	LC37	 #
	fildq	40(%esp)	 # %sfp
	fmulp	%st, %st(1)	 #,
	fstpl	608(%esp)	 # D.4234
	call	__gfortran_transfer_real_write	 #
	movl	%esi, (%esp)	 # tmp933,
	call	__gfortran_st_write_done	 #
	movl	$5, 40(%esp)	 #, %sfp
	movl	$-1, 24(%esp)	 #, %sfp
	movl	$2147483647, 28(%esp)	 #, %sfp
L597:
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	movl	$1000, %ebp	 #, D.7803
	movl	%ebx, (%esp)	 # tmp930,
	call	__gfortran_system_clock_8	 #
	movl	608(%esp), %eax	 # count.119, t1
	movl	612(%esp), %edx	 # count.119, t1
	movl	%eax, 32(%esp)	 # t1, %sfp
	movl	%edx, 36(%esp)	 # t1, %sfp
L594:
	movl	$0, 588(%esp)	 #, mandel_sum
	movl	$-20, %edi	 #, re
L593:
	movl	%edi, 16(%esp)	 # re, %sfp
	movl	$-10, %ecx	 #, im
	fildl	16(%esp)	 # %sfp
	fmull	LC29	 #
	.p2align 4,,10
L592:
	movl	%ecx, 16(%esp)	 # im, %sfp
	movl	$1, %edx	 #, n
	fildl	16(%esp)	 # %sfp
	fmull	LC29	 #
	fld	%st(0)	 #
	fld	%st(2)	 #
	flds	LC30	 #
	jmp	L591	 #
	.p2align 4,,10
L643:
	fxch	%st(4)	 #
	fmulp	%st, %st(3)	 #,
	fxch	%st(2)	 #
	addl	$1, %edx	 #, n
	cmpl	$81, %edx	 #, n
	fadd	%st(0), %st	 #,
	fxch	%st(2)	 #
	fadd	%st(5), %st	 #,
	fsubp	%st, %st(3)	 #,
	fxch	%st(1)	 #
	fadd	%st(3), %st	 #,
	je	L649	 #,
	fxch	%st(2)	 #
	fxch	%st(1)	 #
L591:
	fld	%st(1)	 #
	fmul	%st(2), %st	 #,
	fld	%st(3)	 #
	fmul	%st(4), %st	 #,
	fld	%st(1)	 #
	fadd	%st(1), %st	 #,
	fcomp	%st(3)	 #
	fnstsw	%ax	 # tmp807
	sahf
	jbe	L643	 #,
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	subl	$1, %edx	 #, D.7806
L590:
	movl	588(%esp), %eax	 # mandel_sum, D.7806
	addl	$1, %ecx	 #, im
	addl	%eax, %edx	 # D.7806, D.7806
	cmpl	$11, %ecx	 #, im
	movl	%edx, 588(%esp)	 # D.7806, mandel_sum
	jne	L592	 #,
	fstp	%st(0)	 #
	addl	$1, %edi	 #, re
	cmpl	$6, %edi	 #, re
	jne	L593	 #,
	subl	$1, %ebp	 #, D.7803
	movl	588(%esp), %edi	 # mandel_sum, D.7806
	jne	L594	 #,
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	movl	%esi, (%esp)	 # tmp933,
	call	__gfortran_system_clock_8	 #
	movl	688(%esp), %eax	 # count.120, tmin
	subl	32(%esp), %eax	 # %sfp, tmin
	movl	692(%esp), %edx	 # count.120, tmin
	sbbl	36(%esp), %edx	 # %sfp, tmin
	cmpl	%edx, 28(%esp)	 # tmin, %sfp
	jl	L595	 #,
	jg	L596	 #,
	cmpl	%eax, 24(%esp)	 # tmin, %sfp
	jbe	L595	 #,
L596:
	movl	%eax, 24(%esp)	 # tmin, %sfp
	movl	%edx, 28(%esp)	 # tmin, %sfp
L595:
	subl	$1, 40(%esp)	 #, %sfp
	jne	L597	 #,
	xorl	%eax, %eax	 # tmp813
	cmpl	$14791, %edi	 #, D.7806
	sete	%al	 #, tmp813
	movl	%eax, 688(%esp)	 # tmp813, D.4244
	jne	L646	 #,
	movl	%esi, (%esp)	 # tmp933,
	movl	$LC18, 696(%esp)	 #, dt_parm.121.common.filename
	leal	628(%esp), %edi	 #, tmp940
	movl	$367, 700(%esp)	 #, dt_parm.121.common.line
	movl	$LC41, 740(%esp)	 #, dt_parm.121.format
	movl	$24, 744(%esp)	 #, dt_parm.121.format_len
	movl	$4096, 688(%esp)	 #, dt_parm.121.common.flags
	movl	$6, 692(%esp)	 #, dt_parm.121.common.unit
	call	__gfortran_st_write	 #
	movl	$0, 8(%esp)	 #,
	movl	%ebx, 4(%esp)	 # tmp930,
	movl	$0, (%esp)	 #,
	call	__gfortran_system_clock_8	 #
	fildq	608(%esp)	 # count_rate.0
	movl	$8, 8(%esp)	 #,
	movl	%ebx, 4(%esp)	 # tmp930,
	movl	%esi, (%esp)	 # tmp933,
	fdivrs	LC0	 #
	fmull	LC37	 #
	fildq	24(%esp)	 # %sfp
	fmulp	%st, %st(1)	 #,
	fstpl	608(%esp)	 # D.4246
	call	__gfortran_transfer_real_write	 #
	movl	%esi, (%esp)	 # tmp933,
	call	__gfortran_st_write_done	 #
	movl	$5, 40(%esp)	 #, %sfp
	movl	$-1, 16(%esp)	 #, %sfp
	movl	$2147483647, 20(%esp)	 #, %sfp
L605:
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	movl	%ebx, (%esp)	 # tmp930,
	call	__gfortran_system_clock_8	 #
	movl	628(%esp), %ebp	 # d.data, D.7808
	movl	608(%esp), %eax	 # count.122, t1
	movl	612(%esp), %edx	 # count.122, t1
	testl	%ebp, %ebp	 # D.7808
	movl	%eax, 32(%esp)	 # t1, %sfp
	movl	%edx, 36(%esp)	 # t1, %sfp
	je	L599	 #,
	movl	$LC42, 8(%esp)	 #,
	movl	$LC10, 4(%esp)	 #,
	movl	$LC43, (%esp)	 #,
	call	__gfortran_runtime_error_at	 #
L579:
	movl	$11, 4(%esp)	 #,
	movl	$LC32, (%esp)	 #,
	call	___utils_MOD_stop_error	 #
L646:
	movl	%esi, (%esp)	 # tmp933,
	call	___utils_MOD_assert.part.0	 #
	.p2align 4,,10
L649:
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	fstp	%st(0)	 #
	movl	$80, %edx	 #, D.7806
	jmp	L590	 #
L599:
	movl	$1000, 24(%esp)	 #, %sfp
	jmp	L602	 #
	.p2align 4,,10
L600:
	movl	%edi, (%esp)	 # tmp940,
	movl	$537, 636(%esp)	 #, d.dtype
	movl	$1, 644(%esp)	 #, d.dim[0].lbound
	movl	$5000, 648(%esp)	 #, d.dim[0].ubound
	movl	$1, 640(%esp)	 #, d.dim[0].stride
	movl	$-1, 632(%esp)	 #, d.offset
	call	__gfortran_arandom_r8	 #
	movl	648(%esp), %eax	 # d.dim[0].ubound, d.dim[0].ubound
	subl	644(%esp), %eax	 # d.dim[0].lbound, D.7806
	movl	%esi, 8(%esp)	 # tmp933,
	movl	$LC44, 4(%esp)	 #,
	movl	%edi, (%esp)	 # tmp940,
	addl	$1, %eax	 #, tmp834
	cltd
	notl	%edx	 # tmp836
	andl	%edx, %eax	 # tmp836, D.7806
	movl	%eax, 688(%esp)	 # D.7806, D.4255
	call	___bench_MOD_quicksort	 #
	movl	628(%esp), %eax	 # d.data, D.7807
	testl	%eax, %eax	 # D.7807
	je	L650	 #,
	movl	%eax, (%esp)	 # D.7807,
	call	_free	 #
	subl	$1, 24(%esp)	 #, %sfp
	movl	$0, 628(%esp)	 #, d.data
	je	L651	 #,
L602:
	movl	$40000, (%esp)	 #,
	call	_malloc	 #
	testl	%eax, %eax	 # tmp830
	movl	%eax, 628(%esp)	 # tmp830, d.data
	jne	L600	 #,
	movl	$LC12, (%esp)	 #,
	call	__gfortran_os_error	 #
L651:
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	movl	%esi, (%esp)	 # tmp933,
	call	__gfortran_system_clock_8	 #
	movl	688(%esp), %eax	 # count.124, tmin
	subl	32(%esp), %eax	 # %sfp, tmin
	movl	692(%esp), %edx	 # count.124, tmin
	sbbl	36(%esp), %edx	 # %sfp, tmin
	cmpl	%edx, 20(%esp)	 # tmin, %sfp
	jl	L603	 #,
	jg	L604	 #,
	cmpl	%eax, 16(%esp)	 # tmin, %sfp
	jbe	L603	 #,
L604:
	movl	%eax, 16(%esp)	 # tmin, %sfp
	movl	%edx, 20(%esp)	 # tmin, %sfp
L603:
	subl	$1, 40(%esp)	 #, %sfp
	jne	L605	 #,
	movl	%esi, (%esp)	 # tmp933,
	movl	$LC18, 696(%esp)	 #, dt_parm.125.common.filename
	movl	$5, %edi	 #, D.7803
	movl	$381, 700(%esp)	 #, dt_parm.125.common.line
	movl	$LC47, 740(%esp)	 #, dt_parm.125.format
	movl	$27, 744(%esp)	 #, dt_parm.125.format_len
	movl	$4096, 688(%esp)	 #, dt_parm.125.common.flags
	movl	$6, 692(%esp)	 #, dt_parm.125.common.unit
	call	__gfortran_st_write	 #
	movl	$0, 8(%esp)	 #,
	movl	%ebx, 4(%esp)	 # tmp930,
	movl	$0, (%esp)	 #,
	call	__gfortran_system_clock_8	 #
	fildq	608(%esp)	 # count_rate.0
	movl	$8, 8(%esp)	 #,
	movl	%ebx, 4(%esp)	 # tmp930,
	movl	%esi, (%esp)	 # tmp933,
	fdivrs	LC0	 #
	fmull	LC37	 #
	fildq	16(%esp)	 # %sfp
	fmulp	%st, %st(1)	 #,
	fstpl	608(%esp)	 # D.4261
	call	__gfortran_transfer_real_write	 #
	movl	%esi, (%esp)	 # tmp933,
	call	__gfortran_st_write_done	 #
	movl	$-1, 24(%esp)	 #, %sfp
	movl	$2147483647, 28(%esp)	 #, %sfp
	jmp	L610	 #
L653:
	fstp	%st(0)	 #
L610:
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	movl	%ebx, (%esp)	 # tmp930,
	call	__gfortran_system_clock_8	 #
	movl	608(%esp), %eax	 # count.126, t1
	movl	612(%esp), %edx	 # count.126, t1
	fld1
	movl	$500, %ecx	 #, D.7803
	movl	%eax, 32(%esp)	 # t1, %sfp
	movl	%edx, 36(%esp)	 # t1, %sfp
	jmp	L607	 #
	.p2align 4,,10
L652:
	fstp	%st(0)	 #
L607:
	fldz
	movl	$1, %eax	 #, k
L606:
	movl	%eax, %edx	 # k, D.7806
	imull	%eax, %edx	 # k, D.7806
	addl	$1, %eax	 #, k
	cmpl	$10001, %eax	 #, k
	movl	%edx, 16(%esp)	 # D.7806, %sfp
	fildl	16(%esp)	 # %sfp
	fdivr	%st(2), %st	 #,
	faddp	%st, %st(1)	 #,
	jne	L606	 #,
	subl	$1, %ecx	 #, D.7803
	jne	L652	 #,
	fstp	%st(1)	 #
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	fstpl	16(%esp)	 # %sfp
	movl	%esi, (%esp)	 # tmp933,
	call	__gfortran_system_clock_8	 #
	movl	688(%esp), %eax	 # count.127, tmin
	subl	32(%esp), %eax	 # %sfp, tmin
	movl	692(%esp), %edx	 # count.127, tmin
	sbbl	36(%esp), %edx	 # %sfp, tmin
	cmpl	%edx, 28(%esp)	 # tmin, %sfp
	fldl	16(%esp)	 # %sfp
	jl	L608	 #,
	jg	L609	 #,
	cmpl	%eax, 24(%esp)	 # tmin, %sfp
	jbe	L608	 #,
L609:
	movl	%eax, 24(%esp)	 # tmin, %sfp
	movl	%edx, 28(%esp)	 # tmin, %sfp
L608:
	subl	$1, %edi	 #, D.7803
	jne	L653	 #,
	fsubl	LC48	 #
	fabs
	fcoml	LC49	 #
	fnstsw	%ax	 # tmp868
	sahf
	fldl	LC49	 #
	setb	%al	 #, tmp869
	movzbl	%al, %eax	 # tmp869, tmp869
	movl	%eax, 688(%esp)	 # tmp869, D.4268
	fcompp
	fnstsw	%ax	 # tmp871
	sahf
	jbe	L646	 #,
	movl	%esi, (%esp)	 # tmp933,
	movl	$LC18, 696(%esp)	 #, dt_parm.128.common.filename
	leal	600(%esp), %edi	 #, tmp929
	movl	$391, 700(%esp)	 #, dt_parm.128.common.line
	movl	$LC50, 740(%esp)	 #, dt_parm.128.format
	movl	$24, 744(%esp)	 #, dt_parm.128.format_len
	movl	$4096, 688(%esp)	 #, dt_parm.128.common.flags
	movl	$6, 692(%esp)	 #, dt_parm.128.common.unit
	call	__gfortran_st_write	 #
	movl	$0, 8(%esp)	 #,
	movl	%ebx, 4(%esp)	 # tmp930,
	movl	$0, (%esp)	 #,
	call	__gfortran_system_clock_8	 #
	fildq	608(%esp)	 # count_rate.0
	movl	$8, 8(%esp)	 #,
	movl	%ebx, 4(%esp)	 # tmp930,
	movl	%esi, (%esp)	 # tmp933,
	fdivrs	LC0	 #
	fildq	24(%esp)	 # %sfp
	fmulp	%st, %st(1)	 #,
	fstpl	608(%esp)	 # D.4270
	call	__gfortran_transfer_real_write	 #
	movl	%esi, (%esp)	 # tmp933,
	call	__gfortran_st_write_done	 #
	movl	$5, %ecx	 #, D.7803
	movl	$-1, 16(%esp)	 #, %sfp
	movl	$2147483647, 20(%esp)	 #, %sfp
L614:
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	movl	%ebx, (%esp)	 # tmp930,
	movl	%ecx, 32(%esp)	 # D.7803, %sfp
	call	__gfortran_system_clock_8	 #
	movl	608(%esp), %eax	 # count.129, t1
	movl	612(%esp), %edx	 # count.129, t1
	leal	592(%esp), %ecx	 #, tmp1178
	movl	%edi, 8(%esp)	 # tmp929,
	movl	$LC51, (%esp)	 #,
	movl	%ecx, 4(%esp)	 # tmp1178,
	movl	%eax, 24(%esp)	 # t1, %sfp
	movl	%edx, 28(%esp)	 # t1, %sfp
	call	___bench_MOD_randmatstat	 #
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	movl	%esi, (%esp)	 # tmp933,
	call	__gfortran_system_clock_8	 #
	movl	688(%esp), %eax	 # count.130, tmin
	subl	24(%esp), %eax	 # %sfp, tmin
	movl	692(%esp), %edx	 # count.130, tmin
	sbbl	28(%esp), %edx	 # %sfp, tmin
	cmpl	%edx, 20(%esp)	 # tmin, %sfp
	movl	32(%esp), %ecx	 # %sfp, D.7803
	jl	L612	 #,
	jg	L613	 #,
	cmpl	%eax, 16(%esp)	 # tmin, %sfp
	jbe	L612	 #,
L613:
	movl	%eax, 16(%esp)	 # tmin, %sfp
	movl	%edx, 20(%esp)	 # tmin, %sfp
L612:
	subl	$1, %ecx	 #, D.7803
	jne	L614	 #,
	movl	%esi, (%esp)	 # tmp933,
	movl	$LC18, 696(%esp)	 #, dt_parm.131.common.filename
	movl	$5, %edi	 #, D.7803
	movl	$402, 700(%esp)	 #, dt_parm.131.common.line
	movl	$LC52, 740(%esp)	 #, dt_parm.131.format
	movl	$31, 744(%esp)	 #, dt_parm.131.format_len
	movl	$4096, 688(%esp)	 #, dt_parm.131.common.flags
	movl	$6, 692(%esp)	 #, dt_parm.131.common.unit
	call	__gfortran_st_write	 #
	movl	$0, 8(%esp)	 #,
	movl	%ebx, 4(%esp)	 # tmp930,
	movl	$0, (%esp)	 #,
	call	__gfortran_system_clock_8	 #
	fildq	608(%esp)	 # count_rate.0
	movl	$8, 8(%esp)	 #,
	movl	%ebx, 4(%esp)	 # tmp930,
	movl	%esi, (%esp)	 # tmp933,
	fdivrs	LC0	 #
	fildq	16(%esp)	 # %sfp
	fmulp	%st, %st(1)	 #,
	fstpl	608(%esp)	 # D.4279
	call	__gfortran_transfer_real_write	 #
	movl	%esi, (%esp)	 # tmp933,
	call	__gfortran_st_write_done	 #
	movl	$-1, 16(%esp)	 #, %sfp
	movl	$2147483647, 20(%esp)	 #, %sfp
L619:
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	movl	%ebx, (%esp)	 # tmp930,
	call	__gfortran_system_clock_8	 #
	movl	608(%esp), %eax	 # count.132, t1
	movl	612(%esp), %edx	 # count.132, t1
	testl	%ebp, %ebp	 # D.7808
	movl	%eax, 24(%esp)	 # t1, %sfp
	movl	%edx, 28(%esp)	 # t1, %sfp
	je	L615	 #,
	movl	%ebp, (%esp)	 # D.7808,
	call	_free	 #
L615:
	leal	652(%esp), %eax	 #, tmp1183
	movl	$LC51, (%esp)	 #,
	movl	$0, 652(%esp)	 #, c.data
	movl	%eax, 4(%esp)	 # tmp1183,
	call	___bench_MOD_randmatmul	 #
	movl	676(%esp), %eax	 # c.dim[1].stride, c.dim[1].stride
	addl	656(%esp), %eax	 # c.offset, tmp904
	movl	652(%esp), %ebp	 # c.data, D.7807
	fldl	8(%ebp,%eax,8)	 # MEM[(real(kind=8)[0:] *)_248]
	ftst
	fnstsw	%ax	 # tmp909
	fstp	%st(0)	 #
	sahf
	setnb	%al	 #, tmp910
	movzbl	%al, %eax	 # tmp910, tmp910
	movl	%eax, 688(%esp)	 # tmp910, D.4284
	jb	L646	 #,
	movl	$0, 8(%esp)	 #,
	movl	$0, 4(%esp)	 #,
	movl	%esi, (%esp)	 # tmp933,
	call	__gfortran_system_clock_8	 #
	movl	688(%esp), %eax	 # count.133, tmin
	subl	24(%esp), %eax	 # %sfp, tmin
	movl	692(%esp), %edx	 # count.133, tmin
	sbbl	28(%esp), %edx	 # %sfp, tmin
	cmpl	%edx, 20(%esp)	 # tmin, %sfp
	jl	L617	 #,
	jg	L618	 #,
	cmpl	%eax, 16(%esp)	 # tmin, %sfp
	jbe	L617	 #,
L618:
	movl	%eax, 16(%esp)	 # tmin, %sfp
	movl	%edx, 20(%esp)	 # tmin, %sfp
L617:
	subl	$1, %edi	 #, D.7803
	jne	L619	 #,
	movl	%esi, (%esp)	 # tmp933,
	movl	$LC18, 696(%esp)	 #, dt_parm.134.common.filename
	movl	$412, 700(%esp)	 #, dt_parm.134.common.line
	movl	$LC53, 740(%esp)	 #, dt_parm.134.format
	movl	$30, 744(%esp)	 #, dt_parm.134.format_len
	movl	$4096, 688(%esp)	 #, dt_parm.134.common.flags
	movl	$6, 692(%esp)	 #, dt_parm.134.common.unit
	call	__gfortran_st_write	 #
	movl	%ebx, 4(%esp)	 # tmp930,
	movl	$0, 8(%esp)	 #,
	movl	$0, (%esp)	 #,
	call	__gfortran_system_clock_8	 #
	fildq	608(%esp)	 # count_rate.0
	movl	%ebx, 4(%esp)	 # tmp930,
	movl	%esi, (%esp)	 # tmp933,
	movl	$8, 8(%esp)	 #,
	fdivrs	LC0	 #
	fildq	16(%esp)	 # %sfp
	fmulp	%st, %st(1)	 #,
	fstpl	608(%esp)	 # D.4289
	call	__gfortran_transfer_real_write	 #
	movl	%esi, (%esp)	 # tmp933,
	call	__gfortran_st_write_done	 #
	addl	$1052, %esp	 #,
	.cfi_remember_state
	.cfi_def_cfa_offset 20
	popl	%ebx	 #
	.cfi_restore 3
	.cfi_def_cfa_offset 16
	popl	%esi	 #
	.cfi_restore 6
	.cfi_def_cfa_offset 12
	popl	%edi	 #
	.cfi_restore 7
	.cfi_def_cfa_offset 8
	popl	%ebp	 #
	.cfi_restore 5
	.cfi_def_cfa_offset 4
	ret
L650:
	.cfi_restore_state
	movl	$LC42, 8(%esp)	 #,
	movl	$LC45, 4(%esp)	 #,
	movl	$LC46, (%esp)	 #,
	call	__gfortran_runtime_error_at	 #
	.cfi_endproc
LFE17:
	.section	.text.unlikely,"x"
LCOLDE54:
	.text
LHOTE54:
	.def	___main;	.scl	2;	.type	32;	.endef
	.section	.text.unlikely,"x"
LCOLDB55:
	.section	.text.startup,"x"
LHOTB55:
	.p2align 4,,15
	.globl	_main
	.def	_main;	.scl	2;	.type	32;	.endef
_main:
LFB18:
	.cfi_startproc
	pushl	%ebp	 #
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp	 #,
	.cfi_def_cfa_register 5
	andl	$-16, %esp	 #,
	subl	$16, %esp	 #,
	call	___main	 #
	movl	12(%ebp), %eax	 # argv, argv
	movl	%eax, 4(%esp)	 # argv,
	movl	8(%ebp), %eax	 # argc, argc
	movl	%eax, (%esp)	 # argc,
	call	__gfortran_set_args	 #
	movl	$_options.135.4295, 4(%esp)	 #,
	movl	$9, (%esp)	 #,
	call	__gfortran_set_options	 #
	call	_MAIN__	 #
	xorl	%eax, %eax	 #
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE18:
	.section	.text.unlikely,"x"
LCOLDE55:
	.section	.text.startup,"x"
LHOTE55:
	.section .rdata,"dr"
	.align 32
_options.135.4295:
	.long	68
	.long	1023
	.long	0
	.long	0
	.long	1
	.long	1
	.long	0
	.long	0
	.long	31
.lcomm _sln.3394,8,8
.lcomm _v.3397,8,8
.lcomm _second.3393,4,4
	.align 4
LC0:
	.long	1148846080
	.align 4
LC1:
	.long	2143289344
	.align 8
LC4:
	.long	0
	.long	1048576
	.align 4
LC6:
	.long	1
	.align 8
LC29:
	.long	-1717986918
	.long	1069128089
	.align 4
LC30:
	.long	1082130432
	.align 8
LC37:
	.long	-755914244
	.long	1062232653
	.align 8
LC38:
	.long	-4194304
	.long	1105199103
	.align 8
LC48:
	.long	-2011238023
	.long	1073369405
	.align 8
LC49:
	.long	-1598689907
	.long	1051772663
	.ident	"GCC: (GNU) 5.3.0"
	.def	__gfortran_system_clock_8;	.scl	2;	.type	32;	.endef
	.def	__gfortran_random_r8;	.scl	2;	.type	32;	.endef
	.def	__gfortran_random_seed_i4;	.scl	2;	.type	32;	.endef
	.def	_malloc;	.scl	2;	.type	32;	.endef
	.def	__gfortran_system_clock_4;	.scl	2;	.type	32;	.endef
	.def	_realloc;	.scl	2;	.type	32;	.endef
	.def	_memcpy;	.scl	2;	.type	32;	.endef
	.def	_free;	.scl	2;	.type	32;	.endef
	.def	__gfortran_os_error;	.scl	2;	.type	32;	.endef
	.def	__gfortran_runtime_error_at;	.scl	2;	.type	32;	.endef
	.def	__gfortran_runtime_error;	.scl	2;	.type	32;	.endef
	.def	__gfortran_st_write;	.scl	2;	.type	32;	.endef
	.def	__gfortran_transfer_character_write;	.scl	2;	.type	32;	.endef
	.def	__gfortran_st_write_done;	.scl	2;	.type	32;	.endef
	.def	__gfortran_stop_numeric_f08;	.scl	2;	.type	32;	.endef
	.def	__gfortran_arandom_r8;	.scl	2;	.type	32;	.endef
	.def	__gfortran_matmul_r8;	.scl	2;	.type	32;	.endef
	.def	__gfortran_matmul_r8;	.scl	2;	.type	32;	.endef
	.def	__gfortran_matmul_r8;	.scl	2;	.type	32;	.endef
	.def	__gfortran_matmul_r8;	.scl	2;	.type	32;	.endef
	.def	__gfortran_matmul_r8;	.scl	2;	.type	32;	.endef
	.def	__gfortran_matmul_r8;	.scl	2;	.type	32;	.endef
	.def	__gfortran_matmul_r8;	.scl	2;	.type	32;	.endef
	.def	__gfortran_transfer_real_write;	.scl	2;	.type	32;	.endef
	.def	__gfortran_transfer_integer_write;	.scl	2;	.type	32;	.endef
	.def	__gfortran_string_len_trim;	.scl	2;	.type	32;	.endef
	.def	__gfortran_set_args;	.scl	2;	.type	32;	.endef
	.def	__gfortran_set_options;	.scl	2;	.type	32;	.endef
